// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/fork"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
)

// ForkUpdate is the builder for updating Fork entities.
type ForkUpdate struct {
	config
	hooks    []Hook
	mutation *ForkMutation
}

// Where appends a list predicates to the ForkUpdate builder.
func (fu *ForkUpdate) Where(ps ...predicate.Fork) *ForkUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetForkURL sets the "fork_url" field.
func (fu *ForkUpdate) SetForkURL(s string) *ForkUpdate {
	fu.mutation.SetForkURL(s)
	return fu
}

// SetNillableForkURL sets the "fork_url" field if the given value is not nil.
func (fu *ForkUpdate) SetNillableForkURL(s *string) *ForkUpdate {
	if s != nil {
		fu.SetForkURL(*s)
	}
	return fu
}

// SetForkOwner sets the "fork_owner" field.
func (fu *ForkUpdate) SetForkOwner(s string) *ForkUpdate {
	fu.mutation.SetForkOwner(s)
	return fu
}

// SetNillableForkOwner sets the "fork_owner" field if the given value is not nil.
func (fu *ForkUpdate) SetNillableForkOwner(s *string) *ForkUpdate {
	if s != nil {
		fu.SetForkOwner(*s)
	}
	return fu
}

// SetForkName sets the "fork_name" field.
func (fu *ForkUpdate) SetForkName(s string) *ForkUpdate {
	fu.mutation.SetForkName(s)
	return fu
}

// SetNillableForkName sets the "fork_name" field if the given value is not nil.
func (fu *ForkUpdate) SetNillableForkName(s *string) *ForkUpdate {
	if s != nil {
		fu.SetForkName(*s)
	}
	return fu
}

// SetIsActive sets the "is_active" field.
func (fu *ForkUpdate) SetIsActive(b bool) *ForkUpdate {
	fu.mutation.SetIsActive(b)
	return fu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (fu *ForkUpdate) SetNillableIsActive(b *bool) *ForkUpdate {
	if b != nil {
		fu.SetIsActive(*b)
	}
	return fu
}

// SetLastSync sets the "last_sync" field.
func (fu *ForkUpdate) SetLastSync(t time.Time) *ForkUpdate {
	fu.mutation.SetLastSync(t)
	return fu
}

// SetNillableLastSync sets the "last_sync" field if the given value is not nil.
func (fu *ForkUpdate) SetNillableLastSync(t *time.Time) *ForkUpdate {
	if t != nil {
		fu.SetLastSync(*t)
	}
	return fu
}

// ClearLastSync clears the value of the "last_sync" field.
func (fu *ForkUpdate) ClearLastSync() *ForkUpdate {
	fu.mutation.ClearLastSync()
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *ForkUpdate) SetUpdatedAt(t time.Time) *ForkUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetOriginalRepoID sets the "original_repo" edge to the Repository entity by ID.
func (fu *ForkUpdate) SetOriginalRepoID(id string) *ForkUpdate {
	fu.mutation.SetOriginalRepoID(id)
	return fu
}

// SetOriginalRepo sets the "original_repo" edge to the Repository entity.
func (fu *ForkUpdate) SetOriginalRepo(r *Repository) *ForkUpdate {
	return fu.SetOriginalRepoID(r.ID)
}

// Mutation returns the ForkMutation object of the builder.
func (fu *ForkUpdate) Mutation() *ForkMutation {
	return fu.mutation
}

// ClearOriginalRepo clears the "original_repo" edge to the Repository entity.
func (fu *ForkUpdate) ClearOriginalRepo() *ForkUpdate {
	fu.mutation.ClearOriginalRepo()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *ForkUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *ForkUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *ForkUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *ForkUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *ForkUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := fork.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *ForkUpdate) check() error {
	if fu.mutation.OriginalRepoCleared() && len(fu.mutation.OriginalRepoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Fork.original_repo"`)
	}
	return nil
}

func (fu *ForkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fork.Table, fork.Columns, sqlgraph.NewFieldSpec(fork.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.ForkURL(); ok {
		_spec.SetField(fork.FieldForkURL, field.TypeString, value)
	}
	if value, ok := fu.mutation.ForkOwner(); ok {
		_spec.SetField(fork.FieldForkOwner, field.TypeString, value)
	}
	if value, ok := fu.mutation.ForkName(); ok {
		_spec.SetField(fork.FieldForkName, field.TypeString, value)
	}
	if value, ok := fu.mutation.IsActive(); ok {
		_spec.SetField(fork.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := fu.mutation.LastSync(); ok {
		_spec.SetField(fork.FieldLastSync, field.TypeTime, value)
	}
	if fu.mutation.LastSyncCleared() {
		_spec.ClearField(fork.FieldLastSync, field.TypeTime)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(fork.FieldUpdatedAt, field.TypeTime, value)
	}
	if fu.mutation.OriginalRepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fork.OriginalRepoTable,
			Columns: []string{fork.OriginalRepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.OriginalRepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fork.OriginalRepoTable,
			Columns: []string{fork.OriginalRepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fork.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// ForkUpdateOne is the builder for updating a single Fork entity.
type ForkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ForkMutation
}

// SetForkURL sets the "fork_url" field.
func (fuo *ForkUpdateOne) SetForkURL(s string) *ForkUpdateOne {
	fuo.mutation.SetForkURL(s)
	return fuo
}

// SetNillableForkURL sets the "fork_url" field if the given value is not nil.
func (fuo *ForkUpdateOne) SetNillableForkURL(s *string) *ForkUpdateOne {
	if s != nil {
		fuo.SetForkURL(*s)
	}
	return fuo
}

// SetForkOwner sets the "fork_owner" field.
func (fuo *ForkUpdateOne) SetForkOwner(s string) *ForkUpdateOne {
	fuo.mutation.SetForkOwner(s)
	return fuo
}

// SetNillableForkOwner sets the "fork_owner" field if the given value is not nil.
func (fuo *ForkUpdateOne) SetNillableForkOwner(s *string) *ForkUpdateOne {
	if s != nil {
		fuo.SetForkOwner(*s)
	}
	return fuo
}

// SetForkName sets the "fork_name" field.
func (fuo *ForkUpdateOne) SetForkName(s string) *ForkUpdateOne {
	fuo.mutation.SetForkName(s)
	return fuo
}

// SetNillableForkName sets the "fork_name" field if the given value is not nil.
func (fuo *ForkUpdateOne) SetNillableForkName(s *string) *ForkUpdateOne {
	if s != nil {
		fuo.SetForkName(*s)
	}
	return fuo
}

// SetIsActive sets the "is_active" field.
func (fuo *ForkUpdateOne) SetIsActive(b bool) *ForkUpdateOne {
	fuo.mutation.SetIsActive(b)
	return fuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (fuo *ForkUpdateOne) SetNillableIsActive(b *bool) *ForkUpdateOne {
	if b != nil {
		fuo.SetIsActive(*b)
	}
	return fuo
}

// SetLastSync sets the "last_sync" field.
func (fuo *ForkUpdateOne) SetLastSync(t time.Time) *ForkUpdateOne {
	fuo.mutation.SetLastSync(t)
	return fuo
}

// SetNillableLastSync sets the "last_sync" field if the given value is not nil.
func (fuo *ForkUpdateOne) SetNillableLastSync(t *time.Time) *ForkUpdateOne {
	if t != nil {
		fuo.SetLastSync(*t)
	}
	return fuo
}

// ClearLastSync clears the value of the "last_sync" field.
func (fuo *ForkUpdateOne) ClearLastSync() *ForkUpdateOne {
	fuo.mutation.ClearLastSync()
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *ForkUpdateOne) SetUpdatedAt(t time.Time) *ForkUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetOriginalRepoID sets the "original_repo" edge to the Repository entity by ID.
func (fuo *ForkUpdateOne) SetOriginalRepoID(id string) *ForkUpdateOne {
	fuo.mutation.SetOriginalRepoID(id)
	return fuo
}

// SetOriginalRepo sets the "original_repo" edge to the Repository entity.
func (fuo *ForkUpdateOne) SetOriginalRepo(r *Repository) *ForkUpdateOne {
	return fuo.SetOriginalRepoID(r.ID)
}

// Mutation returns the ForkMutation object of the builder.
func (fuo *ForkUpdateOne) Mutation() *ForkMutation {
	return fuo.mutation
}

// ClearOriginalRepo clears the "original_repo" edge to the Repository entity.
func (fuo *ForkUpdateOne) ClearOriginalRepo() *ForkUpdateOne {
	fuo.mutation.ClearOriginalRepo()
	return fuo
}

// Where appends a list predicates to the ForkUpdate builder.
func (fuo *ForkUpdateOne) Where(ps ...predicate.Fork) *ForkUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *ForkUpdateOne) Select(field string, fields ...string) *ForkUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fork entity.
func (fuo *ForkUpdateOne) Save(ctx context.Context) (*Fork, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *ForkUpdateOne) SaveX(ctx context.Context) *Fork {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *ForkUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *ForkUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *ForkUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := fork.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *ForkUpdateOne) check() error {
	if fuo.mutation.OriginalRepoCleared() && len(fuo.mutation.OriginalRepoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Fork.original_repo"`)
	}
	return nil
}

func (fuo *ForkUpdateOne) sqlSave(ctx context.Context) (_node *Fork, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fork.Table, fork.Columns, sqlgraph.NewFieldSpec(fork.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Fork.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fork.FieldID)
		for _, f := range fields {
			if !fork.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fork.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.ForkURL(); ok {
		_spec.SetField(fork.FieldForkURL, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ForkOwner(); ok {
		_spec.SetField(fork.FieldForkOwner, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ForkName(); ok {
		_spec.SetField(fork.FieldForkName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.IsActive(); ok {
		_spec.SetField(fork.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.LastSync(); ok {
		_spec.SetField(fork.FieldLastSync, field.TypeTime, value)
	}
	if fuo.mutation.LastSyncCleared() {
		_spec.ClearField(fork.FieldLastSync, field.TypeTime)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fork.FieldUpdatedAt, field.TypeTime, value)
	}
	if fuo.mutation.OriginalRepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fork.OriginalRepoTable,
			Columns: []string{fork.OriginalRepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.OriginalRepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fork.OriginalRepoTable,
			Columns: []string{fork.OriginalRepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Fork{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fork.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
