// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/component"
	"github.com/denkhaus/agentforge/internal/database/ent/componentdependency"
)

// ComponentDependencyCreate is the builder for creating a ComponentDependency entity.
type ComponentDependencyCreate struct {
	config
	mutation *ComponentDependencyMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (cdc *ComponentDependencyCreate) SetType(c componentdependency.Type) *ComponentDependencyCreate {
	cdc.mutation.SetType(c)
	return cdc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cdc *ComponentDependencyCreate) SetNillableType(c *componentdependency.Type) *ComponentDependencyCreate {
	if c != nil {
		cdc.SetType(*c)
	}
	return cdc
}

// SetDependencyName sets the "dependency_name" field.
func (cdc *ComponentDependencyCreate) SetDependencyName(s string) *ComponentDependencyCreate {
	cdc.mutation.SetDependencyName(s)
	return cdc
}

// SetDependencyVersion sets the "dependency_version" field.
func (cdc *ComponentDependencyCreate) SetDependencyVersion(s string) *ComponentDependencyCreate {
	cdc.mutation.SetDependencyVersion(s)
	return cdc
}

// SetVersionRange sets the "version_range" field.
func (cdc *ComponentDependencyCreate) SetVersionRange(s string) *ComponentDependencyCreate {
	cdc.mutation.SetVersionRange(s)
	return cdc
}

// SetIsRequired sets the "is_required" field.
func (cdc *ComponentDependencyCreate) SetIsRequired(b bool) *ComponentDependencyCreate {
	cdc.mutation.SetIsRequired(b)
	return cdc
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (cdc *ComponentDependencyCreate) SetNillableIsRequired(b *bool) *ComponentDependencyCreate {
	if b != nil {
		cdc.SetIsRequired(*b)
	}
	return cdc
}

// SetCondition sets the "condition" field.
func (cdc *ComponentDependencyCreate) SetCondition(s string) *ComponentDependencyCreate {
	cdc.mutation.SetCondition(s)
	return cdc
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (cdc *ComponentDependencyCreate) SetNillableCondition(s *string) *ComponentDependencyCreate {
	if s != nil {
		cdc.SetCondition(*s)
	}
	return cdc
}

// SetCreatedAt sets the "created_at" field.
func (cdc *ComponentDependencyCreate) SetCreatedAt(t time.Time) *ComponentDependencyCreate {
	cdc.mutation.SetCreatedAt(t)
	return cdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cdc *ComponentDependencyCreate) SetNillableCreatedAt(t *time.Time) *ComponentDependencyCreate {
	if t != nil {
		cdc.SetCreatedAt(*t)
	}
	return cdc
}

// SetID sets the "id" field.
func (cdc *ComponentDependencyCreate) SetID(s string) *ComponentDependencyCreate {
	cdc.mutation.SetID(s)
	return cdc
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (cdc *ComponentDependencyCreate) SetComponentID(id string) *ComponentDependencyCreate {
	cdc.mutation.SetComponentID(id)
	return cdc
}

// SetComponent sets the "component" edge to the Component entity.
func (cdc *ComponentDependencyCreate) SetComponent(c *Component) *ComponentDependencyCreate {
	return cdc.SetComponentID(c.ID)
}

// Mutation returns the ComponentDependencyMutation object of the builder.
func (cdc *ComponentDependencyCreate) Mutation() *ComponentDependencyMutation {
	return cdc.mutation
}

// Save creates the ComponentDependency in the database.
func (cdc *ComponentDependencyCreate) Save(ctx context.Context) (*ComponentDependency, error) {
	cdc.defaults()
	return withHooks(ctx, cdc.sqlSave, cdc.mutation, cdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cdc *ComponentDependencyCreate) SaveX(ctx context.Context) *ComponentDependency {
	v, err := cdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdc *ComponentDependencyCreate) Exec(ctx context.Context) error {
	_, err := cdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdc *ComponentDependencyCreate) ExecX(ctx context.Context) {
	if err := cdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdc *ComponentDependencyCreate) defaults() {
	if _, ok := cdc.mutation.GetType(); !ok {
		v := componentdependency.DefaultType
		cdc.mutation.SetType(v)
	}
	if _, ok := cdc.mutation.IsRequired(); !ok {
		v := componentdependency.DefaultIsRequired
		cdc.mutation.SetIsRequired(v)
	}
	if _, ok := cdc.mutation.CreatedAt(); !ok {
		v := componentdependency.DefaultCreatedAt()
		cdc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdc *ComponentDependencyCreate) check() error {
	if _, ok := cdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ComponentDependency.type"`)}
	}
	if v, ok := cdc.mutation.GetType(); ok {
		if err := componentdependency.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ComponentDependency.type": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.DependencyName(); !ok {
		return &ValidationError{Name: "dependency_name", err: errors.New(`ent: missing required field "ComponentDependency.dependency_name"`)}
	}
	if _, ok := cdc.mutation.DependencyVersion(); !ok {
		return &ValidationError{Name: "dependency_version", err: errors.New(`ent: missing required field "ComponentDependency.dependency_version"`)}
	}
	if _, ok := cdc.mutation.VersionRange(); !ok {
		return &ValidationError{Name: "version_range", err: errors.New(`ent: missing required field "ComponentDependency.version_range"`)}
	}
	if _, ok := cdc.mutation.IsRequired(); !ok {
		return &ValidationError{Name: "is_required", err: errors.New(`ent: missing required field "ComponentDependency.is_required"`)}
	}
	if _, ok := cdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ComponentDependency.created_at"`)}
	}
	if len(cdc.mutation.ComponentIDs()) == 0 {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required edge "ComponentDependency.component"`)}
	}
	return nil
}

func (cdc *ComponentDependencyCreate) sqlSave(ctx context.Context) (*ComponentDependency, error) {
	if err := cdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ComponentDependency.ID type: %T", _spec.ID.Value)
		}
	}
	cdc.mutation.id = &_node.ID
	cdc.mutation.done = true
	return _node, nil
}

func (cdc *ComponentDependencyCreate) createSpec() (*ComponentDependency, *sqlgraph.CreateSpec) {
	var (
		_node = &ComponentDependency{config: cdc.config}
		_spec = sqlgraph.NewCreateSpec(componentdependency.Table, sqlgraph.NewFieldSpec(componentdependency.FieldID, field.TypeString))
	)
	if id, ok := cdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cdc.mutation.GetType(); ok {
		_spec.SetField(componentdependency.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cdc.mutation.DependencyName(); ok {
		_spec.SetField(componentdependency.FieldDependencyName, field.TypeString, value)
		_node.DependencyName = value
	}
	if value, ok := cdc.mutation.DependencyVersion(); ok {
		_spec.SetField(componentdependency.FieldDependencyVersion, field.TypeString, value)
		_node.DependencyVersion = value
	}
	if value, ok := cdc.mutation.VersionRange(); ok {
		_spec.SetField(componentdependency.FieldVersionRange, field.TypeString, value)
		_node.VersionRange = value
	}
	if value, ok := cdc.mutation.IsRequired(); ok {
		_spec.SetField(componentdependency.FieldIsRequired, field.TypeBool, value)
		_node.IsRequired = value
	}
	if value, ok := cdc.mutation.Condition(); ok {
		_spec.SetField(componentdependency.FieldCondition, field.TypeString, value)
		_node.Condition = &value
	}
	if value, ok := cdc.mutation.CreatedAt(); ok {
		_spec.SetField(componentdependency.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := cdc.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   componentdependency.ComponentTable,
			Columns: []string{componentdependency.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.component_dependencies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ComponentDependencyCreateBulk is the builder for creating many ComponentDependency entities in bulk.
type ComponentDependencyCreateBulk struct {
	config
	err      error
	builders []*ComponentDependencyCreate
}

// Save creates the ComponentDependency entities in the database.
func (cdcb *ComponentDependencyCreateBulk) Save(ctx context.Context) ([]*ComponentDependency, error) {
	if cdcb.err != nil {
		return nil, cdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cdcb.builders))
	nodes := make([]*ComponentDependency, len(cdcb.builders))
	mutators := make([]Mutator, len(cdcb.builders))
	for i := range cdcb.builders {
		func(i int, root context.Context) {
			builder := cdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComponentDependencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdcb *ComponentDependencyCreateBulk) SaveX(ctx context.Context) []*ComponentDependency {
	v, err := cdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdcb *ComponentDependencyCreateBulk) Exec(ctx context.Context) error {
	_, err := cdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdcb *ComponentDependencyCreateBulk) ExecX(ctx context.Context) {
	if err := cdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
