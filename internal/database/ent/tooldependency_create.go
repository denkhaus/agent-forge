// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/tool"
	"github.com/denkhaus/agentforge/internal/database/ent/tooldependency"
)

// ToolDependencyCreate is the builder for creating a ToolDependency entity.
type ToolDependencyCreate struct {
	config
	mutation *ToolDependencyMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (tdc *ToolDependencyCreate) SetType(t tooldependency.Type) *ToolDependencyCreate {
	tdc.mutation.SetType(t)
	return tdc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tdc *ToolDependencyCreate) SetNillableType(t *tooldependency.Type) *ToolDependencyCreate {
	if t != nil {
		tdc.SetType(*t)
	}
	return tdc
}

// SetDependencyName sets the "dependency_name" field.
func (tdc *ToolDependencyCreate) SetDependencyName(s string) *ToolDependencyCreate {
	tdc.mutation.SetDependencyName(s)
	return tdc
}

// SetDependencyVersion sets the "dependency_version" field.
func (tdc *ToolDependencyCreate) SetDependencyVersion(s string) *ToolDependencyCreate {
	tdc.mutation.SetDependencyVersion(s)
	return tdc
}

// SetVersionRange sets the "version_range" field.
func (tdc *ToolDependencyCreate) SetVersionRange(s string) *ToolDependencyCreate {
	tdc.mutation.SetVersionRange(s)
	return tdc
}

// SetIsRequired sets the "is_required" field.
func (tdc *ToolDependencyCreate) SetIsRequired(b bool) *ToolDependencyCreate {
	tdc.mutation.SetIsRequired(b)
	return tdc
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (tdc *ToolDependencyCreate) SetNillableIsRequired(b *bool) *ToolDependencyCreate {
	if b != nil {
		tdc.SetIsRequired(*b)
	}
	return tdc
}

// SetCondition sets the "condition" field.
func (tdc *ToolDependencyCreate) SetCondition(s string) *ToolDependencyCreate {
	tdc.mutation.SetCondition(s)
	return tdc
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (tdc *ToolDependencyCreate) SetNillableCondition(s *string) *ToolDependencyCreate {
	if s != nil {
		tdc.SetCondition(*s)
	}
	return tdc
}

// SetCreatedAt sets the "created_at" field.
func (tdc *ToolDependencyCreate) SetCreatedAt(t time.Time) *ToolDependencyCreate {
	tdc.mutation.SetCreatedAt(t)
	return tdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tdc *ToolDependencyCreate) SetNillableCreatedAt(t *time.Time) *ToolDependencyCreate {
	if t != nil {
		tdc.SetCreatedAt(*t)
	}
	return tdc
}

// SetID sets the "id" field.
func (tdc *ToolDependencyCreate) SetID(s string) *ToolDependencyCreate {
	tdc.mutation.SetID(s)
	return tdc
}

// SetToolID sets the "tool" edge to the Tool entity by ID.
func (tdc *ToolDependencyCreate) SetToolID(id string) *ToolDependencyCreate {
	tdc.mutation.SetToolID(id)
	return tdc
}

// SetTool sets the "tool" edge to the Tool entity.
func (tdc *ToolDependencyCreate) SetTool(t *Tool) *ToolDependencyCreate {
	return tdc.SetToolID(t.ID)
}

// Mutation returns the ToolDependencyMutation object of the builder.
func (tdc *ToolDependencyCreate) Mutation() *ToolDependencyMutation {
	return tdc.mutation
}

// Save creates the ToolDependency in the database.
func (tdc *ToolDependencyCreate) Save(ctx context.Context) (*ToolDependency, error) {
	tdc.defaults()
	return withHooks(ctx, tdc.sqlSave, tdc.mutation, tdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *ToolDependencyCreate) SaveX(ctx context.Context) *ToolDependency {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *ToolDependencyCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *ToolDependencyCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *ToolDependencyCreate) defaults() {
	if _, ok := tdc.mutation.GetType(); !ok {
		v := tooldependency.DefaultType
		tdc.mutation.SetType(v)
	}
	if _, ok := tdc.mutation.IsRequired(); !ok {
		v := tooldependency.DefaultIsRequired
		tdc.mutation.SetIsRequired(v)
	}
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		v := tooldependency.DefaultCreatedAt()
		tdc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *ToolDependencyCreate) check() error {
	if _, ok := tdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ToolDependency.type"`)}
	}
	if v, ok := tdc.mutation.GetType(); ok {
		if err := tooldependency.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ToolDependency.type": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.DependencyName(); !ok {
		return &ValidationError{Name: "dependency_name", err: errors.New(`ent: missing required field "ToolDependency.dependency_name"`)}
	}
	if _, ok := tdc.mutation.DependencyVersion(); !ok {
		return &ValidationError{Name: "dependency_version", err: errors.New(`ent: missing required field "ToolDependency.dependency_version"`)}
	}
	if _, ok := tdc.mutation.VersionRange(); !ok {
		return &ValidationError{Name: "version_range", err: errors.New(`ent: missing required field "ToolDependency.version_range"`)}
	}
	if _, ok := tdc.mutation.IsRequired(); !ok {
		return &ValidationError{Name: "is_required", err: errors.New(`ent: missing required field "ToolDependency.is_required"`)}
	}
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ToolDependency.created_at"`)}
	}
	if len(tdc.mutation.ToolIDs()) == 0 {
		return &ValidationError{Name: "tool", err: errors.New(`ent: missing required edge "ToolDependency.tool"`)}
	}
	return nil
}

func (tdc *ToolDependencyCreate) sqlSave(ctx context.Context) (*ToolDependency, error) {
	if err := tdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ToolDependency.ID type: %T", _spec.ID.Value)
		}
	}
	tdc.mutation.id = &_node.ID
	tdc.mutation.done = true
	return _node, nil
}

func (tdc *ToolDependencyCreate) createSpec() (*ToolDependency, *sqlgraph.CreateSpec) {
	var (
		_node = &ToolDependency{config: tdc.config}
		_spec = sqlgraph.NewCreateSpec(tooldependency.Table, sqlgraph.NewFieldSpec(tooldependency.FieldID, field.TypeString))
	)
	if id, ok := tdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tdc.mutation.GetType(); ok {
		_spec.SetField(tooldependency.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := tdc.mutation.DependencyName(); ok {
		_spec.SetField(tooldependency.FieldDependencyName, field.TypeString, value)
		_node.DependencyName = value
	}
	if value, ok := tdc.mutation.DependencyVersion(); ok {
		_spec.SetField(tooldependency.FieldDependencyVersion, field.TypeString, value)
		_node.DependencyVersion = value
	}
	if value, ok := tdc.mutation.VersionRange(); ok {
		_spec.SetField(tooldependency.FieldVersionRange, field.TypeString, value)
		_node.VersionRange = value
	}
	if value, ok := tdc.mutation.IsRequired(); ok {
		_spec.SetField(tooldependency.FieldIsRequired, field.TypeBool, value)
		_node.IsRequired = value
	}
	if value, ok := tdc.mutation.Condition(); ok {
		_spec.SetField(tooldependency.FieldCondition, field.TypeString, value)
		_node.Condition = &value
	}
	if value, ok := tdc.mutation.CreatedAt(); ok {
		_spec.SetField(tooldependency.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tdc.mutation.ToolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tooldependency.ToolTable,
			Columns: []string{tooldependency.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tool_dependencies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ToolDependencyCreateBulk is the builder for creating many ToolDependency entities in bulk.
type ToolDependencyCreateBulk struct {
	config
	err      error
	builders []*ToolDependencyCreate
}

// Save creates the ToolDependency entities in the database.
func (tdcb *ToolDependencyCreateBulk) Save(ctx context.Context) ([]*ToolDependency, error) {
	if tdcb.err != nil {
		return nil, tdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*ToolDependency, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ToolDependencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *ToolDependencyCreateBulk) SaveX(ctx context.Context) []*ToolDependency {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *ToolDependencyCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *ToolDependencyCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
