// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/agent"
	"github.com/denkhaus/agentforge/internal/database/ent/agentdependency"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
)

// AgentDependencyUpdate is the builder for updating AgentDependency entities.
type AgentDependencyUpdate struct {
	config
	hooks    []Hook
	mutation *AgentDependencyMutation
}

// Where appends a list predicates to the AgentDependencyUpdate builder.
func (adu *AgentDependencyUpdate) Where(ps ...predicate.AgentDependency) *AgentDependencyUpdate {
	adu.mutation.Where(ps...)
	return adu
}

// SetType sets the "type" field.
func (adu *AgentDependencyUpdate) SetType(a agentdependency.Type) *AgentDependencyUpdate {
	adu.mutation.SetType(a)
	return adu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (adu *AgentDependencyUpdate) SetNillableType(a *agentdependency.Type) *AgentDependencyUpdate {
	if a != nil {
		adu.SetType(*a)
	}
	return adu
}

// SetDependencyName sets the "dependency_name" field.
func (adu *AgentDependencyUpdate) SetDependencyName(s string) *AgentDependencyUpdate {
	adu.mutation.SetDependencyName(s)
	return adu
}

// SetNillableDependencyName sets the "dependency_name" field if the given value is not nil.
func (adu *AgentDependencyUpdate) SetNillableDependencyName(s *string) *AgentDependencyUpdate {
	if s != nil {
		adu.SetDependencyName(*s)
	}
	return adu
}

// SetDependencyVersion sets the "dependency_version" field.
func (adu *AgentDependencyUpdate) SetDependencyVersion(s string) *AgentDependencyUpdate {
	adu.mutation.SetDependencyVersion(s)
	return adu
}

// SetNillableDependencyVersion sets the "dependency_version" field if the given value is not nil.
func (adu *AgentDependencyUpdate) SetNillableDependencyVersion(s *string) *AgentDependencyUpdate {
	if s != nil {
		adu.SetDependencyVersion(*s)
	}
	return adu
}

// SetVersionRange sets the "version_range" field.
func (adu *AgentDependencyUpdate) SetVersionRange(s string) *AgentDependencyUpdate {
	adu.mutation.SetVersionRange(s)
	return adu
}

// SetNillableVersionRange sets the "version_range" field if the given value is not nil.
func (adu *AgentDependencyUpdate) SetNillableVersionRange(s *string) *AgentDependencyUpdate {
	if s != nil {
		adu.SetVersionRange(*s)
	}
	return adu
}

// SetIsRequired sets the "is_required" field.
func (adu *AgentDependencyUpdate) SetIsRequired(b bool) *AgentDependencyUpdate {
	adu.mutation.SetIsRequired(b)
	return adu
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (adu *AgentDependencyUpdate) SetNillableIsRequired(b *bool) *AgentDependencyUpdate {
	if b != nil {
		adu.SetIsRequired(*b)
	}
	return adu
}

// SetCondition sets the "condition" field.
func (adu *AgentDependencyUpdate) SetCondition(s string) *AgentDependencyUpdate {
	adu.mutation.SetCondition(s)
	return adu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (adu *AgentDependencyUpdate) SetNillableCondition(s *string) *AgentDependencyUpdate {
	if s != nil {
		adu.SetCondition(*s)
	}
	return adu
}

// ClearCondition clears the value of the "condition" field.
func (adu *AgentDependencyUpdate) ClearCondition() *AgentDependencyUpdate {
	adu.mutation.ClearCondition()
	return adu
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (adu *AgentDependencyUpdate) SetAgentID(id string) *AgentDependencyUpdate {
	adu.mutation.SetAgentID(id)
	return adu
}

// SetAgent sets the "agent" edge to the Agent entity.
func (adu *AgentDependencyUpdate) SetAgent(a *Agent) *AgentDependencyUpdate {
	return adu.SetAgentID(a.ID)
}

// Mutation returns the AgentDependencyMutation object of the builder.
func (adu *AgentDependencyUpdate) Mutation() *AgentDependencyMutation {
	return adu.mutation
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (adu *AgentDependencyUpdate) ClearAgent() *AgentDependencyUpdate {
	adu.mutation.ClearAgent()
	return adu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adu *AgentDependencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, adu.sqlSave, adu.mutation, adu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adu *AgentDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := adu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adu *AgentDependencyUpdate) Exec(ctx context.Context) error {
	_, err := adu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adu *AgentDependencyUpdate) ExecX(ctx context.Context) {
	if err := adu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adu *AgentDependencyUpdate) check() error {
	if v, ok := adu.mutation.GetType(); ok {
		if err := agentdependency.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AgentDependency.type": %w`, err)}
		}
	}
	if adu.mutation.AgentCleared() && len(adu.mutation.AgentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AgentDependency.agent"`)
	}
	return nil
}

func (adu *AgentDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := adu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(agentdependency.Table, agentdependency.Columns, sqlgraph.NewFieldSpec(agentdependency.FieldID, field.TypeString))
	if ps := adu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adu.mutation.GetType(); ok {
		_spec.SetField(agentdependency.FieldType, field.TypeEnum, value)
	}
	if value, ok := adu.mutation.DependencyName(); ok {
		_spec.SetField(agentdependency.FieldDependencyName, field.TypeString, value)
	}
	if value, ok := adu.mutation.DependencyVersion(); ok {
		_spec.SetField(agentdependency.FieldDependencyVersion, field.TypeString, value)
	}
	if value, ok := adu.mutation.VersionRange(); ok {
		_spec.SetField(agentdependency.FieldVersionRange, field.TypeString, value)
	}
	if value, ok := adu.mutation.IsRequired(); ok {
		_spec.SetField(agentdependency.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := adu.mutation.Condition(); ok {
		_spec.SetField(agentdependency.FieldCondition, field.TypeString, value)
	}
	if adu.mutation.ConditionCleared() {
		_spec.ClearField(agentdependency.FieldCondition, field.TypeString)
	}
	if adu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agentdependency.AgentTable,
			Columns: []string{agentdependency.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agentdependency.AgentTable,
			Columns: []string{agentdependency.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agentdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	adu.mutation.done = true
	return n, nil
}

// AgentDependencyUpdateOne is the builder for updating a single AgentDependency entity.
type AgentDependencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentDependencyMutation
}

// SetType sets the "type" field.
func (aduo *AgentDependencyUpdateOne) SetType(a agentdependency.Type) *AgentDependencyUpdateOne {
	aduo.mutation.SetType(a)
	return aduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aduo *AgentDependencyUpdateOne) SetNillableType(a *agentdependency.Type) *AgentDependencyUpdateOne {
	if a != nil {
		aduo.SetType(*a)
	}
	return aduo
}

// SetDependencyName sets the "dependency_name" field.
func (aduo *AgentDependencyUpdateOne) SetDependencyName(s string) *AgentDependencyUpdateOne {
	aduo.mutation.SetDependencyName(s)
	return aduo
}

// SetNillableDependencyName sets the "dependency_name" field if the given value is not nil.
func (aduo *AgentDependencyUpdateOne) SetNillableDependencyName(s *string) *AgentDependencyUpdateOne {
	if s != nil {
		aduo.SetDependencyName(*s)
	}
	return aduo
}

// SetDependencyVersion sets the "dependency_version" field.
func (aduo *AgentDependencyUpdateOne) SetDependencyVersion(s string) *AgentDependencyUpdateOne {
	aduo.mutation.SetDependencyVersion(s)
	return aduo
}

// SetNillableDependencyVersion sets the "dependency_version" field if the given value is not nil.
func (aduo *AgentDependencyUpdateOne) SetNillableDependencyVersion(s *string) *AgentDependencyUpdateOne {
	if s != nil {
		aduo.SetDependencyVersion(*s)
	}
	return aduo
}

// SetVersionRange sets the "version_range" field.
func (aduo *AgentDependencyUpdateOne) SetVersionRange(s string) *AgentDependencyUpdateOne {
	aduo.mutation.SetVersionRange(s)
	return aduo
}

// SetNillableVersionRange sets the "version_range" field if the given value is not nil.
func (aduo *AgentDependencyUpdateOne) SetNillableVersionRange(s *string) *AgentDependencyUpdateOne {
	if s != nil {
		aduo.SetVersionRange(*s)
	}
	return aduo
}

// SetIsRequired sets the "is_required" field.
func (aduo *AgentDependencyUpdateOne) SetIsRequired(b bool) *AgentDependencyUpdateOne {
	aduo.mutation.SetIsRequired(b)
	return aduo
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (aduo *AgentDependencyUpdateOne) SetNillableIsRequired(b *bool) *AgentDependencyUpdateOne {
	if b != nil {
		aduo.SetIsRequired(*b)
	}
	return aduo
}

// SetCondition sets the "condition" field.
func (aduo *AgentDependencyUpdateOne) SetCondition(s string) *AgentDependencyUpdateOne {
	aduo.mutation.SetCondition(s)
	return aduo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (aduo *AgentDependencyUpdateOne) SetNillableCondition(s *string) *AgentDependencyUpdateOne {
	if s != nil {
		aduo.SetCondition(*s)
	}
	return aduo
}

// ClearCondition clears the value of the "condition" field.
func (aduo *AgentDependencyUpdateOne) ClearCondition() *AgentDependencyUpdateOne {
	aduo.mutation.ClearCondition()
	return aduo
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (aduo *AgentDependencyUpdateOne) SetAgentID(id string) *AgentDependencyUpdateOne {
	aduo.mutation.SetAgentID(id)
	return aduo
}

// SetAgent sets the "agent" edge to the Agent entity.
func (aduo *AgentDependencyUpdateOne) SetAgent(a *Agent) *AgentDependencyUpdateOne {
	return aduo.SetAgentID(a.ID)
}

// Mutation returns the AgentDependencyMutation object of the builder.
func (aduo *AgentDependencyUpdateOne) Mutation() *AgentDependencyMutation {
	return aduo.mutation
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (aduo *AgentDependencyUpdateOne) ClearAgent() *AgentDependencyUpdateOne {
	aduo.mutation.ClearAgent()
	return aduo
}

// Where appends a list predicates to the AgentDependencyUpdate builder.
func (aduo *AgentDependencyUpdateOne) Where(ps ...predicate.AgentDependency) *AgentDependencyUpdateOne {
	aduo.mutation.Where(ps...)
	return aduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aduo *AgentDependencyUpdateOne) Select(field string, fields ...string) *AgentDependencyUpdateOne {
	aduo.fields = append([]string{field}, fields...)
	return aduo
}

// Save executes the query and returns the updated AgentDependency entity.
func (aduo *AgentDependencyUpdateOne) Save(ctx context.Context) (*AgentDependency, error) {
	return withHooks(ctx, aduo.sqlSave, aduo.mutation, aduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aduo *AgentDependencyUpdateOne) SaveX(ctx context.Context) *AgentDependency {
	node, err := aduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aduo *AgentDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := aduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aduo *AgentDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := aduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aduo *AgentDependencyUpdateOne) check() error {
	if v, ok := aduo.mutation.GetType(); ok {
		if err := agentdependency.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AgentDependency.type": %w`, err)}
		}
	}
	if aduo.mutation.AgentCleared() && len(aduo.mutation.AgentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AgentDependency.agent"`)
	}
	return nil
}

func (aduo *AgentDependencyUpdateOne) sqlSave(ctx context.Context) (_node *AgentDependency, err error) {
	if err := aduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agentdependency.Table, agentdependency.Columns, sqlgraph.NewFieldSpec(agentdependency.FieldID, field.TypeString))
	id, ok := aduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AgentDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agentdependency.FieldID)
		for _, f := range fields {
			if !agentdependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agentdependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aduo.mutation.GetType(); ok {
		_spec.SetField(agentdependency.FieldType, field.TypeEnum, value)
	}
	if value, ok := aduo.mutation.DependencyName(); ok {
		_spec.SetField(agentdependency.FieldDependencyName, field.TypeString, value)
	}
	if value, ok := aduo.mutation.DependencyVersion(); ok {
		_spec.SetField(agentdependency.FieldDependencyVersion, field.TypeString, value)
	}
	if value, ok := aduo.mutation.VersionRange(); ok {
		_spec.SetField(agentdependency.FieldVersionRange, field.TypeString, value)
	}
	if value, ok := aduo.mutation.IsRequired(); ok {
		_spec.SetField(agentdependency.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := aduo.mutation.Condition(); ok {
		_spec.SetField(agentdependency.FieldCondition, field.TypeString, value)
	}
	if aduo.mutation.ConditionCleared() {
		_spec.ClearField(agentdependency.FieldCondition, field.TypeString)
	}
	if aduo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agentdependency.AgentTable,
			Columns: []string{agentdependency.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agentdependency.AgentTable,
			Columns: []string{agentdependency.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AgentDependency{config: aduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agentdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aduo.mutation.done = true
	return _node, nil
}
