// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/prompt"
	"github.com/denkhaus/agentforge/internal/database/ent/promptdependency"
)

// PromptDependencyCreate is the builder for creating a PromptDependency entity.
type PromptDependencyCreate struct {
	config
	mutation *PromptDependencyMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (pdc *PromptDependencyCreate) SetType(pr promptdependency.Type) *PromptDependencyCreate {
	pdc.mutation.SetType(pr)
	return pdc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pdc *PromptDependencyCreate) SetNillableType(pr *promptdependency.Type) *PromptDependencyCreate {
	if pr != nil {
		pdc.SetType(*pr)
	}
	return pdc
}

// SetDependencyName sets the "dependency_name" field.
func (pdc *PromptDependencyCreate) SetDependencyName(s string) *PromptDependencyCreate {
	pdc.mutation.SetDependencyName(s)
	return pdc
}

// SetDependencyVersion sets the "dependency_version" field.
func (pdc *PromptDependencyCreate) SetDependencyVersion(s string) *PromptDependencyCreate {
	pdc.mutation.SetDependencyVersion(s)
	return pdc
}

// SetVersionRange sets the "version_range" field.
func (pdc *PromptDependencyCreate) SetVersionRange(s string) *PromptDependencyCreate {
	pdc.mutation.SetVersionRange(s)
	return pdc
}

// SetIsRequired sets the "is_required" field.
func (pdc *PromptDependencyCreate) SetIsRequired(b bool) *PromptDependencyCreate {
	pdc.mutation.SetIsRequired(b)
	return pdc
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (pdc *PromptDependencyCreate) SetNillableIsRequired(b *bool) *PromptDependencyCreate {
	if b != nil {
		pdc.SetIsRequired(*b)
	}
	return pdc
}

// SetCondition sets the "condition" field.
func (pdc *PromptDependencyCreate) SetCondition(s string) *PromptDependencyCreate {
	pdc.mutation.SetCondition(s)
	return pdc
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (pdc *PromptDependencyCreate) SetNillableCondition(s *string) *PromptDependencyCreate {
	if s != nil {
		pdc.SetCondition(*s)
	}
	return pdc
}

// SetCreatedAt sets the "created_at" field.
func (pdc *PromptDependencyCreate) SetCreatedAt(t time.Time) *PromptDependencyCreate {
	pdc.mutation.SetCreatedAt(t)
	return pdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdc *PromptDependencyCreate) SetNillableCreatedAt(t *time.Time) *PromptDependencyCreate {
	if t != nil {
		pdc.SetCreatedAt(*t)
	}
	return pdc
}

// SetID sets the "id" field.
func (pdc *PromptDependencyCreate) SetID(s string) *PromptDependencyCreate {
	pdc.mutation.SetID(s)
	return pdc
}

// SetPromptID sets the "prompt" edge to the Prompt entity by ID.
func (pdc *PromptDependencyCreate) SetPromptID(id string) *PromptDependencyCreate {
	pdc.mutation.SetPromptID(id)
	return pdc
}

// SetPrompt sets the "prompt" edge to the Prompt entity.
func (pdc *PromptDependencyCreate) SetPrompt(p *Prompt) *PromptDependencyCreate {
	return pdc.SetPromptID(p.ID)
}

// Mutation returns the PromptDependencyMutation object of the builder.
func (pdc *PromptDependencyCreate) Mutation() *PromptDependencyMutation {
	return pdc.mutation
}

// Save creates the PromptDependency in the database.
func (pdc *PromptDependencyCreate) Save(ctx context.Context) (*PromptDependency, error) {
	pdc.defaults()
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *PromptDependencyCreate) SaveX(ctx context.Context) *PromptDependency {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *PromptDependencyCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *PromptDependencyCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *PromptDependencyCreate) defaults() {
	if _, ok := pdc.mutation.GetType(); !ok {
		v := promptdependency.DefaultType
		pdc.mutation.SetType(v)
	}
	if _, ok := pdc.mutation.IsRequired(); !ok {
		v := promptdependency.DefaultIsRequired
		pdc.mutation.SetIsRequired(v)
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		v := promptdependency.DefaultCreatedAt()
		pdc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *PromptDependencyCreate) check() error {
	if _, ok := pdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PromptDependency.type"`)}
	}
	if v, ok := pdc.mutation.GetType(); ok {
		if err := promptdependency.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PromptDependency.type": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.DependencyName(); !ok {
		return &ValidationError{Name: "dependency_name", err: errors.New(`ent: missing required field "PromptDependency.dependency_name"`)}
	}
	if _, ok := pdc.mutation.DependencyVersion(); !ok {
		return &ValidationError{Name: "dependency_version", err: errors.New(`ent: missing required field "PromptDependency.dependency_version"`)}
	}
	if _, ok := pdc.mutation.VersionRange(); !ok {
		return &ValidationError{Name: "version_range", err: errors.New(`ent: missing required field "PromptDependency.version_range"`)}
	}
	if _, ok := pdc.mutation.IsRequired(); !ok {
		return &ValidationError{Name: "is_required", err: errors.New(`ent: missing required field "PromptDependency.is_required"`)}
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromptDependency.created_at"`)}
	}
	if len(pdc.mutation.PromptIDs()) == 0 {
		return &ValidationError{Name: "prompt", err: errors.New(`ent: missing required edge "PromptDependency.prompt"`)}
	}
	return nil
}

func (pdc *PromptDependencyCreate) sqlSave(ctx context.Context) (*PromptDependency, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PromptDependency.ID type: %T", _spec.ID.Value)
		}
	}
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *PromptDependencyCreate) createSpec() (*PromptDependency, *sqlgraph.CreateSpec) {
	var (
		_node = &PromptDependency{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(promptdependency.Table, sqlgraph.NewFieldSpec(promptdependency.FieldID, field.TypeString))
	)
	if id, ok := pdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pdc.mutation.GetType(); ok {
		_spec.SetField(promptdependency.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pdc.mutation.DependencyName(); ok {
		_spec.SetField(promptdependency.FieldDependencyName, field.TypeString, value)
		_node.DependencyName = value
	}
	if value, ok := pdc.mutation.DependencyVersion(); ok {
		_spec.SetField(promptdependency.FieldDependencyVersion, field.TypeString, value)
		_node.DependencyVersion = value
	}
	if value, ok := pdc.mutation.VersionRange(); ok {
		_spec.SetField(promptdependency.FieldVersionRange, field.TypeString, value)
		_node.VersionRange = value
	}
	if value, ok := pdc.mutation.IsRequired(); ok {
		_spec.SetField(promptdependency.FieldIsRequired, field.TypeBool, value)
		_node.IsRequired = value
	}
	if value, ok := pdc.mutation.Condition(); ok {
		_spec.SetField(promptdependency.FieldCondition, field.TypeString, value)
		_node.Condition = &value
	}
	if value, ok := pdc.mutation.CreatedAt(); ok {
		_spec.SetField(promptdependency.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := pdc.mutation.PromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptdependency.PromptTable,
			Columns: []string{promptdependency.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.prompt_dependencies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PromptDependencyCreateBulk is the builder for creating many PromptDependency entities in bulk.
type PromptDependencyCreateBulk struct {
	config
	err      error
	builders []*PromptDependencyCreate
}

// Save creates the PromptDependency entities in the database.
func (pdcb *PromptDependencyCreateBulk) Save(ctx context.Context) ([]*PromptDependency, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*PromptDependency, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromptDependencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *PromptDependencyCreateBulk) SaveX(ctx context.Context) []*PromptDependency {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *PromptDependencyCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *PromptDependencyCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
