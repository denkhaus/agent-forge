// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
	"github.com/denkhaus/agentforge/internal/database/ent/tool"
	"github.com/denkhaus/agentforge/internal/database/ent/tooldependency"
)

// ToolCreate is the builder for creating a Tool entity.
type ToolCreate struct {
	config
	mutation *ToolMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tc *ToolCreate) SetName(s string) *ToolCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNamespace sets the "namespace" field.
func (tc *ToolCreate) SetNamespace(s string) *ToolCreate {
	tc.mutation.SetNamespace(s)
	return tc
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (tc *ToolCreate) SetNillableNamespace(s *string) *ToolCreate {
	if s != nil {
		tc.SetNamespace(*s)
	}
	return tc
}

// SetVersion sets the "version" field.
func (tc *ToolCreate) SetVersion(s string) *ToolCreate {
	tc.mutation.SetVersion(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *ToolCreate) SetDescription(s string) *ToolCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetAuthor sets the "author" field.
func (tc *ToolCreate) SetAuthor(s string) *ToolCreate {
	tc.mutation.SetAuthor(s)
	return tc
}

// SetLicense sets the "license" field.
func (tc *ToolCreate) SetLicense(s string) *ToolCreate {
	tc.mutation.SetLicense(s)
	return tc
}

// SetHomepage sets the "homepage" field.
func (tc *ToolCreate) SetHomepage(s string) *ToolCreate {
	tc.mutation.SetHomepage(s)
	return tc
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (tc *ToolCreate) SetNillableHomepage(s *string) *ToolCreate {
	if s != nil {
		tc.SetHomepage(*s)
	}
	return tc
}

// SetDocumentation sets the "documentation" field.
func (tc *ToolCreate) SetDocumentation(s string) *ToolCreate {
	tc.mutation.SetDocumentation(s)
	return tc
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (tc *ToolCreate) SetNillableDocumentation(s *string) *ToolCreate {
	if s != nil {
		tc.SetDocumentation(*s)
	}
	return tc
}

// SetTags sets the "tags" field.
func (tc *ToolCreate) SetTags(s []string) *ToolCreate {
	tc.mutation.SetTags(s)
	return tc
}

// SetCategories sets the "categories" field.
func (tc *ToolCreate) SetCategories(s []string) *ToolCreate {
	tc.mutation.SetCategories(s)
	return tc
}

// SetKeywords sets the "keywords" field.
func (tc *ToolCreate) SetKeywords(s []string) *ToolCreate {
	tc.mutation.SetKeywords(s)
	return tc
}

// SetStability sets the "stability" field.
func (tc *ToolCreate) SetStability(t tool.Stability) *ToolCreate {
	tc.mutation.SetStability(t)
	return tc
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (tc *ToolCreate) SetNillableStability(t *tool.Stability) *ToolCreate {
	if t != nil {
		tc.SetStability(*t)
	}
	return tc
}

// SetMaturity sets the "maturity" field.
func (tc *ToolCreate) SetMaturity(t tool.Maturity) *ToolCreate {
	tc.mutation.SetMaturity(t)
	return tc
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (tc *ToolCreate) SetNillableMaturity(t *tool.Maturity) *ToolCreate {
	if t != nil {
		tc.SetMaturity(*t)
	}
	return tc
}

// SetForgeVersion sets the "forge_version" field.
func (tc *ToolCreate) SetForgeVersion(s string) *ToolCreate {
	tc.mutation.SetForgeVersion(s)
	return tc
}

// SetPlatforms sets the "platforms" field.
func (tc *ToolCreate) SetPlatforms(s []string) *ToolCreate {
	tc.mutation.SetPlatforms(s)
	return tc
}

// SetSpec sets the "spec" field.
func (tc *ToolCreate) SetSpec(s string) *ToolCreate {
	tc.mutation.SetSpec(s)
	return tc
}

// SetSpecHash sets the "spec_hash" field.
func (tc *ToolCreate) SetSpecHash(s string) *ToolCreate {
	tc.mutation.SetSpecHash(s)
	return tc
}

// SetIsInstalled sets the "is_installed" field.
func (tc *ToolCreate) SetIsInstalled(b bool) *ToolCreate {
	tc.mutation.SetIsInstalled(b)
	return tc
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (tc *ToolCreate) SetNillableIsInstalled(b *bool) *ToolCreate {
	if b != nil {
		tc.SetIsInstalled(*b)
	}
	return tc
}

// SetInstallPath sets the "install_path" field.
func (tc *ToolCreate) SetInstallPath(s string) *ToolCreate {
	tc.mutation.SetInstallPath(s)
	return tc
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (tc *ToolCreate) SetNillableInstallPath(s *string) *ToolCreate {
	if s != nil {
		tc.SetInstallPath(*s)
	}
	return tc
}

// SetInstalledAt sets the "installed_at" field.
func (tc *ToolCreate) SetInstalledAt(t time.Time) *ToolCreate {
	tc.mutation.SetInstalledAt(t)
	return tc
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (tc *ToolCreate) SetNillableInstalledAt(t *time.Time) *ToolCreate {
	if t != nil {
		tc.SetInstalledAt(*t)
	}
	return tc
}

// SetCommitHash sets the "commit_hash" field.
func (tc *ToolCreate) SetCommitHash(s string) *ToolCreate {
	tc.mutation.SetCommitHash(s)
	return tc
}

// SetBranch sets the "branch" field.
func (tc *ToolCreate) SetBranch(s string) *ToolCreate {
	tc.mutation.SetBranch(s)
	return tc
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (tc *ToolCreate) SetNillableBranch(s *string) *ToolCreate {
	if s != nil {
		tc.SetBranch(*s)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *ToolCreate) SetCreatedAt(t time.Time) *ToolCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *ToolCreate) SetNillableCreatedAt(t *time.Time) *ToolCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *ToolCreate) SetUpdatedAt(t time.Time) *ToolCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *ToolCreate) SetNillableUpdatedAt(t *time.Time) *ToolCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetExecutionType sets the "execution_type" field.
func (tc *ToolCreate) SetExecutionType(tt tool.ExecutionType) *ToolCreate {
	tc.mutation.SetExecutionType(tt)
	return tc
}

// SetNillableExecutionType sets the "execution_type" field if the given value is not nil.
func (tc *ToolCreate) SetNillableExecutionType(tt *tool.ExecutionType) *ToolCreate {
	if tt != nil {
		tc.SetExecutionType(*tt)
	}
	return tc
}

// SetSchemaPath sets the "schema_path" field.
func (tc *ToolCreate) SetSchemaPath(s string) *ToolCreate {
	tc.mutation.SetSchemaPath(s)
	return tc
}

// SetNillableSchemaPath sets the "schema_path" field if the given value is not nil.
func (tc *ToolCreate) SetNillableSchemaPath(s *string) *ToolCreate {
	if s != nil {
		tc.SetSchemaPath(*s)
	}
	return tc
}

// SetServerConfig sets the "server_config" field.
func (tc *ToolCreate) SetServerConfig(m map[string]interface{}) *ToolCreate {
	tc.mutation.SetServerConfig(m)
	return tc
}

// SetCapabilities sets the "capabilities" field.
func (tc *ToolCreate) SetCapabilities(s []string) *ToolCreate {
	tc.mutation.SetCapabilities(s)
	return tc
}

// SetEntryPoint sets the "entry_point" field.
func (tc *ToolCreate) SetEntryPoint(s string) *ToolCreate {
	tc.mutation.SetEntryPoint(s)
	return tc
}

// SetNillableEntryPoint sets the "entry_point" field if the given value is not nil.
func (tc *ToolCreate) SetNillableEntryPoint(s *string) *ToolCreate {
	if s != nil {
		tc.SetEntryPoint(*s)
	}
	return tc
}

// SetEnvironmentVariables sets the "environment_variables" field.
func (tc *ToolCreate) SetEnvironmentVariables(m map[string]string) *ToolCreate {
	tc.mutation.SetEnvironmentVariables(m)
	return tc
}

// SetRequiredPermissions sets the "required_permissions" field.
func (tc *ToolCreate) SetRequiredPermissions(s []string) *ToolCreate {
	tc.mutation.SetRequiredPermissions(s)
	return tc
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (tc *ToolCreate) SetTimeoutSeconds(i int) *ToolCreate {
	tc.mutation.SetTimeoutSeconds(i)
	return tc
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (tc *ToolCreate) SetNillableTimeoutSeconds(i *int) *ToolCreate {
	if i != nil {
		tc.SetTimeoutSeconds(*i)
	}
	return tc
}

// SetSupportsStreaming sets the "supports_streaming" field.
func (tc *ToolCreate) SetSupportsStreaming(b bool) *ToolCreate {
	tc.mutation.SetSupportsStreaming(b)
	return tc
}

// SetNillableSupportsStreaming sets the "supports_streaming" field if the given value is not nil.
func (tc *ToolCreate) SetNillableSupportsStreaming(b *bool) *ToolCreate {
	if b != nil {
		tc.SetSupportsStreaming(*b)
	}
	return tc
}

// SetInputSchema sets the "input_schema" field.
func (tc *ToolCreate) SetInputSchema(m map[string]interface{}) *ToolCreate {
	tc.mutation.SetInputSchema(m)
	return tc
}

// SetOutputSchema sets the "output_schema" field.
func (tc *ToolCreate) SetOutputSchema(m map[string]interface{}) *ToolCreate {
	tc.mutation.SetOutputSchema(m)
	return tc
}

// SetID sets the "id" field.
func (tc *ToolCreate) SetID(s string) *ToolCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (tc *ToolCreate) SetRepositoryID(id string) *ToolCreate {
	tc.mutation.SetRepositoryID(id)
	return tc
}

// SetRepository sets the "repository" edge to the Repository entity.
func (tc *ToolCreate) SetRepository(r *Repository) *ToolCreate {
	return tc.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the ToolDependency entity by IDs.
func (tc *ToolCreate) AddDependencyIDs(ids ...string) *ToolCreate {
	tc.mutation.AddDependencyIDs(ids...)
	return tc
}

// AddDependencies adds the "dependencies" edges to the ToolDependency entity.
func (tc *ToolCreate) AddDependencies(t ...*ToolDependency) *ToolCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddDependencyIDs(ids...)
}

// Mutation returns the ToolMutation object of the builder.
func (tc *ToolCreate) Mutation() *ToolMutation {
	return tc.mutation
}

// Save creates the Tool in the database.
func (tc *ToolCreate) Save(ctx context.Context) (*Tool, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *ToolCreate) SaveX(ctx context.Context) *Tool {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *ToolCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *ToolCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *ToolCreate) defaults() {
	if _, ok := tc.mutation.Namespace(); !ok {
		v := tool.DefaultNamespace
		tc.mutation.SetNamespace(v)
	}
	if _, ok := tc.mutation.Stability(); !ok {
		v := tool.DefaultStability
		tc.mutation.SetStability(v)
	}
	if _, ok := tc.mutation.Maturity(); !ok {
		v := tool.DefaultMaturity
		tc.mutation.SetMaturity(v)
	}
	if _, ok := tc.mutation.IsInstalled(); !ok {
		v := tool.DefaultIsInstalled
		tc.mutation.SetIsInstalled(v)
	}
	if _, ok := tc.mutation.Branch(); !ok {
		v := tool.DefaultBranch
		tc.mutation.SetBranch(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tool.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := tool.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ExecutionType(); !ok {
		v := tool.DefaultExecutionType
		tc.mutation.SetExecutionType(v)
	}
	if _, ok := tc.mutation.TimeoutSeconds(); !ok {
		v := tool.DefaultTimeoutSeconds
		tc.mutation.SetTimeoutSeconds(v)
	}
	if _, ok := tc.mutation.SupportsStreaming(); !ok {
		v := tool.DefaultSupportsStreaming
		tc.mutation.SetSupportsStreaming(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *ToolCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Tool.name"`)}
	}
	if _, ok := tc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "Tool.namespace"`)}
	}
	if _, ok := tc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Tool.version"`)}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Tool.description"`)}
	}
	if _, ok := tc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Tool.author"`)}
	}
	if _, ok := tc.mutation.License(); !ok {
		return &ValidationError{Name: "license", err: errors.New(`ent: missing required field "Tool.license"`)}
	}
	if _, ok := tc.mutation.Stability(); !ok {
		return &ValidationError{Name: "stability", err: errors.New(`ent: missing required field "Tool.stability"`)}
	}
	if v, ok := tc.mutation.Stability(); ok {
		if err := tool.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Tool.stability": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Maturity(); !ok {
		return &ValidationError{Name: "maturity", err: errors.New(`ent: missing required field "Tool.maturity"`)}
	}
	if v, ok := tc.mutation.Maturity(); ok {
		if err := tool.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Tool.maturity": %w`, err)}
		}
	}
	if _, ok := tc.mutation.ForgeVersion(); !ok {
		return &ValidationError{Name: "forge_version", err: errors.New(`ent: missing required field "Tool.forge_version"`)}
	}
	if _, ok := tc.mutation.Spec(); !ok {
		return &ValidationError{Name: "spec", err: errors.New(`ent: missing required field "Tool.spec"`)}
	}
	if _, ok := tc.mutation.SpecHash(); !ok {
		return &ValidationError{Name: "spec_hash", err: errors.New(`ent: missing required field "Tool.spec_hash"`)}
	}
	if _, ok := tc.mutation.IsInstalled(); !ok {
		return &ValidationError{Name: "is_installed", err: errors.New(`ent: missing required field "Tool.is_installed"`)}
	}
	if _, ok := tc.mutation.CommitHash(); !ok {
		return &ValidationError{Name: "commit_hash", err: errors.New(`ent: missing required field "Tool.commit_hash"`)}
	}
	if _, ok := tc.mutation.Branch(); !ok {
		return &ValidationError{Name: "branch", err: errors.New(`ent: missing required field "Tool.branch"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Tool.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Tool.updated_at"`)}
	}
	if _, ok := tc.mutation.ExecutionType(); !ok {
		return &ValidationError{Name: "execution_type", err: errors.New(`ent: missing required field "Tool.execution_type"`)}
	}
	if v, ok := tc.mutation.ExecutionType(); ok {
		if err := tool.ExecutionTypeValidator(v); err != nil {
			return &ValidationError{Name: "execution_type", err: fmt.Errorf(`ent: validator failed for field "Tool.execution_type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TimeoutSeconds(); !ok {
		return &ValidationError{Name: "timeout_seconds", err: errors.New(`ent: missing required field "Tool.timeout_seconds"`)}
	}
	if _, ok := tc.mutation.SupportsStreaming(); !ok {
		return &ValidationError{Name: "supports_streaming", err: errors.New(`ent: missing required field "Tool.supports_streaming"`)}
	}
	if len(tc.mutation.RepositoryIDs()) == 0 {
		return &ValidationError{Name: "repository", err: errors.New(`ent: missing required edge "Tool.repository"`)}
	}
	return nil
}

func (tc *ToolCreate) sqlSave(ctx context.Context) (*Tool, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Tool.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *ToolCreate) createSpec() (*Tool, *sqlgraph.CreateSpec) {
	var (
		_node = &Tool{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tool.Table, sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(tool.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Namespace(); ok {
		_spec.SetField(tool.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := tc.mutation.Version(); ok {
		_spec.SetField(tool.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(tool.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Author(); ok {
		_spec.SetField(tool.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := tc.mutation.License(); ok {
		_spec.SetField(tool.FieldLicense, field.TypeString, value)
		_node.License = value
	}
	if value, ok := tc.mutation.Homepage(); ok {
		_spec.SetField(tool.FieldHomepage, field.TypeString, value)
		_node.Homepage = &value
	}
	if value, ok := tc.mutation.Documentation(); ok {
		_spec.SetField(tool.FieldDocumentation, field.TypeString, value)
		_node.Documentation = &value
	}
	if value, ok := tc.mutation.Tags(); ok {
		_spec.SetField(tool.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := tc.mutation.Categories(); ok {
		_spec.SetField(tool.FieldCategories, field.TypeJSON, value)
		_node.Categories = value
	}
	if value, ok := tc.mutation.Keywords(); ok {
		_spec.SetField(tool.FieldKeywords, field.TypeJSON, value)
		_node.Keywords = value
	}
	if value, ok := tc.mutation.Stability(); ok {
		_spec.SetField(tool.FieldStability, field.TypeEnum, value)
		_node.Stability = value
	}
	if value, ok := tc.mutation.Maturity(); ok {
		_spec.SetField(tool.FieldMaturity, field.TypeEnum, value)
		_node.Maturity = value
	}
	if value, ok := tc.mutation.ForgeVersion(); ok {
		_spec.SetField(tool.FieldForgeVersion, field.TypeString, value)
		_node.ForgeVersion = value
	}
	if value, ok := tc.mutation.Platforms(); ok {
		_spec.SetField(tool.FieldPlatforms, field.TypeJSON, value)
		_node.Platforms = value
	}
	if value, ok := tc.mutation.Spec(); ok {
		_spec.SetField(tool.FieldSpec, field.TypeString, value)
		_node.Spec = value
	}
	if value, ok := tc.mutation.SpecHash(); ok {
		_spec.SetField(tool.FieldSpecHash, field.TypeString, value)
		_node.SpecHash = value
	}
	if value, ok := tc.mutation.IsInstalled(); ok {
		_spec.SetField(tool.FieldIsInstalled, field.TypeBool, value)
		_node.IsInstalled = value
	}
	if value, ok := tc.mutation.InstallPath(); ok {
		_spec.SetField(tool.FieldInstallPath, field.TypeString, value)
		_node.InstallPath = &value
	}
	if value, ok := tc.mutation.InstalledAt(); ok {
		_spec.SetField(tool.FieldInstalledAt, field.TypeTime, value)
		_node.InstalledAt = &value
	}
	if value, ok := tc.mutation.CommitHash(); ok {
		_spec.SetField(tool.FieldCommitHash, field.TypeString, value)
		_node.CommitHash = value
	}
	if value, ok := tc.mutation.Branch(); ok {
		_spec.SetField(tool.FieldBranch, field.TypeString, value)
		_node.Branch = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tool.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tool.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.ExecutionType(); ok {
		_spec.SetField(tool.FieldExecutionType, field.TypeEnum, value)
		_node.ExecutionType = value
	}
	if value, ok := tc.mutation.SchemaPath(); ok {
		_spec.SetField(tool.FieldSchemaPath, field.TypeString, value)
		_node.SchemaPath = &value
	}
	if value, ok := tc.mutation.ServerConfig(); ok {
		_spec.SetField(tool.FieldServerConfig, field.TypeJSON, value)
		_node.ServerConfig = value
	}
	if value, ok := tc.mutation.Capabilities(); ok {
		_spec.SetField(tool.FieldCapabilities, field.TypeJSON, value)
		_node.Capabilities = value
	}
	if value, ok := tc.mutation.EntryPoint(); ok {
		_spec.SetField(tool.FieldEntryPoint, field.TypeString, value)
		_node.EntryPoint = &value
	}
	if value, ok := tc.mutation.EnvironmentVariables(); ok {
		_spec.SetField(tool.FieldEnvironmentVariables, field.TypeJSON, value)
		_node.EnvironmentVariables = value
	}
	if value, ok := tc.mutation.RequiredPermissions(); ok {
		_spec.SetField(tool.FieldRequiredPermissions, field.TypeJSON, value)
		_node.RequiredPermissions = value
	}
	if value, ok := tc.mutation.TimeoutSeconds(); ok {
		_spec.SetField(tool.FieldTimeoutSeconds, field.TypeInt, value)
		_node.TimeoutSeconds = value
	}
	if value, ok := tc.mutation.SupportsStreaming(); ok {
		_spec.SetField(tool.FieldSupportsStreaming, field.TypeBool, value)
		_node.SupportsStreaming = value
	}
	if value, ok := tc.mutation.InputSchema(); ok {
		_spec.SetField(tool.FieldInputSchema, field.TypeJSON, value)
		_node.InputSchema = value
	}
	if value, ok := tc.mutation.OutputSchema(); ok {
		_spec.SetField(tool.FieldOutputSchema, field.TypeJSON, value)
		_node.OutputSchema = value
	}
	if nodes := tc.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tool.RepositoryTable,
			Columns: []string{tool.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_tools = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.DependenciesTable,
			Columns: []string{tool.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tooldependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ToolCreateBulk is the builder for creating many Tool entities in bulk.
type ToolCreateBulk struct {
	config
	err      error
	builders []*ToolCreate
}

// Save creates the Tool entities in the database.
func (tcb *ToolCreateBulk) Save(ctx context.Context) ([]*Tool, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tool, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ToolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *ToolCreateBulk) SaveX(ctx context.Context) []*Tool {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *ToolCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *ToolCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
