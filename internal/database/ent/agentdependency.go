// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/denkhaus/agentforge/internal/database/ent/agent"
	"github.com/denkhaus/agentforge/internal/database/ent/agentdependency"
)

// AgentDependency is the model entity for the AgentDependency schema.
type AgentDependency struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type agentdependency.Type `json:"type,omitempty"`
	// DependencyName holds the value of the "dependency_name" field.
	DependencyName string `json:"dependency_name,omitempty"`
	// DependencyVersion holds the value of the "dependency_version" field.
	DependencyVersion string `json:"dependency_version,omitempty"`
	// VersionRange holds the value of the "version_range" field.
	VersionRange string `json:"version_range,omitempty"`
	// IsRequired holds the value of the "is_required" field.
	IsRequired bool `json:"is_required,omitempty"`
	// Condition holds the value of the "condition" field.
	Condition *string `json:"condition,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AgentDependencyQuery when eager-loading is set.
	Edges              AgentDependencyEdges `json:"edges"`
	agent_dependencies *string
	selectValues       sql.SelectValues
}

// AgentDependencyEdges holds the relations/edges for other nodes in the graph.
type AgentDependencyEdges struct {
	// Agent holds the value of the agent edge.
	Agent *Agent `json:"agent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AgentDependencyEdges) AgentOrErr() (*Agent, error) {
	if e.Agent != nil {
		return e.Agent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AgentDependency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case agentdependency.FieldIsRequired:
			values[i] = new(sql.NullBool)
		case agentdependency.FieldID, agentdependency.FieldType, agentdependency.FieldDependencyName, agentdependency.FieldDependencyVersion, agentdependency.FieldVersionRange, agentdependency.FieldCondition:
			values[i] = new(sql.NullString)
		case agentdependency.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case agentdependency.ForeignKeys[0]: // agent_dependencies
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AgentDependency fields.
func (ad *AgentDependency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agentdependency.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ad.ID = value.String
			}
		case agentdependency.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ad.Type = agentdependency.Type(value.String)
			}
		case agentdependency.FieldDependencyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_name", values[i])
			} else if value.Valid {
				ad.DependencyName = value.String
			}
		case agentdependency.FieldDependencyVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_version", values[i])
			} else if value.Valid {
				ad.DependencyVersion = value.String
			}
		case agentdependency.FieldVersionRange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_range", values[i])
			} else if value.Valid {
				ad.VersionRange = value.String
			}
		case agentdependency.FieldIsRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_required", values[i])
			} else if value.Valid {
				ad.IsRequired = value.Bool
			}
		case agentdependency.FieldCondition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field condition", values[i])
			} else if value.Valid {
				ad.Condition = new(string)
				*ad.Condition = value.String
			}
		case agentdependency.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ad.CreatedAt = value.Time
			}
		case agentdependency.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_dependencies", values[i])
			} else if value.Valid {
				ad.agent_dependencies = new(string)
				*ad.agent_dependencies = value.String
			}
		default:
			ad.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AgentDependency.
// This includes values selected through modifiers, order, etc.
func (ad *AgentDependency) Value(name string) (ent.Value, error) {
	return ad.selectValues.Get(name)
}

// QueryAgent queries the "agent" edge of the AgentDependency entity.
func (ad *AgentDependency) QueryAgent() *AgentQuery {
	return NewAgentDependencyClient(ad.config).QueryAgent(ad)
}

// Update returns a builder for updating this AgentDependency.
// Note that you need to call AgentDependency.Unwrap() before calling this method if this AgentDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (ad *AgentDependency) Update() *AgentDependencyUpdateOne {
	return NewAgentDependencyClient(ad.config).UpdateOne(ad)
}

// Unwrap unwraps the AgentDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ad *AgentDependency) Unwrap() *AgentDependency {
	_tx, ok := ad.config.driver.(*txDriver)
	if !ok {
		panic("ent: AgentDependency is not a transactional entity")
	}
	ad.config.driver = _tx.drv
	return ad
}

// String implements the fmt.Stringer.
func (ad *AgentDependency) String() string {
	var builder strings.Builder
	builder.WriteString("AgentDependency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ad.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ad.Type))
	builder.WriteString(", ")
	builder.WriteString("dependency_name=")
	builder.WriteString(ad.DependencyName)
	builder.WriteString(", ")
	builder.WriteString("dependency_version=")
	builder.WriteString(ad.DependencyVersion)
	builder.WriteString(", ")
	builder.WriteString("version_range=")
	builder.WriteString(ad.VersionRange)
	builder.WriteString(", ")
	builder.WriteString("is_required=")
	builder.WriteString(fmt.Sprintf("%v", ad.IsRequired))
	builder.WriteString(", ")
	if v := ad.Condition; v != nil {
		builder.WriteString("condition=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ad.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AgentDependencies is a parsable slice of AgentDependency.
type AgentDependencies []*AgentDependency
