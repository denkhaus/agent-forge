// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/localconfig"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
)

// LocalConfigUpdate is the builder for updating LocalConfig entities.
type LocalConfigUpdate struct {
	config
	hooks    []Hook
	mutation *LocalConfigMutation
}

// Where appends a list predicates to the LocalConfigUpdate builder.
func (lcu *LocalConfigUpdate) Where(ps ...predicate.LocalConfig) *LocalConfigUpdate {
	lcu.mutation.Where(ps...)
	return lcu
}

// SetKey sets the "key" field.
func (lcu *LocalConfigUpdate) SetKey(s string) *LocalConfigUpdate {
	lcu.mutation.SetKey(s)
	return lcu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (lcu *LocalConfigUpdate) SetNillableKey(s *string) *LocalConfigUpdate {
	if s != nil {
		lcu.SetKey(*s)
	}
	return lcu
}

// SetValue sets the "value" field.
func (lcu *LocalConfigUpdate) SetValue(s string) *LocalConfigUpdate {
	lcu.mutation.SetValue(s)
	return lcu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (lcu *LocalConfigUpdate) SetNillableValue(s *string) *LocalConfigUpdate {
	if s != nil {
		lcu.SetValue(*s)
	}
	return lcu
}

// SetType sets the "type" field.
func (lcu *LocalConfigUpdate) SetType(l localconfig.Type) *LocalConfigUpdate {
	lcu.mutation.SetType(l)
	return lcu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lcu *LocalConfigUpdate) SetNillableType(l *localconfig.Type) *LocalConfigUpdate {
	if l != nil {
		lcu.SetType(*l)
	}
	return lcu
}

// SetUpdatedAt sets the "updated_at" field.
func (lcu *LocalConfigUpdate) SetUpdatedAt(t time.Time) *LocalConfigUpdate {
	lcu.mutation.SetUpdatedAt(t)
	return lcu
}

// Mutation returns the LocalConfigMutation object of the builder.
func (lcu *LocalConfigUpdate) Mutation() *LocalConfigMutation {
	return lcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lcu *LocalConfigUpdate) Save(ctx context.Context) (int, error) {
	lcu.defaults()
	return withHooks(ctx, lcu.sqlSave, lcu.mutation, lcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lcu *LocalConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := lcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lcu *LocalConfigUpdate) Exec(ctx context.Context) error {
	_, err := lcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcu *LocalConfigUpdate) ExecX(ctx context.Context) {
	if err := lcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcu *LocalConfigUpdate) defaults() {
	if _, ok := lcu.mutation.UpdatedAt(); !ok {
		v := localconfig.UpdateDefaultUpdatedAt()
		lcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcu *LocalConfigUpdate) check() error {
	if v, ok := lcu.mutation.GetType(); ok {
		if err := localconfig.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "LocalConfig.type": %w`, err)}
		}
	}
	return nil
}

func (lcu *LocalConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(localconfig.Table, localconfig.Columns, sqlgraph.NewFieldSpec(localconfig.FieldID, field.TypeString))
	if ps := lcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lcu.mutation.Key(); ok {
		_spec.SetField(localconfig.FieldKey, field.TypeString, value)
	}
	if value, ok := lcu.mutation.Value(); ok {
		_spec.SetField(localconfig.FieldValue, field.TypeString, value)
	}
	if value, ok := lcu.mutation.GetType(); ok {
		_spec.SetField(localconfig.FieldType, field.TypeEnum, value)
	}
	if value, ok := lcu.mutation.UpdatedAt(); ok {
		_spec.SetField(localconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lcu.mutation.done = true
	return n, nil
}

// LocalConfigUpdateOne is the builder for updating a single LocalConfig entity.
type LocalConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LocalConfigMutation
}

// SetKey sets the "key" field.
func (lcuo *LocalConfigUpdateOne) SetKey(s string) *LocalConfigUpdateOne {
	lcuo.mutation.SetKey(s)
	return lcuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (lcuo *LocalConfigUpdateOne) SetNillableKey(s *string) *LocalConfigUpdateOne {
	if s != nil {
		lcuo.SetKey(*s)
	}
	return lcuo
}

// SetValue sets the "value" field.
func (lcuo *LocalConfigUpdateOne) SetValue(s string) *LocalConfigUpdateOne {
	lcuo.mutation.SetValue(s)
	return lcuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (lcuo *LocalConfigUpdateOne) SetNillableValue(s *string) *LocalConfigUpdateOne {
	if s != nil {
		lcuo.SetValue(*s)
	}
	return lcuo
}

// SetType sets the "type" field.
func (lcuo *LocalConfigUpdateOne) SetType(l localconfig.Type) *LocalConfigUpdateOne {
	lcuo.mutation.SetType(l)
	return lcuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lcuo *LocalConfigUpdateOne) SetNillableType(l *localconfig.Type) *LocalConfigUpdateOne {
	if l != nil {
		lcuo.SetType(*l)
	}
	return lcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (lcuo *LocalConfigUpdateOne) SetUpdatedAt(t time.Time) *LocalConfigUpdateOne {
	lcuo.mutation.SetUpdatedAt(t)
	return lcuo
}

// Mutation returns the LocalConfigMutation object of the builder.
func (lcuo *LocalConfigUpdateOne) Mutation() *LocalConfigMutation {
	return lcuo.mutation
}

// Where appends a list predicates to the LocalConfigUpdate builder.
func (lcuo *LocalConfigUpdateOne) Where(ps ...predicate.LocalConfig) *LocalConfigUpdateOne {
	lcuo.mutation.Where(ps...)
	return lcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lcuo *LocalConfigUpdateOne) Select(field string, fields ...string) *LocalConfigUpdateOne {
	lcuo.fields = append([]string{field}, fields...)
	return lcuo
}

// Save executes the query and returns the updated LocalConfig entity.
func (lcuo *LocalConfigUpdateOne) Save(ctx context.Context) (*LocalConfig, error) {
	lcuo.defaults()
	return withHooks(ctx, lcuo.sqlSave, lcuo.mutation, lcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lcuo *LocalConfigUpdateOne) SaveX(ctx context.Context) *LocalConfig {
	node, err := lcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lcuo *LocalConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := lcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcuo *LocalConfigUpdateOne) ExecX(ctx context.Context) {
	if err := lcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcuo *LocalConfigUpdateOne) defaults() {
	if _, ok := lcuo.mutation.UpdatedAt(); !ok {
		v := localconfig.UpdateDefaultUpdatedAt()
		lcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcuo *LocalConfigUpdateOne) check() error {
	if v, ok := lcuo.mutation.GetType(); ok {
		if err := localconfig.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "LocalConfig.type": %w`, err)}
		}
	}
	return nil
}

func (lcuo *LocalConfigUpdateOne) sqlSave(ctx context.Context) (_node *LocalConfig, err error) {
	if err := lcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(localconfig.Table, localconfig.Columns, sqlgraph.NewFieldSpec(localconfig.FieldID, field.TypeString))
	id, ok := lcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LocalConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, localconfig.FieldID)
		for _, f := range fields {
			if !localconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != localconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lcuo.mutation.Key(); ok {
		_spec.SetField(localconfig.FieldKey, field.TypeString, value)
	}
	if value, ok := lcuo.mutation.Value(); ok {
		_spec.SetField(localconfig.FieldValue, field.TypeString, value)
	}
	if value, ok := lcuo.mutation.GetType(); ok {
		_spec.SetField(localconfig.FieldType, field.TypeEnum, value)
	}
	if value, ok := lcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(localconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &LocalConfig{config: lcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lcuo.mutation.done = true
	return _node, nil
}
