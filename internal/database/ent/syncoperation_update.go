// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
	"github.com/denkhaus/agentforge/internal/database/ent/syncoperation"
)

// SyncOperationUpdate is the builder for updating SyncOperation entities.
type SyncOperationUpdate struct {
	config
	hooks    []Hook
	mutation *SyncOperationMutation
}

// Where appends a list predicates to the SyncOperationUpdate builder.
func (sou *SyncOperationUpdate) Where(ps ...predicate.SyncOperation) *SyncOperationUpdate {
	sou.mutation.Where(ps...)
	return sou
}

// SetType sets the "type" field.
func (sou *SyncOperationUpdate) SetType(s syncoperation.Type) *SyncOperationUpdate {
	sou.mutation.SetType(s)
	return sou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableType(s *syncoperation.Type) *SyncOperationUpdate {
	if s != nil {
		sou.SetType(*s)
	}
	return sou
}

// SetStatus sets the "status" field.
func (sou *SyncOperationUpdate) SetStatus(s syncoperation.Status) *SyncOperationUpdate {
	sou.mutation.SetStatus(s)
	return sou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableStatus(s *syncoperation.Status) *SyncOperationUpdate {
	if s != nil {
		sou.SetStatus(*s)
	}
	return sou
}

// SetDirection sets the "direction" field.
func (sou *SyncOperationUpdate) SetDirection(s syncoperation.Direction) *SyncOperationUpdate {
	sou.mutation.SetDirection(s)
	return sou
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableDirection(s *syncoperation.Direction) *SyncOperationUpdate {
	if s != nil {
		sou.SetDirection(*s)
	}
	return sou
}

// SetRepositoryID sets the "repository_id" field.
func (sou *SyncOperationUpdate) SetRepositoryID(s string) *SyncOperationUpdate {
	sou.mutation.SetRepositoryID(s)
	return sou
}

// SetNillableRepositoryID sets the "repository_id" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableRepositoryID(s *string) *SyncOperationUpdate {
	if s != nil {
		sou.SetRepositoryID(*s)
	}
	return sou
}

// ClearRepositoryID clears the value of the "repository_id" field.
func (sou *SyncOperationUpdate) ClearRepositoryID() *SyncOperationUpdate {
	sou.mutation.ClearRepositoryID()
	return sou
}

// SetComponentID sets the "component_id" field.
func (sou *SyncOperationUpdate) SetComponentID(s string) *SyncOperationUpdate {
	sou.mutation.SetComponentID(s)
	return sou
}

// SetNillableComponentID sets the "component_id" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableComponentID(s *string) *SyncOperationUpdate {
	if s != nil {
		sou.SetComponentID(*s)
	}
	return sou
}

// ClearComponentID clears the value of the "component_id" field.
func (sou *SyncOperationUpdate) ClearComponentID() *SyncOperationUpdate {
	sou.mutation.ClearComponentID()
	return sou
}

// SetSourceCommit sets the "source_commit" field.
func (sou *SyncOperationUpdate) SetSourceCommit(s string) *SyncOperationUpdate {
	sou.mutation.SetSourceCommit(s)
	return sou
}

// SetNillableSourceCommit sets the "source_commit" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableSourceCommit(s *string) *SyncOperationUpdate {
	if s != nil {
		sou.SetSourceCommit(*s)
	}
	return sou
}

// ClearSourceCommit clears the value of the "source_commit" field.
func (sou *SyncOperationUpdate) ClearSourceCommit() *SyncOperationUpdate {
	sou.mutation.ClearSourceCommit()
	return sou
}

// SetTargetCommit sets the "target_commit" field.
func (sou *SyncOperationUpdate) SetTargetCommit(s string) *SyncOperationUpdate {
	sou.mutation.SetTargetCommit(s)
	return sou
}

// SetNillableTargetCommit sets the "target_commit" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableTargetCommit(s *string) *SyncOperationUpdate {
	if s != nil {
		sou.SetTargetCommit(*s)
	}
	return sou
}

// ClearTargetCommit clears the value of the "target_commit" field.
func (sou *SyncOperationUpdate) ClearTargetCommit() *SyncOperationUpdate {
	sou.mutation.ClearTargetCommit()
	return sou
}

// SetBranch sets the "branch" field.
func (sou *SyncOperationUpdate) SetBranch(s string) *SyncOperationUpdate {
	sou.mutation.SetBranch(s)
	return sou
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableBranch(s *string) *SyncOperationUpdate {
	if s != nil {
		sou.SetBranch(*s)
	}
	return sou
}

// ClearBranch clears the value of the "branch" field.
func (sou *SyncOperationUpdate) ClearBranch() *SyncOperationUpdate {
	sou.mutation.ClearBranch()
	return sou
}

// SetCompletedAt sets the "completed_at" field.
func (sou *SyncOperationUpdate) SetCompletedAt(t time.Time) *SyncOperationUpdate {
	sou.mutation.SetCompletedAt(t)
	return sou
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableCompletedAt(t *time.Time) *SyncOperationUpdate {
	if t != nil {
		sou.SetCompletedAt(*t)
	}
	return sou
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (sou *SyncOperationUpdate) ClearCompletedAt() *SyncOperationUpdate {
	sou.mutation.ClearCompletedAt()
	return sou
}

// SetErrorMessage sets the "error_message" field.
func (sou *SyncOperationUpdate) SetErrorMessage(s string) *SyncOperationUpdate {
	sou.mutation.SetErrorMessage(s)
	return sou
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableErrorMessage(s *string) *SyncOperationUpdate {
	if s != nil {
		sou.SetErrorMessage(*s)
	}
	return sou
}

// ClearErrorMessage clears the value of the "error_message" field.
func (sou *SyncOperationUpdate) ClearErrorMessage() *SyncOperationUpdate {
	sou.mutation.ClearErrorMessage()
	return sou
}

// SetTotalSteps sets the "total_steps" field.
func (sou *SyncOperationUpdate) SetTotalSteps(i int) *SyncOperationUpdate {
	sou.mutation.ResetTotalSteps()
	sou.mutation.SetTotalSteps(i)
	return sou
}

// SetNillableTotalSteps sets the "total_steps" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableTotalSteps(i *int) *SyncOperationUpdate {
	if i != nil {
		sou.SetTotalSteps(*i)
	}
	return sou
}

// AddTotalSteps adds i to the "total_steps" field.
func (sou *SyncOperationUpdate) AddTotalSteps(i int) *SyncOperationUpdate {
	sou.mutation.AddTotalSteps(i)
	return sou
}

// SetCompletedSteps sets the "completed_steps" field.
func (sou *SyncOperationUpdate) SetCompletedSteps(i int) *SyncOperationUpdate {
	sou.mutation.ResetCompletedSteps()
	sou.mutation.SetCompletedSteps(i)
	return sou
}

// SetNillableCompletedSteps sets the "completed_steps" field if the given value is not nil.
func (sou *SyncOperationUpdate) SetNillableCompletedSteps(i *int) *SyncOperationUpdate {
	if i != nil {
		sou.SetCompletedSteps(*i)
	}
	return sou
}

// AddCompletedSteps adds i to the "completed_steps" field.
func (sou *SyncOperationUpdate) AddCompletedSteps(i int) *SyncOperationUpdate {
	sou.mutation.AddCompletedSteps(i)
	return sou
}

// Mutation returns the SyncOperationMutation object of the builder.
func (sou *SyncOperationUpdate) Mutation() *SyncOperationMutation {
	return sou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sou *SyncOperationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sou.sqlSave, sou.mutation, sou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sou *SyncOperationUpdate) SaveX(ctx context.Context) int {
	affected, err := sou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sou *SyncOperationUpdate) Exec(ctx context.Context) error {
	_, err := sou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sou *SyncOperationUpdate) ExecX(ctx context.Context) {
	if err := sou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sou *SyncOperationUpdate) check() error {
	if v, ok := sou.mutation.GetType(); ok {
		if err := syncoperation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SyncOperation.type": %w`, err)}
		}
	}
	if v, ok := sou.mutation.Status(); ok {
		if err := syncoperation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SyncOperation.status": %w`, err)}
		}
	}
	if v, ok := sou.mutation.Direction(); ok {
		if err := syncoperation.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`ent: validator failed for field "SyncOperation.direction": %w`, err)}
		}
	}
	return nil
}

func (sou *SyncOperationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(syncoperation.Table, syncoperation.Columns, sqlgraph.NewFieldSpec(syncoperation.FieldID, field.TypeString))
	if ps := sou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sou.mutation.GetType(); ok {
		_spec.SetField(syncoperation.FieldType, field.TypeEnum, value)
	}
	if value, ok := sou.mutation.Status(); ok {
		_spec.SetField(syncoperation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sou.mutation.Direction(); ok {
		_spec.SetField(syncoperation.FieldDirection, field.TypeEnum, value)
	}
	if value, ok := sou.mutation.RepositoryID(); ok {
		_spec.SetField(syncoperation.FieldRepositoryID, field.TypeString, value)
	}
	if sou.mutation.RepositoryIDCleared() {
		_spec.ClearField(syncoperation.FieldRepositoryID, field.TypeString)
	}
	if value, ok := sou.mutation.ComponentID(); ok {
		_spec.SetField(syncoperation.FieldComponentID, field.TypeString, value)
	}
	if sou.mutation.ComponentIDCleared() {
		_spec.ClearField(syncoperation.FieldComponentID, field.TypeString)
	}
	if value, ok := sou.mutation.SourceCommit(); ok {
		_spec.SetField(syncoperation.FieldSourceCommit, field.TypeString, value)
	}
	if sou.mutation.SourceCommitCleared() {
		_spec.ClearField(syncoperation.FieldSourceCommit, field.TypeString)
	}
	if value, ok := sou.mutation.TargetCommit(); ok {
		_spec.SetField(syncoperation.FieldTargetCommit, field.TypeString, value)
	}
	if sou.mutation.TargetCommitCleared() {
		_spec.ClearField(syncoperation.FieldTargetCommit, field.TypeString)
	}
	if value, ok := sou.mutation.Branch(); ok {
		_spec.SetField(syncoperation.FieldBranch, field.TypeString, value)
	}
	if sou.mutation.BranchCleared() {
		_spec.ClearField(syncoperation.FieldBranch, field.TypeString)
	}
	if value, ok := sou.mutation.CompletedAt(); ok {
		_spec.SetField(syncoperation.FieldCompletedAt, field.TypeTime, value)
	}
	if sou.mutation.CompletedAtCleared() {
		_spec.ClearField(syncoperation.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := sou.mutation.ErrorMessage(); ok {
		_spec.SetField(syncoperation.FieldErrorMessage, field.TypeString, value)
	}
	if sou.mutation.ErrorMessageCleared() {
		_spec.ClearField(syncoperation.FieldErrorMessage, field.TypeString)
	}
	if value, ok := sou.mutation.TotalSteps(); ok {
		_spec.SetField(syncoperation.FieldTotalSteps, field.TypeInt, value)
	}
	if value, ok := sou.mutation.AddedTotalSteps(); ok {
		_spec.AddField(syncoperation.FieldTotalSteps, field.TypeInt, value)
	}
	if value, ok := sou.mutation.CompletedSteps(); ok {
		_spec.SetField(syncoperation.FieldCompletedSteps, field.TypeInt, value)
	}
	if value, ok := sou.mutation.AddedCompletedSteps(); ok {
		_spec.AddField(syncoperation.FieldCompletedSteps, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syncoperation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sou.mutation.done = true
	return n, nil
}

// SyncOperationUpdateOne is the builder for updating a single SyncOperation entity.
type SyncOperationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SyncOperationMutation
}

// SetType sets the "type" field.
func (souo *SyncOperationUpdateOne) SetType(s syncoperation.Type) *SyncOperationUpdateOne {
	souo.mutation.SetType(s)
	return souo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableType(s *syncoperation.Type) *SyncOperationUpdateOne {
	if s != nil {
		souo.SetType(*s)
	}
	return souo
}

// SetStatus sets the "status" field.
func (souo *SyncOperationUpdateOne) SetStatus(s syncoperation.Status) *SyncOperationUpdateOne {
	souo.mutation.SetStatus(s)
	return souo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableStatus(s *syncoperation.Status) *SyncOperationUpdateOne {
	if s != nil {
		souo.SetStatus(*s)
	}
	return souo
}

// SetDirection sets the "direction" field.
func (souo *SyncOperationUpdateOne) SetDirection(s syncoperation.Direction) *SyncOperationUpdateOne {
	souo.mutation.SetDirection(s)
	return souo
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableDirection(s *syncoperation.Direction) *SyncOperationUpdateOne {
	if s != nil {
		souo.SetDirection(*s)
	}
	return souo
}

// SetRepositoryID sets the "repository_id" field.
func (souo *SyncOperationUpdateOne) SetRepositoryID(s string) *SyncOperationUpdateOne {
	souo.mutation.SetRepositoryID(s)
	return souo
}

// SetNillableRepositoryID sets the "repository_id" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableRepositoryID(s *string) *SyncOperationUpdateOne {
	if s != nil {
		souo.SetRepositoryID(*s)
	}
	return souo
}

// ClearRepositoryID clears the value of the "repository_id" field.
func (souo *SyncOperationUpdateOne) ClearRepositoryID() *SyncOperationUpdateOne {
	souo.mutation.ClearRepositoryID()
	return souo
}

// SetComponentID sets the "component_id" field.
func (souo *SyncOperationUpdateOne) SetComponentID(s string) *SyncOperationUpdateOne {
	souo.mutation.SetComponentID(s)
	return souo
}

// SetNillableComponentID sets the "component_id" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableComponentID(s *string) *SyncOperationUpdateOne {
	if s != nil {
		souo.SetComponentID(*s)
	}
	return souo
}

// ClearComponentID clears the value of the "component_id" field.
func (souo *SyncOperationUpdateOne) ClearComponentID() *SyncOperationUpdateOne {
	souo.mutation.ClearComponentID()
	return souo
}

// SetSourceCommit sets the "source_commit" field.
func (souo *SyncOperationUpdateOne) SetSourceCommit(s string) *SyncOperationUpdateOne {
	souo.mutation.SetSourceCommit(s)
	return souo
}

// SetNillableSourceCommit sets the "source_commit" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableSourceCommit(s *string) *SyncOperationUpdateOne {
	if s != nil {
		souo.SetSourceCommit(*s)
	}
	return souo
}

// ClearSourceCommit clears the value of the "source_commit" field.
func (souo *SyncOperationUpdateOne) ClearSourceCommit() *SyncOperationUpdateOne {
	souo.mutation.ClearSourceCommit()
	return souo
}

// SetTargetCommit sets the "target_commit" field.
func (souo *SyncOperationUpdateOne) SetTargetCommit(s string) *SyncOperationUpdateOne {
	souo.mutation.SetTargetCommit(s)
	return souo
}

// SetNillableTargetCommit sets the "target_commit" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableTargetCommit(s *string) *SyncOperationUpdateOne {
	if s != nil {
		souo.SetTargetCommit(*s)
	}
	return souo
}

// ClearTargetCommit clears the value of the "target_commit" field.
func (souo *SyncOperationUpdateOne) ClearTargetCommit() *SyncOperationUpdateOne {
	souo.mutation.ClearTargetCommit()
	return souo
}

// SetBranch sets the "branch" field.
func (souo *SyncOperationUpdateOne) SetBranch(s string) *SyncOperationUpdateOne {
	souo.mutation.SetBranch(s)
	return souo
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableBranch(s *string) *SyncOperationUpdateOne {
	if s != nil {
		souo.SetBranch(*s)
	}
	return souo
}

// ClearBranch clears the value of the "branch" field.
func (souo *SyncOperationUpdateOne) ClearBranch() *SyncOperationUpdateOne {
	souo.mutation.ClearBranch()
	return souo
}

// SetCompletedAt sets the "completed_at" field.
func (souo *SyncOperationUpdateOne) SetCompletedAt(t time.Time) *SyncOperationUpdateOne {
	souo.mutation.SetCompletedAt(t)
	return souo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableCompletedAt(t *time.Time) *SyncOperationUpdateOne {
	if t != nil {
		souo.SetCompletedAt(*t)
	}
	return souo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (souo *SyncOperationUpdateOne) ClearCompletedAt() *SyncOperationUpdateOne {
	souo.mutation.ClearCompletedAt()
	return souo
}

// SetErrorMessage sets the "error_message" field.
func (souo *SyncOperationUpdateOne) SetErrorMessage(s string) *SyncOperationUpdateOne {
	souo.mutation.SetErrorMessage(s)
	return souo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableErrorMessage(s *string) *SyncOperationUpdateOne {
	if s != nil {
		souo.SetErrorMessage(*s)
	}
	return souo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (souo *SyncOperationUpdateOne) ClearErrorMessage() *SyncOperationUpdateOne {
	souo.mutation.ClearErrorMessage()
	return souo
}

// SetTotalSteps sets the "total_steps" field.
func (souo *SyncOperationUpdateOne) SetTotalSteps(i int) *SyncOperationUpdateOne {
	souo.mutation.ResetTotalSteps()
	souo.mutation.SetTotalSteps(i)
	return souo
}

// SetNillableTotalSteps sets the "total_steps" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableTotalSteps(i *int) *SyncOperationUpdateOne {
	if i != nil {
		souo.SetTotalSteps(*i)
	}
	return souo
}

// AddTotalSteps adds i to the "total_steps" field.
func (souo *SyncOperationUpdateOne) AddTotalSteps(i int) *SyncOperationUpdateOne {
	souo.mutation.AddTotalSteps(i)
	return souo
}

// SetCompletedSteps sets the "completed_steps" field.
func (souo *SyncOperationUpdateOne) SetCompletedSteps(i int) *SyncOperationUpdateOne {
	souo.mutation.ResetCompletedSteps()
	souo.mutation.SetCompletedSteps(i)
	return souo
}

// SetNillableCompletedSteps sets the "completed_steps" field if the given value is not nil.
func (souo *SyncOperationUpdateOne) SetNillableCompletedSteps(i *int) *SyncOperationUpdateOne {
	if i != nil {
		souo.SetCompletedSteps(*i)
	}
	return souo
}

// AddCompletedSteps adds i to the "completed_steps" field.
func (souo *SyncOperationUpdateOne) AddCompletedSteps(i int) *SyncOperationUpdateOne {
	souo.mutation.AddCompletedSteps(i)
	return souo
}

// Mutation returns the SyncOperationMutation object of the builder.
func (souo *SyncOperationUpdateOne) Mutation() *SyncOperationMutation {
	return souo.mutation
}

// Where appends a list predicates to the SyncOperationUpdate builder.
func (souo *SyncOperationUpdateOne) Where(ps ...predicate.SyncOperation) *SyncOperationUpdateOne {
	souo.mutation.Where(ps...)
	return souo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (souo *SyncOperationUpdateOne) Select(field string, fields ...string) *SyncOperationUpdateOne {
	souo.fields = append([]string{field}, fields...)
	return souo
}

// Save executes the query and returns the updated SyncOperation entity.
func (souo *SyncOperationUpdateOne) Save(ctx context.Context) (*SyncOperation, error) {
	return withHooks(ctx, souo.sqlSave, souo.mutation, souo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (souo *SyncOperationUpdateOne) SaveX(ctx context.Context) *SyncOperation {
	node, err := souo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (souo *SyncOperationUpdateOne) Exec(ctx context.Context) error {
	_, err := souo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (souo *SyncOperationUpdateOne) ExecX(ctx context.Context) {
	if err := souo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (souo *SyncOperationUpdateOne) check() error {
	if v, ok := souo.mutation.GetType(); ok {
		if err := syncoperation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SyncOperation.type": %w`, err)}
		}
	}
	if v, ok := souo.mutation.Status(); ok {
		if err := syncoperation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SyncOperation.status": %w`, err)}
		}
	}
	if v, ok := souo.mutation.Direction(); ok {
		if err := syncoperation.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`ent: validator failed for field "SyncOperation.direction": %w`, err)}
		}
	}
	return nil
}

func (souo *SyncOperationUpdateOne) sqlSave(ctx context.Context) (_node *SyncOperation, err error) {
	if err := souo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(syncoperation.Table, syncoperation.Columns, sqlgraph.NewFieldSpec(syncoperation.FieldID, field.TypeString))
	id, ok := souo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SyncOperation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := souo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, syncoperation.FieldID)
		for _, f := range fields {
			if !syncoperation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != syncoperation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := souo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := souo.mutation.GetType(); ok {
		_spec.SetField(syncoperation.FieldType, field.TypeEnum, value)
	}
	if value, ok := souo.mutation.Status(); ok {
		_spec.SetField(syncoperation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := souo.mutation.Direction(); ok {
		_spec.SetField(syncoperation.FieldDirection, field.TypeEnum, value)
	}
	if value, ok := souo.mutation.RepositoryID(); ok {
		_spec.SetField(syncoperation.FieldRepositoryID, field.TypeString, value)
	}
	if souo.mutation.RepositoryIDCleared() {
		_spec.ClearField(syncoperation.FieldRepositoryID, field.TypeString)
	}
	if value, ok := souo.mutation.ComponentID(); ok {
		_spec.SetField(syncoperation.FieldComponentID, field.TypeString, value)
	}
	if souo.mutation.ComponentIDCleared() {
		_spec.ClearField(syncoperation.FieldComponentID, field.TypeString)
	}
	if value, ok := souo.mutation.SourceCommit(); ok {
		_spec.SetField(syncoperation.FieldSourceCommit, field.TypeString, value)
	}
	if souo.mutation.SourceCommitCleared() {
		_spec.ClearField(syncoperation.FieldSourceCommit, field.TypeString)
	}
	if value, ok := souo.mutation.TargetCommit(); ok {
		_spec.SetField(syncoperation.FieldTargetCommit, field.TypeString, value)
	}
	if souo.mutation.TargetCommitCleared() {
		_spec.ClearField(syncoperation.FieldTargetCommit, field.TypeString)
	}
	if value, ok := souo.mutation.Branch(); ok {
		_spec.SetField(syncoperation.FieldBranch, field.TypeString, value)
	}
	if souo.mutation.BranchCleared() {
		_spec.ClearField(syncoperation.FieldBranch, field.TypeString)
	}
	if value, ok := souo.mutation.CompletedAt(); ok {
		_spec.SetField(syncoperation.FieldCompletedAt, field.TypeTime, value)
	}
	if souo.mutation.CompletedAtCleared() {
		_spec.ClearField(syncoperation.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := souo.mutation.ErrorMessage(); ok {
		_spec.SetField(syncoperation.FieldErrorMessage, field.TypeString, value)
	}
	if souo.mutation.ErrorMessageCleared() {
		_spec.ClearField(syncoperation.FieldErrorMessage, field.TypeString)
	}
	if value, ok := souo.mutation.TotalSteps(); ok {
		_spec.SetField(syncoperation.FieldTotalSteps, field.TypeInt, value)
	}
	if value, ok := souo.mutation.AddedTotalSteps(); ok {
		_spec.AddField(syncoperation.FieldTotalSteps, field.TypeInt, value)
	}
	if value, ok := souo.mutation.CompletedSteps(); ok {
		_spec.SetField(syncoperation.FieldCompletedSteps, field.TypeInt, value)
	}
	if value, ok := souo.mutation.AddedCompletedSteps(); ok {
		_spec.AddField(syncoperation.FieldCompletedSteps, field.TypeInt, value)
	}
	_node = &SyncOperation{config: souo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, souo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syncoperation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	souo.mutation.done = true
	return _node, nil
}
