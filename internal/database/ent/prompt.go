// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/denkhaus/agentforge/internal/database/ent/prompt"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
)

// Prompt is the model entity for the Prompt schema.
type Prompt struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// License holds the value of the "license" field.
	License string `json:"license,omitempty"`
	// Homepage holds the value of the "homepage" field.
	Homepage *string `json:"homepage,omitempty"`
	// Documentation holds the value of the "documentation" field.
	Documentation *string `json:"documentation,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Categories holds the value of the "categories" field.
	Categories []string `json:"categories,omitempty"`
	// Keywords holds the value of the "keywords" field.
	Keywords []string `json:"keywords,omitempty"`
	// Stability holds the value of the "stability" field.
	Stability prompt.Stability `json:"stability,omitempty"`
	// Maturity holds the value of the "maturity" field.
	Maturity prompt.Maturity `json:"maturity,omitempty"`
	// ForgeVersion holds the value of the "forge_version" field.
	ForgeVersion string `json:"forge_version,omitempty"`
	// Platforms holds the value of the "platforms" field.
	Platforms []string `json:"platforms,omitempty"`
	// Spec holds the value of the "spec" field.
	Spec string `json:"spec,omitempty"`
	// SpecHash holds the value of the "spec_hash" field.
	SpecHash string `json:"spec_hash,omitempty"`
	// IsInstalled holds the value of the "is_installed" field.
	IsInstalled bool `json:"is_installed,omitempty"`
	// InstallPath holds the value of the "install_path" field.
	InstallPath *string `json:"install_path,omitempty"`
	// InstalledAt holds the value of the "installed_at" field.
	InstalledAt *time.Time `json:"installed_at,omitempty"`
	// CommitHash holds the value of the "commit_hash" field.
	CommitHash string `json:"commit_hash,omitempty"`
	// Branch holds the value of the "branch" field.
	Branch string `json:"branch,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TemplatePath holds the value of the "template_path" field.
	TemplatePath *string `json:"template_path,omitempty"`
	// TemplateContent holds the value of the "template_content" field.
	TemplateContent *string `json:"template_content,omitempty"`
	// VariablesSchema holds the value of the "variables_schema" field.
	VariablesSchema map[string]interface{} `json:"variables_schema,omitempty"`
	// PromptType holds the value of the "prompt_type" field.
	PromptType prompt.PromptType `json:"prompt_type,omitempty"`
	// ContextWindow holds the value of the "context_window" field.
	ContextWindow *int `json:"context_window,omitempty"`
	// DefaultVariables holds the value of the "default_variables" field.
	DefaultVariables map[string]interface{} `json:"default_variables,omitempty"`
	// RequiredVariables holds the value of the "required_variables" field.
	RequiredVariables []string `json:"required_variables,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// SupportsStreaming holds the value of the "supports_streaming" field.
	SupportsStreaming bool `json:"supports_streaming,omitempty"`
	// ModelPreferences holds the value of the "model_preferences" field.
	ModelPreferences []string `json:"model_preferences,omitempty"`
	// Temperature holds the value of the "temperature" field.
	Temperature *float64 `json:"temperature,omitempty"`
	// MaxTokens holds the value of the "max_tokens" field.
	MaxTokens *int `json:"max_tokens,omitempty"`
	// StopSequences holds the value of the "stop_sequences" field.
	StopSequences []string `json:"stop_sequences,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromptQuery when eager-loading is set.
	Edges              PromptEdges `json:"edges"`
	repository_prompts *string
	selectValues       sql.SelectValues
}

// PromptEdges holds the relations/edges for other nodes in the graph.
type PromptEdges struct {
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository,omitempty"`
	// Dependencies holds the value of the dependencies edge.
	Dependencies []*PromptDependency `json:"dependencies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromptEdges) RepositoryOrErr() (*Repository, error) {
	if e.Repository != nil {
		return e.Repository, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: repository.Label}
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// DependenciesOrErr returns the Dependencies value or an error if the edge
// was not loaded in eager-loading.
func (e PromptEdges) DependenciesOrErr() ([]*PromptDependency, error) {
	if e.loadedTypes[1] {
		return e.Dependencies, nil
	}
	return nil, &NotLoadedError{edge: "dependencies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Prompt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case prompt.FieldTags, prompt.FieldCategories, prompt.FieldKeywords, prompt.FieldPlatforms, prompt.FieldVariablesSchema, prompt.FieldDefaultVariables, prompt.FieldRequiredVariables, prompt.FieldModelPreferences, prompt.FieldStopSequences:
			values[i] = new([]byte)
		case prompt.FieldIsInstalled, prompt.FieldSupportsStreaming:
			values[i] = new(sql.NullBool)
		case prompt.FieldTemperature:
			values[i] = new(sql.NullFloat64)
		case prompt.FieldContextWindow, prompt.FieldMaxTokens:
			values[i] = new(sql.NullInt64)
		case prompt.FieldID, prompt.FieldName, prompt.FieldNamespace, prompt.FieldVersion, prompt.FieldDescription, prompt.FieldAuthor, prompt.FieldLicense, prompt.FieldHomepage, prompt.FieldDocumentation, prompt.FieldStability, prompt.FieldMaturity, prompt.FieldForgeVersion, prompt.FieldSpec, prompt.FieldSpecHash, prompt.FieldInstallPath, prompt.FieldCommitHash, prompt.FieldBranch, prompt.FieldTemplatePath, prompt.FieldTemplateContent, prompt.FieldPromptType, prompt.FieldLanguage:
			values[i] = new(sql.NullString)
		case prompt.FieldInstalledAt, prompt.FieldCreatedAt, prompt.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case prompt.ForeignKeys[0]: // repository_prompts
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Prompt fields.
func (pr *Prompt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case prompt.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pr.ID = value.String
			}
		case prompt.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case prompt.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				pr.Namespace = value.String
			}
		case prompt.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pr.Version = value.String
			}
		case prompt.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case prompt.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				pr.Author = value.String
			}
		case prompt.FieldLicense:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license", values[i])
			} else if value.Valid {
				pr.License = value.String
			}
		case prompt.FieldHomepage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field homepage", values[i])
			} else if value.Valid {
				pr.Homepage = new(string)
				*pr.Homepage = value.String
			}
		case prompt.FieldDocumentation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field documentation", values[i])
			} else if value.Valid {
				pr.Documentation = new(string)
				*pr.Documentation = value.String
			}
		case prompt.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case prompt.FieldCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Categories); err != nil {
					return fmt.Errorf("unmarshal field categories: %w", err)
				}
			}
		case prompt.FieldKeywords:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field keywords", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Keywords); err != nil {
					return fmt.Errorf("unmarshal field keywords: %w", err)
				}
			}
		case prompt.FieldStability:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stability", values[i])
			} else if value.Valid {
				pr.Stability = prompt.Stability(value.String)
			}
		case prompt.FieldMaturity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field maturity", values[i])
			} else if value.Valid {
				pr.Maturity = prompt.Maturity(value.String)
			}
		case prompt.FieldForgeVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field forge_version", values[i])
			} else if value.Valid {
				pr.ForgeVersion = value.String
			}
		case prompt.FieldPlatforms:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field platforms", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Platforms); err != nil {
					return fmt.Errorf("unmarshal field platforms: %w", err)
				}
			}
		case prompt.FieldSpec:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spec", values[i])
			} else if value.Valid {
				pr.Spec = value.String
			}
		case prompt.FieldSpecHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spec_hash", values[i])
			} else if value.Valid {
				pr.SpecHash = value.String
			}
		case prompt.FieldIsInstalled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_installed", values[i])
			} else if value.Valid {
				pr.IsInstalled = value.Bool
			}
		case prompt.FieldInstallPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field install_path", values[i])
			} else if value.Valid {
				pr.InstallPath = new(string)
				*pr.InstallPath = value.String
			}
		case prompt.FieldInstalledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field installed_at", values[i])
			} else if value.Valid {
				pr.InstalledAt = new(time.Time)
				*pr.InstalledAt = value.Time
			}
		case prompt.FieldCommitHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commit_hash", values[i])
			} else if value.Valid {
				pr.CommitHash = value.String
			}
		case prompt.FieldBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch", values[i])
			} else if value.Valid {
				pr.Branch = value.String
			}
		case prompt.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case prompt.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case prompt.FieldTemplatePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_path", values[i])
			} else if value.Valid {
				pr.TemplatePath = new(string)
				*pr.TemplatePath = value.String
			}
		case prompt.FieldTemplateContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_content", values[i])
			} else if value.Valid {
				pr.TemplateContent = new(string)
				*pr.TemplateContent = value.String
			}
		case prompt.FieldVariablesSchema:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field variables_schema", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.VariablesSchema); err != nil {
					return fmt.Errorf("unmarshal field variables_schema: %w", err)
				}
			}
		case prompt.FieldPromptType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_type", values[i])
			} else if value.Valid {
				pr.PromptType = prompt.PromptType(value.String)
			}
		case prompt.FieldContextWindow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field context_window", values[i])
			} else if value.Valid {
				pr.ContextWindow = new(int)
				*pr.ContextWindow = int(value.Int64)
			}
		case prompt.FieldDefaultVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field default_variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.DefaultVariables); err != nil {
					return fmt.Errorf("unmarshal field default_variables: %w", err)
				}
			}
		case prompt.FieldRequiredVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field required_variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.RequiredVariables); err != nil {
					return fmt.Errorf("unmarshal field required_variables: %w", err)
				}
			}
		case prompt.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				pr.Language = value.String
			}
		case prompt.FieldSupportsStreaming:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field supports_streaming", values[i])
			} else if value.Valid {
				pr.SupportsStreaming = value.Bool
			}
		case prompt.FieldModelPreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field model_preferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.ModelPreferences); err != nil {
					return fmt.Errorf("unmarshal field model_preferences: %w", err)
				}
			}
		case prompt.FieldTemperature:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field temperature", values[i])
			} else if value.Valid {
				pr.Temperature = new(float64)
				*pr.Temperature = value.Float64
			}
		case prompt.FieldMaxTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_tokens", values[i])
			} else if value.Valid {
				pr.MaxTokens = new(int)
				*pr.MaxTokens = int(value.Int64)
			}
		case prompt.FieldStopSequences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field stop_sequences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.StopSequences); err != nil {
					return fmt.Errorf("unmarshal field stop_sequences: %w", err)
				}
			}
		case prompt.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repository_prompts", values[i])
			} else if value.Valid {
				pr.repository_prompts = new(string)
				*pr.repository_prompts = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Prompt.
// This includes values selected through modifiers, order, etc.
func (pr *Prompt) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryRepository queries the "repository" edge of the Prompt entity.
func (pr *Prompt) QueryRepository() *RepositoryQuery {
	return NewPromptClient(pr.config).QueryRepository(pr)
}

// QueryDependencies queries the "dependencies" edge of the Prompt entity.
func (pr *Prompt) QueryDependencies() *PromptDependencyQuery {
	return NewPromptClient(pr.config).QueryDependencies(pr)
}

// Update returns a builder for updating this Prompt.
// Note that you need to call Prompt.Unwrap() before calling this method if this Prompt
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Prompt) Update() *PromptUpdateOne {
	return NewPromptClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Prompt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Prompt) Unwrap() *Prompt {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Prompt is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Prompt) String() string {
	var builder strings.Builder
	builder.WriteString("Prompt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("namespace=")
	builder.WriteString(pr.Namespace)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(pr.Version)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(pr.Author)
	builder.WriteString(", ")
	builder.WriteString("license=")
	builder.WriteString(pr.License)
	builder.WriteString(", ")
	if v := pr.Homepage; v != nil {
		builder.WriteString("homepage=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.Documentation; v != nil {
		builder.WriteString("documentation=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", pr.Tags))
	builder.WriteString(", ")
	builder.WriteString("categories=")
	builder.WriteString(fmt.Sprintf("%v", pr.Categories))
	builder.WriteString(", ")
	builder.WriteString("keywords=")
	builder.WriteString(fmt.Sprintf("%v", pr.Keywords))
	builder.WriteString(", ")
	builder.WriteString("stability=")
	builder.WriteString(fmt.Sprintf("%v", pr.Stability))
	builder.WriteString(", ")
	builder.WriteString("maturity=")
	builder.WriteString(fmt.Sprintf("%v", pr.Maturity))
	builder.WriteString(", ")
	builder.WriteString("forge_version=")
	builder.WriteString(pr.ForgeVersion)
	builder.WriteString(", ")
	builder.WriteString("platforms=")
	builder.WriteString(fmt.Sprintf("%v", pr.Platforms))
	builder.WriteString(", ")
	builder.WriteString("spec=")
	builder.WriteString(pr.Spec)
	builder.WriteString(", ")
	builder.WriteString("spec_hash=")
	builder.WriteString(pr.SpecHash)
	builder.WriteString(", ")
	builder.WriteString("is_installed=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsInstalled))
	builder.WriteString(", ")
	if v := pr.InstallPath; v != nil {
		builder.WriteString("install_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.InstalledAt; v != nil {
		builder.WriteString("installed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("commit_hash=")
	builder.WriteString(pr.CommitHash)
	builder.WriteString(", ")
	builder.WriteString("branch=")
	builder.WriteString(pr.Branch)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pr.TemplatePath; v != nil {
		builder.WriteString("template_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.TemplateContent; v != nil {
		builder.WriteString("template_content=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("variables_schema=")
	builder.WriteString(fmt.Sprintf("%v", pr.VariablesSchema))
	builder.WriteString(", ")
	builder.WriteString("prompt_type=")
	builder.WriteString(fmt.Sprintf("%v", pr.PromptType))
	builder.WriteString(", ")
	if v := pr.ContextWindow; v != nil {
		builder.WriteString("context_window=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("default_variables=")
	builder.WriteString(fmt.Sprintf("%v", pr.DefaultVariables))
	builder.WriteString(", ")
	builder.WriteString("required_variables=")
	builder.WriteString(fmt.Sprintf("%v", pr.RequiredVariables))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(pr.Language)
	builder.WriteString(", ")
	builder.WriteString("supports_streaming=")
	builder.WriteString(fmt.Sprintf("%v", pr.SupportsStreaming))
	builder.WriteString(", ")
	builder.WriteString("model_preferences=")
	builder.WriteString(fmt.Sprintf("%v", pr.ModelPreferences))
	builder.WriteString(", ")
	if v := pr.Temperature; v != nil {
		builder.WriteString("temperature=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.MaxTokens; v != nil {
		builder.WriteString("max_tokens=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("stop_sequences=")
	builder.WriteString(fmt.Sprintf("%v", pr.StopSequences))
	builder.WriteByte(')')
	return builder.String()
}

// Prompts is a parsable slice of Prompt.
type Prompts []*Prompt
