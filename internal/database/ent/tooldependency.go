// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/denkhaus/agentforge/internal/database/ent/tool"
	"github.com/denkhaus/agentforge/internal/database/ent/tooldependency"
)

// ToolDependency is the model entity for the ToolDependency schema.
type ToolDependency struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type tooldependency.Type `json:"type,omitempty"`
	// DependencyName holds the value of the "dependency_name" field.
	DependencyName string `json:"dependency_name,omitempty"`
	// DependencyVersion holds the value of the "dependency_version" field.
	DependencyVersion string `json:"dependency_version,omitempty"`
	// VersionRange holds the value of the "version_range" field.
	VersionRange string `json:"version_range,omitempty"`
	// IsRequired holds the value of the "is_required" field.
	IsRequired bool `json:"is_required,omitempty"`
	// Condition holds the value of the "condition" field.
	Condition *string `json:"condition,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ToolDependencyQuery when eager-loading is set.
	Edges             ToolDependencyEdges `json:"edges"`
	tool_dependencies *string
	selectValues      sql.SelectValues
}

// ToolDependencyEdges holds the relations/edges for other nodes in the graph.
type ToolDependencyEdges struct {
	// Tool holds the value of the tool edge.
	Tool *Tool `json:"tool,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ToolOrErr returns the Tool value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ToolDependencyEdges) ToolOrErr() (*Tool, error) {
	if e.Tool != nil {
		return e.Tool, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tool.Label}
	}
	return nil, &NotLoadedError{edge: "tool"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ToolDependency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tooldependency.FieldIsRequired:
			values[i] = new(sql.NullBool)
		case tooldependency.FieldID, tooldependency.FieldType, tooldependency.FieldDependencyName, tooldependency.FieldDependencyVersion, tooldependency.FieldVersionRange, tooldependency.FieldCondition:
			values[i] = new(sql.NullString)
		case tooldependency.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case tooldependency.ForeignKeys[0]: // tool_dependencies
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ToolDependency fields.
func (td *ToolDependency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tooldependency.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				td.ID = value.String
			}
		case tooldependency.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				td.Type = tooldependency.Type(value.String)
			}
		case tooldependency.FieldDependencyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_name", values[i])
			} else if value.Valid {
				td.DependencyName = value.String
			}
		case tooldependency.FieldDependencyVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_version", values[i])
			} else if value.Valid {
				td.DependencyVersion = value.String
			}
		case tooldependency.FieldVersionRange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_range", values[i])
			} else if value.Valid {
				td.VersionRange = value.String
			}
		case tooldependency.FieldIsRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_required", values[i])
			} else if value.Valid {
				td.IsRequired = value.Bool
			}
		case tooldependency.FieldCondition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field condition", values[i])
			} else if value.Valid {
				td.Condition = new(string)
				*td.Condition = value.String
			}
		case tooldependency.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				td.CreatedAt = value.Time
			}
		case tooldependency.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tool_dependencies", values[i])
			} else if value.Valid {
				td.tool_dependencies = new(string)
				*td.tool_dependencies = value.String
			}
		default:
			td.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ToolDependency.
// This includes values selected through modifiers, order, etc.
func (td *ToolDependency) Value(name string) (ent.Value, error) {
	return td.selectValues.Get(name)
}

// QueryTool queries the "tool" edge of the ToolDependency entity.
func (td *ToolDependency) QueryTool() *ToolQuery {
	return NewToolDependencyClient(td.config).QueryTool(td)
}

// Update returns a builder for updating this ToolDependency.
// Note that you need to call ToolDependency.Unwrap() before calling this method if this ToolDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *ToolDependency) Update() *ToolDependencyUpdateOne {
	return NewToolDependencyClient(td.config).UpdateOne(td)
}

// Unwrap unwraps the ToolDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *ToolDependency) Unwrap() *ToolDependency {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: ToolDependency is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *ToolDependency) String() string {
	var builder strings.Builder
	builder.WriteString("ToolDependency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", td.Type))
	builder.WriteString(", ")
	builder.WriteString("dependency_name=")
	builder.WriteString(td.DependencyName)
	builder.WriteString(", ")
	builder.WriteString("dependency_version=")
	builder.WriteString(td.DependencyVersion)
	builder.WriteString(", ")
	builder.WriteString("version_range=")
	builder.WriteString(td.VersionRange)
	builder.WriteString(", ")
	builder.WriteString("is_required=")
	builder.WriteString(fmt.Sprintf("%v", td.IsRequired))
	builder.WriteString(", ")
	if v := td.Condition; v != nil {
		builder.WriteString("condition=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(td.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ToolDependencies is a parsable slice of ToolDependency.
type ToolDependencies []*ToolDependency
