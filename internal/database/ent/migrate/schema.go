// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AgentsColumns holds the columns for the "agents" table.
	AgentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "namespace", Type: field.TypeString, Default: "default"},
		{Name: "version", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "author", Type: field.TypeString},
		{Name: "license", Type: field.TypeString},
		{Name: "homepage", Type: field.TypeString, Nullable: true},
		{Name: "documentation", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "categories", Type: field.TypeJSON, Nullable: true},
		{Name: "keywords", Type: field.TypeJSON, Nullable: true},
		{Name: "stability", Type: field.TypeEnum, Enums: []string{"EXPERIMENTAL", "BETA", "STABLE", "DEPRECATED"}, Default: "EXPERIMENTAL"},
		{Name: "maturity", Type: field.TypeEnum, Enums: []string{"ALPHA", "BETA", "STABLE", "MATURE"}, Default: "ALPHA"},
		{Name: "forge_version", Type: field.TypeString},
		{Name: "platforms", Type: field.TypeJSON, Nullable: true},
		{Name: "spec", Type: field.TypeString, Size: 2147483647},
		{Name: "spec_hash", Type: field.TypeString},
		{Name: "is_installed", Type: field.TypeBool, Default: false},
		{Name: "install_path", Type: field.TypeString, Nullable: true},
		{Name: "installed_at", Type: field.TypeTime, Nullable: true},
		{Name: "commit_hash", Type: field.TypeString},
		{Name: "branch", Type: field.TypeString, Default: "main"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "config_path", Type: field.TypeString, Nullable: true},
		{Name: "agent_config", Type: field.TypeJSON, Nullable: true},
		{Name: "llm_provider", Type: field.TypeString, Nullable: true},
		{Name: "system_prompt_id", Type: field.TypeString, Nullable: true},
		{Name: "tool_dependencies", Type: field.TypeJSON, Nullable: true},
		{Name: "prompt_dependencies", Type: field.TypeJSON, Nullable: true},
		{Name: "agent_dependencies", Type: field.TypeJSON, Nullable: true},
		{Name: "agent_type", Type: field.TypeEnum, Enums: []string{"CONVERSATIONAL", "TASK_ORIENTED", "SPECIALIZED", "COMPOSITE"}, Default: "CONVERSATIONAL"},
		{Name: "capabilities", Type: field.TypeJSON, Nullable: true},
		{Name: "supported_languages", Type: field.TypeJSON, Nullable: true},
		{Name: "supports_memory", Type: field.TypeBool, Default: false},
		{Name: "supports_tools", Type: field.TypeBool, Default: false},
		{Name: "supports_multimodal", Type: field.TypeBool, Default: false},
		{Name: "model_preferences", Type: field.TypeJSON, Nullable: true},
		{Name: "default_temperature", Type: field.TypeFloat64, Nullable: true},
		{Name: "default_max_tokens", Type: field.TypeInt, Nullable: true},
		{Name: "session_timeout_minutes", Type: field.TypeInt, Default: 30},
		{Name: "repository_agents", Type: field.TypeString},
	}
	// AgentsTable holds the schema information for the "agents" table.
	AgentsTable = &schema.Table{
		Name:       "agents",
		Columns:    AgentsColumns,
		PrimaryKey: []*schema.Column{AgentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "agents_repositories_agents",
				Columns:    []*schema.Column{AgentsColumns[42]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "agent_agent_type",
				Unique:  false,
				Columns: []*schema.Column{AgentsColumns[32]},
			},
			{
				Name:    "agent_llm_provider",
				Unique:  false,
				Columns: []*schema.Column{AgentsColumns[27]},
			},
			{
				Name:    "agent_is_installed",
				Unique:  false,
				Columns: []*schema.Column{AgentsColumns[18]},
			},
			{
				Name:    "agent_stability",
				Unique:  false,
				Columns: []*schema.Column{AgentsColumns[12]},
			},
			{
				Name:    "agent_supports_tools",
				Unique:  false,
				Columns: []*schema.Column{AgentsColumns[36]},
			},
			{
				Name:    "agent_name_version_repository_agents",
				Unique:  true,
				Columns: []*schema.Column{AgentsColumns[1], AgentsColumns[3], AgentsColumns[42]},
			},
		},
	}
	// AgentDependenciesColumns holds the columns for the "agent_dependencies" table.
	AgentDependenciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"RUNTIME", "BUILD", "OPTIONAL", "PEER"}, Default: "RUNTIME"},
		{Name: "dependency_name", Type: field.TypeString},
		{Name: "dependency_version", Type: field.TypeString},
		{Name: "version_range", Type: field.TypeString},
		{Name: "is_required", Type: field.TypeBool, Default: true},
		{Name: "condition", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "agent_dependencies", Type: field.TypeString},
	}
	// AgentDependenciesTable holds the schema information for the "agent_dependencies" table.
	AgentDependenciesTable = &schema.Table{
		Name:       "agent_dependencies",
		Columns:    AgentDependenciesColumns,
		PrimaryKey: []*schema.Column{AgentDependenciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "agent_dependencies_agents_dependencies",
				Columns:    []*schema.Column{AgentDependenciesColumns[8]},
				RefColumns: []*schema.Column{AgentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "agentdependency_type",
				Unique:  false,
				Columns: []*schema.Column{AgentDependenciesColumns[1]},
			},
			{
				Name:    "agentdependency_is_required",
				Unique:  false,
				Columns: []*schema.Column{AgentDependenciesColumns[5]},
			},
			{
				Name:    "agentdependency_dependency_name_dependency_version_agent_dependencies",
				Unique:  true,
				Columns: []*schema.Column{AgentDependenciesColumns[2], AgentDependenciesColumns[3], AgentDependenciesColumns[8]},
			},
		},
	}
	// ComponentsColumns holds the columns for the "components" table.
	ComponentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "namespace", Type: field.TypeString, Default: "default"},
		{Name: "version", Type: field.TypeString},
		{Name: "kind", Type: field.TypeEnum, Enums: []string{"TOOL", "PROMPT", "AGENT"}},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "author", Type: field.TypeString},
		{Name: "license", Type: field.TypeString},
		{Name: "homepage", Type: field.TypeString, Nullable: true},
		{Name: "documentation", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "categories", Type: field.TypeJSON, Nullable: true},
		{Name: "keywords", Type: field.TypeJSON, Nullable: true},
		{Name: "stability", Type: field.TypeEnum, Enums: []string{"EXPERIMENTAL", "BETA", "STABLE", "DEPRECATED"}, Default: "EXPERIMENTAL"},
		{Name: "maturity", Type: field.TypeEnum, Enums: []string{"ALPHA", "BETA", "STABLE", "MATURE"}, Default: "ALPHA"},
		{Name: "forge_version", Type: field.TypeString},
		{Name: "platforms", Type: field.TypeJSON, Nullable: true},
		{Name: "spec", Type: field.TypeString, Size: 2147483647},
		{Name: "spec_hash", Type: field.TypeString},
		{Name: "is_installed", Type: field.TypeBool, Default: false},
		{Name: "install_path", Type: field.TypeString, Nullable: true},
		{Name: "installed_at", Type: field.TypeTime, Nullable: true},
		{Name: "commit_hash", Type: field.TypeString},
		{Name: "branch", Type: field.TypeString, Default: "main"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "repository_components", Type: field.TypeString},
	}
	// ComponentsTable holds the schema information for the "components" table.
	ComponentsTable = &schema.Table{
		Name:       "components",
		Columns:    ComponentsColumns,
		PrimaryKey: []*schema.Column{ComponentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "components_repositories_components",
				Columns:    []*schema.Column{ComponentsColumns[26]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "component_kind",
				Unique:  false,
				Columns: []*schema.Column{ComponentsColumns[4]},
			},
			{
				Name:    "component_stability",
				Unique:  false,
				Columns: []*schema.Column{ComponentsColumns[13]},
			},
			{
				Name:    "component_is_installed",
				Unique:  false,
				Columns: []*schema.Column{ComponentsColumns[19]},
			},
			{
				Name:    "component_commit_hash",
				Unique:  false,
				Columns: []*schema.Column{ComponentsColumns[22]},
			},
			{
				Name:    "component_name_version_repository_components",
				Unique:  true,
				Columns: []*schema.Column{ComponentsColumns[1], ComponentsColumns[3], ComponentsColumns[26]},
			},
		},
	}
	// ComponentDependenciesColumns holds the columns for the "component_dependencies" table.
	ComponentDependenciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"RUNTIME", "BUILD", "OPTIONAL", "PEER"}, Default: "RUNTIME"},
		{Name: "dependency_name", Type: field.TypeString},
		{Name: "dependency_version", Type: field.TypeString},
		{Name: "version_range", Type: field.TypeString},
		{Name: "is_required", Type: field.TypeBool, Default: true},
		{Name: "condition", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "component_dependencies", Type: field.TypeString},
	}
	// ComponentDependenciesTable holds the schema information for the "component_dependencies" table.
	ComponentDependenciesTable = &schema.Table{
		Name:       "component_dependencies",
		Columns:    ComponentDependenciesColumns,
		PrimaryKey: []*schema.Column{ComponentDependenciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "component_dependencies_components_dependencies",
				Columns:    []*schema.Column{ComponentDependenciesColumns[8]},
				RefColumns: []*schema.Column{ComponentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "componentdependency_type",
				Unique:  false,
				Columns: []*schema.Column{ComponentDependenciesColumns[1]},
			},
			{
				Name:    "componentdependency_is_required",
				Unique:  false,
				Columns: []*schema.Column{ComponentDependenciesColumns[5]},
			},
			{
				Name:    "componentdependency_dependency_name_dependency_version_component_dependencies",
				Unique:  true,
				Columns: []*schema.Column{ComponentDependenciesColumns[2], ComponentDependenciesColumns[3], ComponentDependenciesColumns[8]},
			},
		},
	}
	// ForksColumns holds the columns for the "forks" table.
	ForksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "fork_url", Type: field.TypeString},
		{Name: "fork_owner", Type: field.TypeString},
		{Name: "fork_name", Type: field.TypeString},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "last_sync", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "repository_forks", Type: field.TypeString},
	}
	// ForksTable holds the schema information for the "forks" table.
	ForksTable = &schema.Table{
		Name:       "forks",
		Columns:    ForksColumns,
		PrimaryKey: []*schema.Column{ForksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "forks_repositories_forks",
				Columns:    []*schema.Column{ForksColumns[8]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "fork_fork_owner_fork_name_repository_forks",
				Unique:  true,
				Columns: []*schema.Column{ForksColumns[2], ForksColumns[3], ForksColumns[8]},
			},
			{
				Name:    "fork_is_active",
				Unique:  false,
				Columns: []*schema.Column{ForksColumns[4]},
			},
		},
	}
	// LocalConfigsColumns holds the columns for the "local_configs" table.
	LocalConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "value", Type: field.TypeString, Size: 2147483647},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"STRING", "INTEGER", "BOOLEAN", "JSON"}, Default: "STRING"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// LocalConfigsTable holds the schema information for the "local_configs" table.
	LocalConfigsTable = &schema.Table{
		Name:       "local_configs",
		Columns:    LocalConfigsColumns,
		PrimaryKey: []*schema.Column{LocalConfigsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "localconfig_type",
				Unique:  false,
				Columns: []*schema.Column{LocalConfigsColumns[3]},
			},
		},
	}
	// PromptsColumns holds the columns for the "prompts" table.
	PromptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "namespace", Type: field.TypeString, Default: "default"},
		{Name: "version", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "author", Type: field.TypeString},
		{Name: "license", Type: field.TypeString},
		{Name: "homepage", Type: field.TypeString, Nullable: true},
		{Name: "documentation", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "categories", Type: field.TypeJSON, Nullable: true},
		{Name: "keywords", Type: field.TypeJSON, Nullable: true},
		{Name: "stability", Type: field.TypeEnum, Enums: []string{"EXPERIMENTAL", "BETA", "STABLE", "DEPRECATED"}, Default: "EXPERIMENTAL"},
		{Name: "maturity", Type: field.TypeEnum, Enums: []string{"ALPHA", "BETA", "STABLE", "MATURE"}, Default: "ALPHA"},
		{Name: "forge_version", Type: field.TypeString},
		{Name: "platforms", Type: field.TypeJSON, Nullable: true},
		{Name: "spec", Type: field.TypeString, Size: 2147483647},
		{Name: "spec_hash", Type: field.TypeString},
		{Name: "is_installed", Type: field.TypeBool, Default: false},
		{Name: "install_path", Type: field.TypeString, Nullable: true},
		{Name: "installed_at", Type: field.TypeTime, Nullable: true},
		{Name: "commit_hash", Type: field.TypeString},
		{Name: "branch", Type: field.TypeString, Default: "main"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "template_path", Type: field.TypeString, Nullable: true},
		{Name: "template_content", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "variables_schema", Type: field.TypeJSON, Nullable: true},
		{Name: "prompt_type", Type: field.TypeEnum, Enums: []string{"SYSTEM", "USER", "ASSISTANT", "FUNCTION", "TEMPLATE"}, Default: "TEMPLATE"},
		{Name: "context_window", Type: field.TypeInt, Nullable: true},
		{Name: "default_variables", Type: field.TypeJSON, Nullable: true},
		{Name: "required_variables", Type: field.TypeJSON, Nullable: true},
		{Name: "language", Type: field.TypeString, Default: "en"},
		{Name: "supports_streaming", Type: field.TypeBool, Default: false},
		{Name: "model_preferences", Type: field.TypeJSON, Nullable: true},
		{Name: "temperature", Type: field.TypeFloat64, Nullable: true},
		{Name: "max_tokens", Type: field.TypeInt, Nullable: true},
		{Name: "stop_sequences", Type: field.TypeJSON, Nullable: true},
		{Name: "repository_prompts", Type: field.TypeString},
	}
	// PromptsTable holds the schema information for the "prompts" table.
	PromptsTable = &schema.Table{
		Name:       "prompts",
		Columns:    PromptsColumns,
		PrimaryKey: []*schema.Column{PromptsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "prompts_repositories_prompts",
				Columns:    []*schema.Column{PromptsColumns[38]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "prompt_prompt_type",
				Unique:  false,
				Columns: []*schema.Column{PromptsColumns[28]},
			},
			{
				Name:    "prompt_is_installed",
				Unique:  false,
				Columns: []*schema.Column{PromptsColumns[18]},
			},
			{
				Name:    "prompt_stability",
				Unique:  false,
				Columns: []*schema.Column{PromptsColumns[12]},
			},
			{
				Name:    "prompt_language",
				Unique:  false,
				Columns: []*schema.Column{PromptsColumns[32]},
			},
			{
				Name:    "prompt_name_version_repository_prompts",
				Unique:  true,
				Columns: []*schema.Column{PromptsColumns[1], PromptsColumns[3], PromptsColumns[38]},
			},
		},
	}
	// PromptDependenciesColumns holds the columns for the "prompt_dependencies" table.
	PromptDependenciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"RUNTIME", "BUILD", "OPTIONAL", "PEER"}, Default: "RUNTIME"},
		{Name: "dependency_name", Type: field.TypeString},
		{Name: "dependency_version", Type: field.TypeString},
		{Name: "version_range", Type: field.TypeString},
		{Name: "is_required", Type: field.TypeBool, Default: true},
		{Name: "condition", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "prompt_dependencies", Type: field.TypeString},
	}
	// PromptDependenciesTable holds the schema information for the "prompt_dependencies" table.
	PromptDependenciesTable = &schema.Table{
		Name:       "prompt_dependencies",
		Columns:    PromptDependenciesColumns,
		PrimaryKey: []*schema.Column{PromptDependenciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "prompt_dependencies_prompts_dependencies",
				Columns:    []*schema.Column{PromptDependenciesColumns[8]},
				RefColumns: []*schema.Column{PromptsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "promptdependency_type",
				Unique:  false,
				Columns: []*schema.Column{PromptDependenciesColumns[1]},
			},
			{
				Name:    "promptdependency_is_required",
				Unique:  false,
				Columns: []*schema.Column{PromptDependenciesColumns[5]},
			},
			{
				Name:    "promptdependency_dependency_name_dependency_version_prompt_dependencies",
				Unique:  true,
				Columns: []*schema.Column{PromptDependenciesColumns[2], PromptDependenciesColumns[3], PromptDependenciesColumns[8]},
			},
		},
	}
	// RepositoriesColumns holds the columns for the "repositories" table.
	RepositoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "url", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"GITHUB", "GITLAB", "BITBUCKET", "LOCAL", "OTHER"}, Default: "GITHUB"},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "default_branch", Type: field.TypeString, Default: "main"},
		{Name: "last_sync", Type: field.TypeTime, Nullable: true},
		{Name: "sync_status", Type: field.TypeEnum, Enums: []string{"NEVER_SYNCED", "SYNCING", "UP_TO_DATE", "BEHIND", "AHEAD", "DIVERGED", "ERROR"}, Default: "NEVER_SYNCED"},
		{Name: "manifest", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "manifest_hash", Type: field.TypeString, Nullable: true},
		{Name: "has_write_access", Type: field.TypeBool, Default: false},
		{Name: "access_token", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// RepositoriesTable holds the schema information for the "repositories" table.
	RepositoriesTable = &schema.Table{
		Name:       "repositories",
		Columns:    RepositoriesColumns,
		PrimaryKey: []*schema.Column{RepositoriesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "repository_type",
				Unique:  false,
				Columns: []*schema.Column{RepositoriesColumns[3]},
			},
			{
				Name:    "repository_is_active",
				Unique:  false,
				Columns: []*schema.Column{RepositoriesColumns[4]},
			},
			{
				Name:    "repository_sync_status",
				Unique:  false,
				Columns: []*schema.Column{RepositoriesColumns[7]},
			},
		},
	}
	// SyncOperationsColumns holds the columns for the "sync_operations" table.
	SyncOperationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"PULL", "PUSH", "CLONE", "FORK", "MERGE"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PENDING", "RUNNING", "COMPLETED", "FAILED", "CANCELLED"}, Default: "PENDING"},
		{Name: "direction", Type: field.TypeEnum, Enums: []string{"UPSTREAM_TO_LOCAL", "LOCAL_TO_UPSTREAM", "BIDIRECTIONAL"}},
		{Name: "repository_id", Type: field.TypeString, Nullable: true},
		{Name: "component_id", Type: field.TypeString, Nullable: true},
		{Name: "source_commit", Type: field.TypeString, Nullable: true},
		{Name: "target_commit", Type: field.TypeString, Nullable: true},
		{Name: "branch", Type: field.TypeString, Nullable: true},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "error_message", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "total_steps", Type: field.TypeInt, Default: 1},
		{Name: "completed_steps", Type: field.TypeInt, Default: 0},
	}
	// SyncOperationsTable holds the schema information for the "sync_operations" table.
	SyncOperationsTable = &schema.Table{
		Name:       "sync_operations",
		Columns:    SyncOperationsColumns,
		PrimaryKey: []*schema.Column{SyncOperationsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "syncoperation_status",
				Unique:  false,
				Columns: []*schema.Column{SyncOperationsColumns[2]},
			},
			{
				Name:    "syncoperation_type",
				Unique:  false,
				Columns: []*schema.Column{SyncOperationsColumns[1]},
			},
			{
				Name:    "syncoperation_started_at",
				Unique:  false,
				Columns: []*schema.Column{SyncOperationsColumns[9]},
			},
		},
	}
	// ToolsColumns holds the columns for the "tools" table.
	ToolsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "namespace", Type: field.TypeString, Default: "default"},
		{Name: "version", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "author", Type: field.TypeString},
		{Name: "license", Type: field.TypeString},
		{Name: "homepage", Type: field.TypeString, Nullable: true},
		{Name: "documentation", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "categories", Type: field.TypeJSON, Nullable: true},
		{Name: "keywords", Type: field.TypeJSON, Nullable: true},
		{Name: "stability", Type: field.TypeEnum, Enums: []string{"EXPERIMENTAL", "BETA", "STABLE", "DEPRECATED"}, Default: "EXPERIMENTAL"},
		{Name: "maturity", Type: field.TypeEnum, Enums: []string{"ALPHA", "BETA", "STABLE", "MATURE"}, Default: "ALPHA"},
		{Name: "forge_version", Type: field.TypeString},
		{Name: "platforms", Type: field.TypeJSON, Nullable: true},
		{Name: "spec", Type: field.TypeString, Size: 2147483647},
		{Name: "spec_hash", Type: field.TypeString},
		{Name: "is_installed", Type: field.TypeBool, Default: false},
		{Name: "install_path", Type: field.TypeString, Nullable: true},
		{Name: "installed_at", Type: field.TypeTime, Nullable: true},
		{Name: "commit_hash", Type: field.TypeString},
		{Name: "branch", Type: field.TypeString, Default: "main"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "execution_type", Type: field.TypeEnum, Enums: []string{"MCP", "HTTP", "BINARY", "FUNCTION"}, Default: "MCP"},
		{Name: "schema_path", Type: field.TypeString, Nullable: true},
		{Name: "server_config", Type: field.TypeJSON, Nullable: true},
		{Name: "capabilities", Type: field.TypeJSON, Nullable: true},
		{Name: "entry_point", Type: field.TypeString, Nullable: true},
		{Name: "environment_variables", Type: field.TypeJSON, Nullable: true},
		{Name: "required_permissions", Type: field.TypeJSON, Nullable: true},
		{Name: "timeout_seconds", Type: field.TypeInt, Default: 30},
		{Name: "supports_streaming", Type: field.TypeBool, Default: false},
		{Name: "input_schema", Type: field.TypeJSON, Nullable: true},
		{Name: "output_schema", Type: field.TypeJSON, Nullable: true},
		{Name: "repository_tools", Type: field.TypeString},
	}
	// ToolsTable holds the schema information for the "tools" table.
	ToolsTable = &schema.Table{
		Name:       "tools",
		Columns:    ToolsColumns,
		PrimaryKey: []*schema.Column{ToolsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tools_repositories_tools",
				Columns:    []*schema.Column{ToolsColumns[36]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "tool_execution_type",
				Unique:  false,
				Columns: []*schema.Column{ToolsColumns[25]},
			},
			{
				Name:    "tool_is_installed",
				Unique:  false,
				Columns: []*schema.Column{ToolsColumns[18]},
			},
			{
				Name:    "tool_stability",
				Unique:  false,
				Columns: []*schema.Column{ToolsColumns[12]},
			},
			{
				Name:    "tool_name_version_repository_tools",
				Unique:  true,
				Columns: []*schema.Column{ToolsColumns[1], ToolsColumns[3], ToolsColumns[36]},
			},
		},
	}
	// ToolDependenciesColumns holds the columns for the "tool_dependencies" table.
	ToolDependenciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"RUNTIME", "BUILD", "OPTIONAL", "PEER"}, Default: "RUNTIME"},
		{Name: "dependency_name", Type: field.TypeString},
		{Name: "dependency_version", Type: field.TypeString},
		{Name: "version_range", Type: field.TypeString},
		{Name: "is_required", Type: field.TypeBool, Default: true},
		{Name: "condition", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "tool_dependencies", Type: field.TypeString},
	}
	// ToolDependenciesTable holds the schema information for the "tool_dependencies" table.
	ToolDependenciesTable = &schema.Table{
		Name:       "tool_dependencies",
		Columns:    ToolDependenciesColumns,
		PrimaryKey: []*schema.Column{ToolDependenciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tool_dependencies_tools_dependencies",
				Columns:    []*schema.Column{ToolDependenciesColumns[8]},
				RefColumns: []*schema.Column{ToolsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "tooldependency_type",
				Unique:  false,
				Columns: []*schema.Column{ToolDependenciesColumns[1]},
			},
			{
				Name:    "tooldependency_is_required",
				Unique:  false,
				Columns: []*schema.Column{ToolDependenciesColumns[5]},
			},
			{
				Name:    "tooldependency_dependency_name_dependency_version_tool_dependencies",
				Unique:  true,
				Columns: []*schema.Column{ToolDependenciesColumns[2], ToolDependenciesColumns[3], ToolDependenciesColumns[8]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AgentsTable,
		AgentDependenciesTable,
		ComponentsTable,
		ComponentDependenciesTable,
		ForksTable,
		LocalConfigsTable,
		PromptsTable,
		PromptDependenciesTable,
		RepositoriesTable,
		SyncOperationsTable,
		ToolsTable,
		ToolDependenciesTable,
	}
)

func init() {
	AgentsTable.ForeignKeys[0].RefTable = RepositoriesTable
	AgentDependenciesTable.ForeignKeys[0].RefTable = AgentsTable
	ComponentsTable.ForeignKeys[0].RefTable = RepositoriesTable
	ComponentDependenciesTable.ForeignKeys[0].RefTable = ComponentsTable
	ForksTable.ForeignKeys[0].RefTable = RepositoriesTable
	PromptsTable.ForeignKeys[0].RefTable = RepositoriesTable
	PromptDependenciesTable.ForeignKeys[0].RefTable = PromptsTable
	ToolsTable.ForeignKeys[0].RefTable = RepositoriesTable
	ToolDependenciesTable.ForeignKeys[0].RefTable = ToolsTable
}
