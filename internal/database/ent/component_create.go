// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/component"
	"github.com/denkhaus/agentforge/internal/database/ent/componentdependency"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
)

// ComponentCreate is the builder for creating a Component entity.
type ComponentCreate struct {
	config
	mutation *ComponentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *ComponentCreate) SetName(s string) *ComponentCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNamespace sets the "namespace" field.
func (cc *ComponentCreate) SetNamespace(s string) *ComponentCreate {
	cc.mutation.SetNamespace(s)
	return cc
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableNamespace(s *string) *ComponentCreate {
	if s != nil {
		cc.SetNamespace(*s)
	}
	return cc
}

// SetVersion sets the "version" field.
func (cc *ComponentCreate) SetVersion(s string) *ComponentCreate {
	cc.mutation.SetVersion(s)
	return cc
}

// SetKind sets the "kind" field.
func (cc *ComponentCreate) SetKind(c component.Kind) *ComponentCreate {
	cc.mutation.SetKind(c)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ComponentCreate) SetDescription(s string) *ComponentCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetAuthor sets the "author" field.
func (cc *ComponentCreate) SetAuthor(s string) *ComponentCreate {
	cc.mutation.SetAuthor(s)
	return cc
}

// SetLicense sets the "license" field.
func (cc *ComponentCreate) SetLicense(s string) *ComponentCreate {
	cc.mutation.SetLicense(s)
	return cc
}

// SetHomepage sets the "homepage" field.
func (cc *ComponentCreate) SetHomepage(s string) *ComponentCreate {
	cc.mutation.SetHomepage(s)
	return cc
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableHomepage(s *string) *ComponentCreate {
	if s != nil {
		cc.SetHomepage(*s)
	}
	return cc
}

// SetDocumentation sets the "documentation" field.
func (cc *ComponentCreate) SetDocumentation(s string) *ComponentCreate {
	cc.mutation.SetDocumentation(s)
	return cc
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableDocumentation(s *string) *ComponentCreate {
	if s != nil {
		cc.SetDocumentation(*s)
	}
	return cc
}

// SetTags sets the "tags" field.
func (cc *ComponentCreate) SetTags(s []string) *ComponentCreate {
	cc.mutation.SetTags(s)
	return cc
}

// SetCategories sets the "categories" field.
func (cc *ComponentCreate) SetCategories(s []string) *ComponentCreate {
	cc.mutation.SetCategories(s)
	return cc
}

// SetKeywords sets the "keywords" field.
func (cc *ComponentCreate) SetKeywords(s []string) *ComponentCreate {
	cc.mutation.SetKeywords(s)
	return cc
}

// SetStability sets the "stability" field.
func (cc *ComponentCreate) SetStability(c component.Stability) *ComponentCreate {
	cc.mutation.SetStability(c)
	return cc
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableStability(c *component.Stability) *ComponentCreate {
	if c != nil {
		cc.SetStability(*c)
	}
	return cc
}

// SetMaturity sets the "maturity" field.
func (cc *ComponentCreate) SetMaturity(c component.Maturity) *ComponentCreate {
	cc.mutation.SetMaturity(c)
	return cc
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableMaturity(c *component.Maturity) *ComponentCreate {
	if c != nil {
		cc.SetMaturity(*c)
	}
	return cc
}

// SetForgeVersion sets the "forge_version" field.
func (cc *ComponentCreate) SetForgeVersion(s string) *ComponentCreate {
	cc.mutation.SetForgeVersion(s)
	return cc
}

// SetPlatforms sets the "platforms" field.
func (cc *ComponentCreate) SetPlatforms(s []string) *ComponentCreate {
	cc.mutation.SetPlatforms(s)
	return cc
}

// SetSpec sets the "spec" field.
func (cc *ComponentCreate) SetSpec(s string) *ComponentCreate {
	cc.mutation.SetSpec(s)
	return cc
}

// SetSpecHash sets the "spec_hash" field.
func (cc *ComponentCreate) SetSpecHash(s string) *ComponentCreate {
	cc.mutation.SetSpecHash(s)
	return cc
}

// SetIsInstalled sets the "is_installed" field.
func (cc *ComponentCreate) SetIsInstalled(b bool) *ComponentCreate {
	cc.mutation.SetIsInstalled(b)
	return cc
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableIsInstalled(b *bool) *ComponentCreate {
	if b != nil {
		cc.SetIsInstalled(*b)
	}
	return cc
}

// SetInstallPath sets the "install_path" field.
func (cc *ComponentCreate) SetInstallPath(s string) *ComponentCreate {
	cc.mutation.SetInstallPath(s)
	return cc
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableInstallPath(s *string) *ComponentCreate {
	if s != nil {
		cc.SetInstallPath(*s)
	}
	return cc
}

// SetInstalledAt sets the "installed_at" field.
func (cc *ComponentCreate) SetInstalledAt(t time.Time) *ComponentCreate {
	cc.mutation.SetInstalledAt(t)
	return cc
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableInstalledAt(t *time.Time) *ComponentCreate {
	if t != nil {
		cc.SetInstalledAt(*t)
	}
	return cc
}

// SetCommitHash sets the "commit_hash" field.
func (cc *ComponentCreate) SetCommitHash(s string) *ComponentCreate {
	cc.mutation.SetCommitHash(s)
	return cc
}

// SetBranch sets the "branch" field.
func (cc *ComponentCreate) SetBranch(s string) *ComponentCreate {
	cc.mutation.SetBranch(s)
	return cc
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableBranch(s *string) *ComponentCreate {
	if s != nil {
		cc.SetBranch(*s)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ComponentCreate) SetCreatedAt(t time.Time) *ComponentCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableCreatedAt(t *time.Time) *ComponentCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ComponentCreate) SetUpdatedAt(t time.Time) *ComponentCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ComponentCreate) SetNillableUpdatedAt(t *time.Time) *ComponentCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ComponentCreate) SetID(s string) *ComponentCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (cc *ComponentCreate) SetRepositoryID(id string) *ComponentCreate {
	cc.mutation.SetRepositoryID(id)
	return cc
}

// SetRepository sets the "repository" edge to the Repository entity.
func (cc *ComponentCreate) SetRepository(r *Repository) *ComponentCreate {
	return cc.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the ComponentDependency entity by IDs.
func (cc *ComponentCreate) AddDependencyIDs(ids ...string) *ComponentCreate {
	cc.mutation.AddDependencyIDs(ids...)
	return cc
}

// AddDependencies adds the "dependencies" edges to the ComponentDependency entity.
func (cc *ComponentCreate) AddDependencies(c ...*ComponentDependency) *ComponentCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddDependencyIDs(ids...)
}

// Mutation returns the ComponentMutation object of the builder.
func (cc *ComponentCreate) Mutation() *ComponentMutation {
	return cc.mutation
}

// Save creates the Component in the database.
func (cc *ComponentCreate) Save(ctx context.Context) (*Component, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ComponentCreate) SaveX(ctx context.Context) *Component {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ComponentCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ComponentCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ComponentCreate) defaults() {
	if _, ok := cc.mutation.Namespace(); !ok {
		v := component.DefaultNamespace
		cc.mutation.SetNamespace(v)
	}
	if _, ok := cc.mutation.Stability(); !ok {
		v := component.DefaultStability
		cc.mutation.SetStability(v)
	}
	if _, ok := cc.mutation.Maturity(); !ok {
		v := component.DefaultMaturity
		cc.mutation.SetMaturity(v)
	}
	if _, ok := cc.mutation.IsInstalled(); !ok {
		v := component.DefaultIsInstalled
		cc.mutation.SetIsInstalled(v)
	}
	if _, ok := cc.mutation.Branch(); !ok {
		v := component.DefaultBranch
		cc.mutation.SetBranch(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := component.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := component.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ComponentCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Component.name"`)}
	}
	if _, ok := cc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "Component.namespace"`)}
	}
	if _, ok := cc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Component.version"`)}
	}
	if _, ok := cc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Component.kind"`)}
	}
	if v, ok := cc.mutation.Kind(); ok {
		if err := component.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Component.kind": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Component.description"`)}
	}
	if _, ok := cc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Component.author"`)}
	}
	if _, ok := cc.mutation.License(); !ok {
		return &ValidationError{Name: "license", err: errors.New(`ent: missing required field "Component.license"`)}
	}
	if _, ok := cc.mutation.Stability(); !ok {
		return &ValidationError{Name: "stability", err: errors.New(`ent: missing required field "Component.stability"`)}
	}
	if v, ok := cc.mutation.Stability(); ok {
		if err := component.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Component.stability": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Maturity(); !ok {
		return &ValidationError{Name: "maturity", err: errors.New(`ent: missing required field "Component.maturity"`)}
	}
	if v, ok := cc.mutation.Maturity(); ok {
		if err := component.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Component.maturity": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ForgeVersion(); !ok {
		return &ValidationError{Name: "forge_version", err: errors.New(`ent: missing required field "Component.forge_version"`)}
	}
	if _, ok := cc.mutation.Spec(); !ok {
		return &ValidationError{Name: "spec", err: errors.New(`ent: missing required field "Component.spec"`)}
	}
	if _, ok := cc.mutation.SpecHash(); !ok {
		return &ValidationError{Name: "spec_hash", err: errors.New(`ent: missing required field "Component.spec_hash"`)}
	}
	if _, ok := cc.mutation.IsInstalled(); !ok {
		return &ValidationError{Name: "is_installed", err: errors.New(`ent: missing required field "Component.is_installed"`)}
	}
	if _, ok := cc.mutation.CommitHash(); !ok {
		return &ValidationError{Name: "commit_hash", err: errors.New(`ent: missing required field "Component.commit_hash"`)}
	}
	if _, ok := cc.mutation.Branch(); !ok {
		return &ValidationError{Name: "branch", err: errors.New(`ent: missing required field "Component.branch"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Component.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Component.updated_at"`)}
	}
	if len(cc.mutation.RepositoryIDs()) == 0 {
		return &ValidationError{Name: "repository", err: errors.New(`ent: missing required edge "Component.repository"`)}
	}
	return nil
}

func (cc *ComponentCreate) sqlSave(ctx context.Context) (*Component, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Component.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ComponentCreate) createSpec() (*Component, *sqlgraph.CreateSpec) {
	var (
		_node = &Component{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(component.Table, sqlgraph.NewFieldSpec(component.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(component.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Namespace(); ok {
		_spec.SetField(component.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := cc.mutation.Version(); ok {
		_spec.SetField(component.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := cc.mutation.Kind(); ok {
		_spec.SetField(component.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(component.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Author(); ok {
		_spec.SetField(component.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := cc.mutation.License(); ok {
		_spec.SetField(component.FieldLicense, field.TypeString, value)
		_node.License = value
	}
	if value, ok := cc.mutation.Homepage(); ok {
		_spec.SetField(component.FieldHomepage, field.TypeString, value)
		_node.Homepage = &value
	}
	if value, ok := cc.mutation.Documentation(); ok {
		_spec.SetField(component.FieldDocumentation, field.TypeString, value)
		_node.Documentation = &value
	}
	if value, ok := cc.mutation.Tags(); ok {
		_spec.SetField(component.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := cc.mutation.Categories(); ok {
		_spec.SetField(component.FieldCategories, field.TypeJSON, value)
		_node.Categories = value
	}
	if value, ok := cc.mutation.Keywords(); ok {
		_spec.SetField(component.FieldKeywords, field.TypeJSON, value)
		_node.Keywords = value
	}
	if value, ok := cc.mutation.Stability(); ok {
		_spec.SetField(component.FieldStability, field.TypeEnum, value)
		_node.Stability = value
	}
	if value, ok := cc.mutation.Maturity(); ok {
		_spec.SetField(component.FieldMaturity, field.TypeEnum, value)
		_node.Maturity = value
	}
	if value, ok := cc.mutation.ForgeVersion(); ok {
		_spec.SetField(component.FieldForgeVersion, field.TypeString, value)
		_node.ForgeVersion = value
	}
	if value, ok := cc.mutation.Platforms(); ok {
		_spec.SetField(component.FieldPlatforms, field.TypeJSON, value)
		_node.Platforms = value
	}
	if value, ok := cc.mutation.Spec(); ok {
		_spec.SetField(component.FieldSpec, field.TypeString, value)
		_node.Spec = value
	}
	if value, ok := cc.mutation.SpecHash(); ok {
		_spec.SetField(component.FieldSpecHash, field.TypeString, value)
		_node.SpecHash = value
	}
	if value, ok := cc.mutation.IsInstalled(); ok {
		_spec.SetField(component.FieldIsInstalled, field.TypeBool, value)
		_node.IsInstalled = value
	}
	if value, ok := cc.mutation.InstallPath(); ok {
		_spec.SetField(component.FieldInstallPath, field.TypeString, value)
		_node.InstallPath = &value
	}
	if value, ok := cc.mutation.InstalledAt(); ok {
		_spec.SetField(component.FieldInstalledAt, field.TypeTime, value)
		_node.InstalledAt = &value
	}
	if value, ok := cc.mutation.CommitHash(); ok {
		_spec.SetField(component.FieldCommitHash, field.TypeString, value)
		_node.CommitHash = value
	}
	if value, ok := cc.mutation.Branch(); ok {
		_spec.SetField(component.FieldBranch, field.TypeString, value)
		_node.Branch = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(component.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(component.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   component.RepositoryTable,
			Columns: []string{component.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_components = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.DependenciesTable,
			Columns: []string{component.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(componentdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ComponentCreateBulk is the builder for creating many Component entities in bulk.
type ComponentCreateBulk struct {
	config
	err      error
	builders []*ComponentCreate
}

// Save creates the Component entities in the database.
func (ccb *ComponentCreateBulk) Save(ctx context.Context) ([]*Component, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Component, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComponentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ComponentCreateBulk) SaveX(ctx context.Context) []*Component {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ComponentCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ComponentCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
