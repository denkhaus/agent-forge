// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/denkhaus/agentforge/internal/database/ent/fork"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
)

// Fork is the model entity for the Fork schema.
type Fork struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ForkURL holds the value of the "fork_url" field.
	ForkURL string `json:"fork_url,omitempty"`
	// ForkOwner holds the value of the "fork_owner" field.
	ForkOwner string `json:"fork_owner,omitempty"`
	// ForkName holds the value of the "fork_name" field.
	ForkName string `json:"fork_name,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// LastSync holds the value of the "last_sync" field.
	LastSync *time.Time `json:"last_sync,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ForkQuery when eager-loading is set.
	Edges            ForkEdges `json:"edges"`
	repository_forks *string
	selectValues     sql.SelectValues
}

// ForkEdges holds the relations/edges for other nodes in the graph.
type ForkEdges struct {
	// OriginalRepo holds the value of the original_repo edge.
	OriginalRepo *Repository `json:"original_repo,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OriginalRepoOrErr returns the OriginalRepo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ForkEdges) OriginalRepoOrErr() (*Repository, error) {
	if e.OriginalRepo != nil {
		return e.OriginalRepo, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: repository.Label}
	}
	return nil, &NotLoadedError{edge: "original_repo"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fork) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fork.FieldIsActive:
			values[i] = new(sql.NullBool)
		case fork.FieldID, fork.FieldForkURL, fork.FieldForkOwner, fork.FieldForkName:
			values[i] = new(sql.NullString)
		case fork.FieldLastSync, fork.FieldCreatedAt, fork.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case fork.ForeignKeys[0]: // repository_forks
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fork fields.
func (f *Fork) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fork.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				f.ID = value.String
			}
		case fork.FieldForkURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fork_url", values[i])
			} else if value.Valid {
				f.ForkURL = value.String
			}
		case fork.FieldForkOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fork_owner", values[i])
			} else if value.Valid {
				f.ForkOwner = value.String
			}
		case fork.FieldForkName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fork_name", values[i])
			} else if value.Valid {
				f.ForkName = value.String
			}
		case fork.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				f.IsActive = value.Bool
			}
		case fork.FieldLastSync:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_sync", values[i])
			} else if value.Valid {
				f.LastSync = new(time.Time)
				*f.LastSync = value.Time
			}
		case fork.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case fork.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case fork.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repository_forks", values[i])
			} else if value.Valid {
				f.repository_forks = new(string)
				*f.repository_forks = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Fork.
// This includes values selected through modifiers, order, etc.
func (f *Fork) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryOriginalRepo queries the "original_repo" edge of the Fork entity.
func (f *Fork) QueryOriginalRepo() *RepositoryQuery {
	return NewForkClient(f.config).QueryOriginalRepo(f)
}

// Update returns a builder for updating this Fork.
// Note that you need to call Fork.Unwrap() before calling this method if this Fork
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fork) Update() *ForkUpdateOne {
	return NewForkClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Fork entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fork) Unwrap() *Fork {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fork is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fork) String() string {
	var builder strings.Builder
	builder.WriteString("Fork(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("fork_url=")
	builder.WriteString(f.ForkURL)
	builder.WriteString(", ")
	builder.WriteString("fork_owner=")
	builder.WriteString(f.ForkOwner)
	builder.WriteString(", ")
	builder.WriteString("fork_name=")
	builder.WriteString(f.ForkName)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", f.IsActive))
	builder.WriteString(", ")
	if v := f.LastSync; v != nil {
		builder.WriteString("last_sync=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Forks is a parsable slice of Fork.
type Forks []*Fork
