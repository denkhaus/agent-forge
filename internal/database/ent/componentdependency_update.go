// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/component"
	"github.com/denkhaus/agentforge/internal/database/ent/componentdependency"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
)

// ComponentDependencyUpdate is the builder for updating ComponentDependency entities.
type ComponentDependencyUpdate struct {
	config
	hooks    []Hook
	mutation *ComponentDependencyMutation
}

// Where appends a list predicates to the ComponentDependencyUpdate builder.
func (cdu *ComponentDependencyUpdate) Where(ps ...predicate.ComponentDependency) *ComponentDependencyUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetType sets the "type" field.
func (cdu *ComponentDependencyUpdate) SetType(c componentdependency.Type) *ComponentDependencyUpdate {
	cdu.mutation.SetType(c)
	return cdu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cdu *ComponentDependencyUpdate) SetNillableType(c *componentdependency.Type) *ComponentDependencyUpdate {
	if c != nil {
		cdu.SetType(*c)
	}
	return cdu
}

// SetDependencyName sets the "dependency_name" field.
func (cdu *ComponentDependencyUpdate) SetDependencyName(s string) *ComponentDependencyUpdate {
	cdu.mutation.SetDependencyName(s)
	return cdu
}

// SetNillableDependencyName sets the "dependency_name" field if the given value is not nil.
func (cdu *ComponentDependencyUpdate) SetNillableDependencyName(s *string) *ComponentDependencyUpdate {
	if s != nil {
		cdu.SetDependencyName(*s)
	}
	return cdu
}

// SetDependencyVersion sets the "dependency_version" field.
func (cdu *ComponentDependencyUpdate) SetDependencyVersion(s string) *ComponentDependencyUpdate {
	cdu.mutation.SetDependencyVersion(s)
	return cdu
}

// SetNillableDependencyVersion sets the "dependency_version" field if the given value is not nil.
func (cdu *ComponentDependencyUpdate) SetNillableDependencyVersion(s *string) *ComponentDependencyUpdate {
	if s != nil {
		cdu.SetDependencyVersion(*s)
	}
	return cdu
}

// SetVersionRange sets the "version_range" field.
func (cdu *ComponentDependencyUpdate) SetVersionRange(s string) *ComponentDependencyUpdate {
	cdu.mutation.SetVersionRange(s)
	return cdu
}

// SetNillableVersionRange sets the "version_range" field if the given value is not nil.
func (cdu *ComponentDependencyUpdate) SetNillableVersionRange(s *string) *ComponentDependencyUpdate {
	if s != nil {
		cdu.SetVersionRange(*s)
	}
	return cdu
}

// SetIsRequired sets the "is_required" field.
func (cdu *ComponentDependencyUpdate) SetIsRequired(b bool) *ComponentDependencyUpdate {
	cdu.mutation.SetIsRequired(b)
	return cdu
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (cdu *ComponentDependencyUpdate) SetNillableIsRequired(b *bool) *ComponentDependencyUpdate {
	if b != nil {
		cdu.SetIsRequired(*b)
	}
	return cdu
}

// SetCondition sets the "condition" field.
func (cdu *ComponentDependencyUpdate) SetCondition(s string) *ComponentDependencyUpdate {
	cdu.mutation.SetCondition(s)
	return cdu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (cdu *ComponentDependencyUpdate) SetNillableCondition(s *string) *ComponentDependencyUpdate {
	if s != nil {
		cdu.SetCondition(*s)
	}
	return cdu
}

// ClearCondition clears the value of the "condition" field.
func (cdu *ComponentDependencyUpdate) ClearCondition() *ComponentDependencyUpdate {
	cdu.mutation.ClearCondition()
	return cdu
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (cdu *ComponentDependencyUpdate) SetComponentID(id string) *ComponentDependencyUpdate {
	cdu.mutation.SetComponentID(id)
	return cdu
}

// SetComponent sets the "component" edge to the Component entity.
func (cdu *ComponentDependencyUpdate) SetComponent(c *Component) *ComponentDependencyUpdate {
	return cdu.SetComponentID(c.ID)
}

// Mutation returns the ComponentDependencyMutation object of the builder.
func (cdu *ComponentDependencyUpdate) Mutation() *ComponentDependencyMutation {
	return cdu.mutation
}

// ClearComponent clears the "component" edge to the Component entity.
func (cdu *ComponentDependencyUpdate) ClearComponent() *ComponentDependencyUpdate {
	cdu.mutation.ClearComponent()
	return cdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *ComponentDependencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cdu.sqlSave, cdu.mutation, cdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *ComponentDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *ComponentDependencyUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *ComponentDependencyUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdu *ComponentDependencyUpdate) check() error {
	if v, ok := cdu.mutation.GetType(); ok {
		if err := componentdependency.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ComponentDependency.type": %w`, err)}
		}
	}
	if cdu.mutation.ComponentCleared() && len(cdu.mutation.ComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ComponentDependency.component"`)
	}
	return nil
}

func (cdu *ComponentDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(componentdependency.Table, componentdependency.Columns, sqlgraph.NewFieldSpec(componentdependency.FieldID, field.TypeString))
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdu.mutation.GetType(); ok {
		_spec.SetField(componentdependency.FieldType, field.TypeEnum, value)
	}
	if value, ok := cdu.mutation.DependencyName(); ok {
		_spec.SetField(componentdependency.FieldDependencyName, field.TypeString, value)
	}
	if value, ok := cdu.mutation.DependencyVersion(); ok {
		_spec.SetField(componentdependency.FieldDependencyVersion, field.TypeString, value)
	}
	if value, ok := cdu.mutation.VersionRange(); ok {
		_spec.SetField(componentdependency.FieldVersionRange, field.TypeString, value)
	}
	if value, ok := cdu.mutation.IsRequired(); ok {
		_spec.SetField(componentdependency.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := cdu.mutation.Condition(); ok {
		_spec.SetField(componentdependency.FieldCondition, field.TypeString, value)
	}
	if cdu.mutation.ConditionCleared() {
		_spec.ClearField(componentdependency.FieldCondition, field.TypeString)
	}
	if cdu.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   componentdependency.ComponentTable,
			Columns: []string{componentdependency.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   componentdependency.ComponentTable,
			Columns: []string{componentdependency.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{componentdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cdu.mutation.done = true
	return n, nil
}

// ComponentDependencyUpdateOne is the builder for updating a single ComponentDependency entity.
type ComponentDependencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ComponentDependencyMutation
}

// SetType sets the "type" field.
func (cduo *ComponentDependencyUpdateOne) SetType(c componentdependency.Type) *ComponentDependencyUpdateOne {
	cduo.mutation.SetType(c)
	return cduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cduo *ComponentDependencyUpdateOne) SetNillableType(c *componentdependency.Type) *ComponentDependencyUpdateOne {
	if c != nil {
		cduo.SetType(*c)
	}
	return cduo
}

// SetDependencyName sets the "dependency_name" field.
func (cduo *ComponentDependencyUpdateOne) SetDependencyName(s string) *ComponentDependencyUpdateOne {
	cduo.mutation.SetDependencyName(s)
	return cduo
}

// SetNillableDependencyName sets the "dependency_name" field if the given value is not nil.
func (cduo *ComponentDependencyUpdateOne) SetNillableDependencyName(s *string) *ComponentDependencyUpdateOne {
	if s != nil {
		cduo.SetDependencyName(*s)
	}
	return cduo
}

// SetDependencyVersion sets the "dependency_version" field.
func (cduo *ComponentDependencyUpdateOne) SetDependencyVersion(s string) *ComponentDependencyUpdateOne {
	cduo.mutation.SetDependencyVersion(s)
	return cduo
}

// SetNillableDependencyVersion sets the "dependency_version" field if the given value is not nil.
func (cduo *ComponentDependencyUpdateOne) SetNillableDependencyVersion(s *string) *ComponentDependencyUpdateOne {
	if s != nil {
		cduo.SetDependencyVersion(*s)
	}
	return cduo
}

// SetVersionRange sets the "version_range" field.
func (cduo *ComponentDependencyUpdateOne) SetVersionRange(s string) *ComponentDependencyUpdateOne {
	cduo.mutation.SetVersionRange(s)
	return cduo
}

// SetNillableVersionRange sets the "version_range" field if the given value is not nil.
func (cduo *ComponentDependencyUpdateOne) SetNillableVersionRange(s *string) *ComponentDependencyUpdateOne {
	if s != nil {
		cduo.SetVersionRange(*s)
	}
	return cduo
}

// SetIsRequired sets the "is_required" field.
func (cduo *ComponentDependencyUpdateOne) SetIsRequired(b bool) *ComponentDependencyUpdateOne {
	cduo.mutation.SetIsRequired(b)
	return cduo
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (cduo *ComponentDependencyUpdateOne) SetNillableIsRequired(b *bool) *ComponentDependencyUpdateOne {
	if b != nil {
		cduo.SetIsRequired(*b)
	}
	return cduo
}

// SetCondition sets the "condition" field.
func (cduo *ComponentDependencyUpdateOne) SetCondition(s string) *ComponentDependencyUpdateOne {
	cduo.mutation.SetCondition(s)
	return cduo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (cduo *ComponentDependencyUpdateOne) SetNillableCondition(s *string) *ComponentDependencyUpdateOne {
	if s != nil {
		cduo.SetCondition(*s)
	}
	return cduo
}

// ClearCondition clears the value of the "condition" field.
func (cduo *ComponentDependencyUpdateOne) ClearCondition() *ComponentDependencyUpdateOne {
	cduo.mutation.ClearCondition()
	return cduo
}

// SetComponentID sets the "component" edge to the Component entity by ID.
func (cduo *ComponentDependencyUpdateOne) SetComponentID(id string) *ComponentDependencyUpdateOne {
	cduo.mutation.SetComponentID(id)
	return cduo
}

// SetComponent sets the "component" edge to the Component entity.
func (cduo *ComponentDependencyUpdateOne) SetComponent(c *Component) *ComponentDependencyUpdateOne {
	return cduo.SetComponentID(c.ID)
}

// Mutation returns the ComponentDependencyMutation object of the builder.
func (cduo *ComponentDependencyUpdateOne) Mutation() *ComponentDependencyMutation {
	return cduo.mutation
}

// ClearComponent clears the "component" edge to the Component entity.
func (cduo *ComponentDependencyUpdateOne) ClearComponent() *ComponentDependencyUpdateOne {
	cduo.mutation.ClearComponent()
	return cduo
}

// Where appends a list predicates to the ComponentDependencyUpdate builder.
func (cduo *ComponentDependencyUpdateOne) Where(ps ...predicate.ComponentDependency) *ComponentDependencyUpdateOne {
	cduo.mutation.Where(ps...)
	return cduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *ComponentDependencyUpdateOne) Select(field string, fields ...string) *ComponentDependencyUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated ComponentDependency entity.
func (cduo *ComponentDependencyUpdateOne) Save(ctx context.Context) (*ComponentDependency, error) {
	return withHooks(ctx, cduo.sqlSave, cduo.mutation, cduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *ComponentDependencyUpdateOne) SaveX(ctx context.Context) *ComponentDependency {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *ComponentDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *ComponentDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cduo *ComponentDependencyUpdateOne) check() error {
	if v, ok := cduo.mutation.GetType(); ok {
		if err := componentdependency.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ComponentDependency.type": %w`, err)}
		}
	}
	if cduo.mutation.ComponentCleared() && len(cduo.mutation.ComponentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ComponentDependency.component"`)
	}
	return nil
}

func (cduo *ComponentDependencyUpdateOne) sqlSave(ctx context.Context) (_node *ComponentDependency, err error) {
	if err := cduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(componentdependency.Table, componentdependency.Columns, sqlgraph.NewFieldSpec(componentdependency.FieldID, field.TypeString))
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ComponentDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, componentdependency.FieldID)
		for _, f := range fields {
			if !componentdependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != componentdependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cduo.mutation.GetType(); ok {
		_spec.SetField(componentdependency.FieldType, field.TypeEnum, value)
	}
	if value, ok := cduo.mutation.DependencyName(); ok {
		_spec.SetField(componentdependency.FieldDependencyName, field.TypeString, value)
	}
	if value, ok := cduo.mutation.DependencyVersion(); ok {
		_spec.SetField(componentdependency.FieldDependencyVersion, field.TypeString, value)
	}
	if value, ok := cduo.mutation.VersionRange(); ok {
		_spec.SetField(componentdependency.FieldVersionRange, field.TypeString, value)
	}
	if value, ok := cduo.mutation.IsRequired(); ok {
		_spec.SetField(componentdependency.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := cduo.mutation.Condition(); ok {
		_spec.SetField(componentdependency.FieldCondition, field.TypeString, value)
	}
	if cduo.mutation.ConditionCleared() {
		_spec.ClearField(componentdependency.FieldCondition, field.TypeString)
	}
	if cduo.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   componentdependency.ComponentTable,
			Columns: []string{componentdependency.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   componentdependency.ComponentTable,
			Columns: []string{componentdependency.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ComponentDependency{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{componentdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cduo.mutation.done = true
	return _node, nil
}
