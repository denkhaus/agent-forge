// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
	"github.com/denkhaus/agentforge/internal/database/ent/tool"
	"github.com/denkhaus/agentforge/internal/database/ent/tooldependency"
)

// ToolUpdate is the builder for updating Tool entities.
type ToolUpdate struct {
	config
	hooks    []Hook
	mutation *ToolMutation
}

// Where appends a list predicates to the ToolUpdate builder.
func (tu *ToolUpdate) Where(ps ...predicate.Tool) *ToolUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *ToolUpdate) SetName(s string) *ToolUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableName(s *string) *ToolUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetNamespace sets the "namespace" field.
func (tu *ToolUpdate) SetNamespace(s string) *ToolUpdate {
	tu.mutation.SetNamespace(s)
	return tu
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableNamespace(s *string) *ToolUpdate {
	if s != nil {
		tu.SetNamespace(*s)
	}
	return tu
}

// SetVersion sets the "version" field.
func (tu *ToolUpdate) SetVersion(s string) *ToolUpdate {
	tu.mutation.SetVersion(s)
	return tu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableVersion(s *string) *ToolUpdate {
	if s != nil {
		tu.SetVersion(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *ToolUpdate) SetDescription(s string) *ToolUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableDescription(s *string) *ToolUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetAuthor sets the "author" field.
func (tu *ToolUpdate) SetAuthor(s string) *ToolUpdate {
	tu.mutation.SetAuthor(s)
	return tu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableAuthor(s *string) *ToolUpdate {
	if s != nil {
		tu.SetAuthor(*s)
	}
	return tu
}

// SetLicense sets the "license" field.
func (tu *ToolUpdate) SetLicense(s string) *ToolUpdate {
	tu.mutation.SetLicense(s)
	return tu
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableLicense(s *string) *ToolUpdate {
	if s != nil {
		tu.SetLicense(*s)
	}
	return tu
}

// SetHomepage sets the "homepage" field.
func (tu *ToolUpdate) SetHomepage(s string) *ToolUpdate {
	tu.mutation.SetHomepage(s)
	return tu
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableHomepage(s *string) *ToolUpdate {
	if s != nil {
		tu.SetHomepage(*s)
	}
	return tu
}

// ClearHomepage clears the value of the "homepage" field.
func (tu *ToolUpdate) ClearHomepage() *ToolUpdate {
	tu.mutation.ClearHomepage()
	return tu
}

// SetDocumentation sets the "documentation" field.
func (tu *ToolUpdate) SetDocumentation(s string) *ToolUpdate {
	tu.mutation.SetDocumentation(s)
	return tu
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableDocumentation(s *string) *ToolUpdate {
	if s != nil {
		tu.SetDocumentation(*s)
	}
	return tu
}

// ClearDocumentation clears the value of the "documentation" field.
func (tu *ToolUpdate) ClearDocumentation() *ToolUpdate {
	tu.mutation.ClearDocumentation()
	return tu
}

// SetTags sets the "tags" field.
func (tu *ToolUpdate) SetTags(s []string) *ToolUpdate {
	tu.mutation.SetTags(s)
	return tu
}

// AppendTags appends s to the "tags" field.
func (tu *ToolUpdate) AppendTags(s []string) *ToolUpdate {
	tu.mutation.AppendTags(s)
	return tu
}

// ClearTags clears the value of the "tags" field.
func (tu *ToolUpdate) ClearTags() *ToolUpdate {
	tu.mutation.ClearTags()
	return tu
}

// SetCategories sets the "categories" field.
func (tu *ToolUpdate) SetCategories(s []string) *ToolUpdate {
	tu.mutation.SetCategories(s)
	return tu
}

// AppendCategories appends s to the "categories" field.
func (tu *ToolUpdate) AppendCategories(s []string) *ToolUpdate {
	tu.mutation.AppendCategories(s)
	return tu
}

// ClearCategories clears the value of the "categories" field.
func (tu *ToolUpdate) ClearCategories() *ToolUpdate {
	tu.mutation.ClearCategories()
	return tu
}

// SetKeywords sets the "keywords" field.
func (tu *ToolUpdate) SetKeywords(s []string) *ToolUpdate {
	tu.mutation.SetKeywords(s)
	return tu
}

// AppendKeywords appends s to the "keywords" field.
func (tu *ToolUpdate) AppendKeywords(s []string) *ToolUpdate {
	tu.mutation.AppendKeywords(s)
	return tu
}

// ClearKeywords clears the value of the "keywords" field.
func (tu *ToolUpdate) ClearKeywords() *ToolUpdate {
	tu.mutation.ClearKeywords()
	return tu
}

// SetStability sets the "stability" field.
func (tu *ToolUpdate) SetStability(t tool.Stability) *ToolUpdate {
	tu.mutation.SetStability(t)
	return tu
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableStability(t *tool.Stability) *ToolUpdate {
	if t != nil {
		tu.SetStability(*t)
	}
	return tu
}

// SetMaturity sets the "maturity" field.
func (tu *ToolUpdate) SetMaturity(t tool.Maturity) *ToolUpdate {
	tu.mutation.SetMaturity(t)
	return tu
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableMaturity(t *tool.Maturity) *ToolUpdate {
	if t != nil {
		tu.SetMaturity(*t)
	}
	return tu
}

// SetForgeVersion sets the "forge_version" field.
func (tu *ToolUpdate) SetForgeVersion(s string) *ToolUpdate {
	tu.mutation.SetForgeVersion(s)
	return tu
}

// SetNillableForgeVersion sets the "forge_version" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableForgeVersion(s *string) *ToolUpdate {
	if s != nil {
		tu.SetForgeVersion(*s)
	}
	return tu
}

// SetPlatforms sets the "platforms" field.
func (tu *ToolUpdate) SetPlatforms(s []string) *ToolUpdate {
	tu.mutation.SetPlatforms(s)
	return tu
}

// AppendPlatforms appends s to the "platforms" field.
func (tu *ToolUpdate) AppendPlatforms(s []string) *ToolUpdate {
	tu.mutation.AppendPlatforms(s)
	return tu
}

// ClearPlatforms clears the value of the "platforms" field.
func (tu *ToolUpdate) ClearPlatforms() *ToolUpdate {
	tu.mutation.ClearPlatforms()
	return tu
}

// SetSpec sets the "spec" field.
func (tu *ToolUpdate) SetSpec(s string) *ToolUpdate {
	tu.mutation.SetSpec(s)
	return tu
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableSpec(s *string) *ToolUpdate {
	if s != nil {
		tu.SetSpec(*s)
	}
	return tu
}

// SetSpecHash sets the "spec_hash" field.
func (tu *ToolUpdate) SetSpecHash(s string) *ToolUpdate {
	tu.mutation.SetSpecHash(s)
	return tu
}

// SetNillableSpecHash sets the "spec_hash" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableSpecHash(s *string) *ToolUpdate {
	if s != nil {
		tu.SetSpecHash(*s)
	}
	return tu
}

// SetIsInstalled sets the "is_installed" field.
func (tu *ToolUpdate) SetIsInstalled(b bool) *ToolUpdate {
	tu.mutation.SetIsInstalled(b)
	return tu
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableIsInstalled(b *bool) *ToolUpdate {
	if b != nil {
		tu.SetIsInstalled(*b)
	}
	return tu
}

// SetInstallPath sets the "install_path" field.
func (tu *ToolUpdate) SetInstallPath(s string) *ToolUpdate {
	tu.mutation.SetInstallPath(s)
	return tu
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableInstallPath(s *string) *ToolUpdate {
	if s != nil {
		tu.SetInstallPath(*s)
	}
	return tu
}

// ClearInstallPath clears the value of the "install_path" field.
func (tu *ToolUpdate) ClearInstallPath() *ToolUpdate {
	tu.mutation.ClearInstallPath()
	return tu
}

// SetInstalledAt sets the "installed_at" field.
func (tu *ToolUpdate) SetInstalledAt(t time.Time) *ToolUpdate {
	tu.mutation.SetInstalledAt(t)
	return tu
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableInstalledAt(t *time.Time) *ToolUpdate {
	if t != nil {
		tu.SetInstalledAt(*t)
	}
	return tu
}

// ClearInstalledAt clears the value of the "installed_at" field.
func (tu *ToolUpdate) ClearInstalledAt() *ToolUpdate {
	tu.mutation.ClearInstalledAt()
	return tu
}

// SetCommitHash sets the "commit_hash" field.
func (tu *ToolUpdate) SetCommitHash(s string) *ToolUpdate {
	tu.mutation.SetCommitHash(s)
	return tu
}

// SetNillableCommitHash sets the "commit_hash" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableCommitHash(s *string) *ToolUpdate {
	if s != nil {
		tu.SetCommitHash(*s)
	}
	return tu
}

// SetBranch sets the "branch" field.
func (tu *ToolUpdate) SetBranch(s string) *ToolUpdate {
	tu.mutation.SetBranch(s)
	return tu
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableBranch(s *string) *ToolUpdate {
	if s != nil {
		tu.SetBranch(*s)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *ToolUpdate) SetUpdatedAt(t time.Time) *ToolUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetExecutionType sets the "execution_type" field.
func (tu *ToolUpdate) SetExecutionType(tt tool.ExecutionType) *ToolUpdate {
	tu.mutation.SetExecutionType(tt)
	return tu
}

// SetNillableExecutionType sets the "execution_type" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableExecutionType(tt *tool.ExecutionType) *ToolUpdate {
	if tt != nil {
		tu.SetExecutionType(*tt)
	}
	return tu
}

// SetSchemaPath sets the "schema_path" field.
func (tu *ToolUpdate) SetSchemaPath(s string) *ToolUpdate {
	tu.mutation.SetSchemaPath(s)
	return tu
}

// SetNillableSchemaPath sets the "schema_path" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableSchemaPath(s *string) *ToolUpdate {
	if s != nil {
		tu.SetSchemaPath(*s)
	}
	return tu
}

// ClearSchemaPath clears the value of the "schema_path" field.
func (tu *ToolUpdate) ClearSchemaPath() *ToolUpdate {
	tu.mutation.ClearSchemaPath()
	return tu
}

// SetServerConfig sets the "server_config" field.
func (tu *ToolUpdate) SetServerConfig(m map[string]interface{}) *ToolUpdate {
	tu.mutation.SetServerConfig(m)
	return tu
}

// ClearServerConfig clears the value of the "server_config" field.
func (tu *ToolUpdate) ClearServerConfig() *ToolUpdate {
	tu.mutation.ClearServerConfig()
	return tu
}

// SetCapabilities sets the "capabilities" field.
func (tu *ToolUpdate) SetCapabilities(s []string) *ToolUpdate {
	tu.mutation.SetCapabilities(s)
	return tu
}

// AppendCapabilities appends s to the "capabilities" field.
func (tu *ToolUpdate) AppendCapabilities(s []string) *ToolUpdate {
	tu.mutation.AppendCapabilities(s)
	return tu
}

// ClearCapabilities clears the value of the "capabilities" field.
func (tu *ToolUpdate) ClearCapabilities() *ToolUpdate {
	tu.mutation.ClearCapabilities()
	return tu
}

// SetEntryPoint sets the "entry_point" field.
func (tu *ToolUpdate) SetEntryPoint(s string) *ToolUpdate {
	tu.mutation.SetEntryPoint(s)
	return tu
}

// SetNillableEntryPoint sets the "entry_point" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableEntryPoint(s *string) *ToolUpdate {
	if s != nil {
		tu.SetEntryPoint(*s)
	}
	return tu
}

// ClearEntryPoint clears the value of the "entry_point" field.
func (tu *ToolUpdate) ClearEntryPoint() *ToolUpdate {
	tu.mutation.ClearEntryPoint()
	return tu
}

// SetEnvironmentVariables sets the "environment_variables" field.
func (tu *ToolUpdate) SetEnvironmentVariables(m map[string]string) *ToolUpdate {
	tu.mutation.SetEnvironmentVariables(m)
	return tu
}

// ClearEnvironmentVariables clears the value of the "environment_variables" field.
func (tu *ToolUpdate) ClearEnvironmentVariables() *ToolUpdate {
	tu.mutation.ClearEnvironmentVariables()
	return tu
}

// SetRequiredPermissions sets the "required_permissions" field.
func (tu *ToolUpdate) SetRequiredPermissions(s []string) *ToolUpdate {
	tu.mutation.SetRequiredPermissions(s)
	return tu
}

// AppendRequiredPermissions appends s to the "required_permissions" field.
func (tu *ToolUpdate) AppendRequiredPermissions(s []string) *ToolUpdate {
	tu.mutation.AppendRequiredPermissions(s)
	return tu
}

// ClearRequiredPermissions clears the value of the "required_permissions" field.
func (tu *ToolUpdate) ClearRequiredPermissions() *ToolUpdate {
	tu.mutation.ClearRequiredPermissions()
	return tu
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (tu *ToolUpdate) SetTimeoutSeconds(i int) *ToolUpdate {
	tu.mutation.ResetTimeoutSeconds()
	tu.mutation.SetTimeoutSeconds(i)
	return tu
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableTimeoutSeconds(i *int) *ToolUpdate {
	if i != nil {
		tu.SetTimeoutSeconds(*i)
	}
	return tu
}

// AddTimeoutSeconds adds i to the "timeout_seconds" field.
func (tu *ToolUpdate) AddTimeoutSeconds(i int) *ToolUpdate {
	tu.mutation.AddTimeoutSeconds(i)
	return tu
}

// SetSupportsStreaming sets the "supports_streaming" field.
func (tu *ToolUpdate) SetSupportsStreaming(b bool) *ToolUpdate {
	tu.mutation.SetSupportsStreaming(b)
	return tu
}

// SetNillableSupportsStreaming sets the "supports_streaming" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableSupportsStreaming(b *bool) *ToolUpdate {
	if b != nil {
		tu.SetSupportsStreaming(*b)
	}
	return tu
}

// SetInputSchema sets the "input_schema" field.
func (tu *ToolUpdate) SetInputSchema(m map[string]interface{}) *ToolUpdate {
	tu.mutation.SetInputSchema(m)
	return tu
}

// ClearInputSchema clears the value of the "input_schema" field.
func (tu *ToolUpdate) ClearInputSchema() *ToolUpdate {
	tu.mutation.ClearInputSchema()
	return tu
}

// SetOutputSchema sets the "output_schema" field.
func (tu *ToolUpdate) SetOutputSchema(m map[string]interface{}) *ToolUpdate {
	tu.mutation.SetOutputSchema(m)
	return tu
}

// ClearOutputSchema clears the value of the "output_schema" field.
func (tu *ToolUpdate) ClearOutputSchema() *ToolUpdate {
	tu.mutation.ClearOutputSchema()
	return tu
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (tu *ToolUpdate) SetRepositoryID(id string) *ToolUpdate {
	tu.mutation.SetRepositoryID(id)
	return tu
}

// SetRepository sets the "repository" edge to the Repository entity.
func (tu *ToolUpdate) SetRepository(r *Repository) *ToolUpdate {
	return tu.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the ToolDependency entity by IDs.
func (tu *ToolUpdate) AddDependencyIDs(ids ...string) *ToolUpdate {
	tu.mutation.AddDependencyIDs(ids...)
	return tu
}

// AddDependencies adds the "dependencies" edges to the ToolDependency entity.
func (tu *ToolUpdate) AddDependencies(t ...*ToolDependency) *ToolUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddDependencyIDs(ids...)
}

// Mutation returns the ToolMutation object of the builder.
func (tu *ToolUpdate) Mutation() *ToolMutation {
	return tu.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (tu *ToolUpdate) ClearRepository() *ToolUpdate {
	tu.mutation.ClearRepository()
	return tu
}

// ClearDependencies clears all "dependencies" edges to the ToolDependency entity.
func (tu *ToolUpdate) ClearDependencies() *ToolUpdate {
	tu.mutation.ClearDependencies()
	return tu
}

// RemoveDependencyIDs removes the "dependencies" edge to ToolDependency entities by IDs.
func (tu *ToolUpdate) RemoveDependencyIDs(ids ...string) *ToolUpdate {
	tu.mutation.RemoveDependencyIDs(ids...)
	return tu
}

// RemoveDependencies removes "dependencies" edges to ToolDependency entities.
func (tu *ToolUpdate) RemoveDependencies(t ...*ToolDependency) *ToolUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveDependencyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *ToolUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *ToolUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *ToolUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *ToolUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *ToolUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := tool.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *ToolUpdate) check() error {
	if v, ok := tu.mutation.Stability(); ok {
		if err := tool.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Tool.stability": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Maturity(); ok {
		if err := tool.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Tool.maturity": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ExecutionType(); ok {
		if err := tool.ExecutionTypeValidator(v); err != nil {
			return &ValidationError{Name: "execution_type", err: fmt.Errorf(`ent: validator failed for field "Tool.execution_type": %w`, err)}
		}
	}
	if tu.mutation.RepositoryCleared() && len(tu.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tool.repository"`)
	}
	return nil
}

func (tu *ToolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tool.Table, tool.Columns, sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tool.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Namespace(); ok {
		_spec.SetField(tool.FieldNamespace, field.TypeString, value)
	}
	if value, ok := tu.mutation.Version(); ok {
		_spec.SetField(tool.FieldVersion, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(tool.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Author(); ok {
		_spec.SetField(tool.FieldAuthor, field.TypeString, value)
	}
	if value, ok := tu.mutation.License(); ok {
		_spec.SetField(tool.FieldLicense, field.TypeString, value)
	}
	if value, ok := tu.mutation.Homepage(); ok {
		_spec.SetField(tool.FieldHomepage, field.TypeString, value)
	}
	if tu.mutation.HomepageCleared() {
		_spec.ClearField(tool.FieldHomepage, field.TypeString)
	}
	if value, ok := tu.mutation.Documentation(); ok {
		_spec.SetField(tool.FieldDocumentation, field.TypeString, value)
	}
	if tu.mutation.DocumentationCleared() {
		_spec.ClearField(tool.FieldDocumentation, field.TypeString)
	}
	if value, ok := tu.mutation.Tags(); ok {
		_spec.SetField(tool.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldTags, value)
		})
	}
	if tu.mutation.TagsCleared() {
		_spec.ClearField(tool.FieldTags, field.TypeJSON)
	}
	if value, ok := tu.mutation.Categories(); ok {
		_spec.SetField(tool.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldCategories, value)
		})
	}
	if tu.mutation.CategoriesCleared() {
		_spec.ClearField(tool.FieldCategories, field.TypeJSON)
	}
	if value, ok := tu.mutation.Keywords(); ok {
		_spec.SetField(tool.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldKeywords, value)
		})
	}
	if tu.mutation.KeywordsCleared() {
		_spec.ClearField(tool.FieldKeywords, field.TypeJSON)
	}
	if value, ok := tu.mutation.Stability(); ok {
		_spec.SetField(tool.FieldStability, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Maturity(); ok {
		_spec.SetField(tool.FieldMaturity, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.ForgeVersion(); ok {
		_spec.SetField(tool.FieldForgeVersion, field.TypeString, value)
	}
	if value, ok := tu.mutation.Platforms(); ok {
		_spec.SetField(tool.FieldPlatforms, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedPlatforms(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldPlatforms, value)
		})
	}
	if tu.mutation.PlatformsCleared() {
		_spec.ClearField(tool.FieldPlatforms, field.TypeJSON)
	}
	if value, ok := tu.mutation.Spec(); ok {
		_spec.SetField(tool.FieldSpec, field.TypeString, value)
	}
	if value, ok := tu.mutation.SpecHash(); ok {
		_spec.SetField(tool.FieldSpecHash, field.TypeString, value)
	}
	if value, ok := tu.mutation.IsInstalled(); ok {
		_spec.SetField(tool.FieldIsInstalled, field.TypeBool, value)
	}
	if value, ok := tu.mutation.InstallPath(); ok {
		_spec.SetField(tool.FieldInstallPath, field.TypeString, value)
	}
	if tu.mutation.InstallPathCleared() {
		_spec.ClearField(tool.FieldInstallPath, field.TypeString)
	}
	if value, ok := tu.mutation.InstalledAt(); ok {
		_spec.SetField(tool.FieldInstalledAt, field.TypeTime, value)
	}
	if tu.mutation.InstalledAtCleared() {
		_spec.ClearField(tool.FieldInstalledAt, field.TypeTime)
	}
	if value, ok := tu.mutation.CommitHash(); ok {
		_spec.SetField(tool.FieldCommitHash, field.TypeString, value)
	}
	if value, ok := tu.mutation.Branch(); ok {
		_spec.SetField(tool.FieldBranch, field.TypeString, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tool.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.ExecutionType(); ok {
		_spec.SetField(tool.FieldExecutionType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.SchemaPath(); ok {
		_spec.SetField(tool.FieldSchemaPath, field.TypeString, value)
	}
	if tu.mutation.SchemaPathCleared() {
		_spec.ClearField(tool.FieldSchemaPath, field.TypeString)
	}
	if value, ok := tu.mutation.ServerConfig(); ok {
		_spec.SetField(tool.FieldServerConfig, field.TypeJSON, value)
	}
	if tu.mutation.ServerConfigCleared() {
		_spec.ClearField(tool.FieldServerConfig, field.TypeJSON)
	}
	if value, ok := tu.mutation.Capabilities(); ok {
		_spec.SetField(tool.FieldCapabilities, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedCapabilities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldCapabilities, value)
		})
	}
	if tu.mutation.CapabilitiesCleared() {
		_spec.ClearField(tool.FieldCapabilities, field.TypeJSON)
	}
	if value, ok := tu.mutation.EntryPoint(); ok {
		_spec.SetField(tool.FieldEntryPoint, field.TypeString, value)
	}
	if tu.mutation.EntryPointCleared() {
		_spec.ClearField(tool.FieldEntryPoint, field.TypeString)
	}
	if value, ok := tu.mutation.EnvironmentVariables(); ok {
		_spec.SetField(tool.FieldEnvironmentVariables, field.TypeJSON, value)
	}
	if tu.mutation.EnvironmentVariablesCleared() {
		_spec.ClearField(tool.FieldEnvironmentVariables, field.TypeJSON)
	}
	if value, ok := tu.mutation.RequiredPermissions(); ok {
		_spec.SetField(tool.FieldRequiredPermissions, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedRequiredPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldRequiredPermissions, value)
		})
	}
	if tu.mutation.RequiredPermissionsCleared() {
		_spec.ClearField(tool.FieldRequiredPermissions, field.TypeJSON)
	}
	if value, ok := tu.mutation.TimeoutSeconds(); ok {
		_spec.SetField(tool.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedTimeoutSeconds(); ok {
		_spec.AddField(tool.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := tu.mutation.SupportsStreaming(); ok {
		_spec.SetField(tool.FieldSupportsStreaming, field.TypeBool, value)
	}
	if value, ok := tu.mutation.InputSchema(); ok {
		_spec.SetField(tool.FieldInputSchema, field.TypeJSON, value)
	}
	if tu.mutation.InputSchemaCleared() {
		_spec.ClearField(tool.FieldInputSchema, field.TypeJSON)
	}
	if value, ok := tu.mutation.OutputSchema(); ok {
		_spec.SetField(tool.FieldOutputSchema, field.TypeJSON, value)
	}
	if tu.mutation.OutputSchemaCleared() {
		_spec.ClearField(tool.FieldOutputSchema, field.TypeJSON)
	}
	if tu.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tool.RepositoryTable,
			Columns: []string{tool.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tool.RepositoryTable,
			Columns: []string{tool.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.DependenciesTable,
			Columns: []string{tool.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tooldependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !tu.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.DependenciesTable,
			Columns: []string{tool.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tooldependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.DependenciesTable,
			Columns: []string{tool.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tooldependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// ToolUpdateOne is the builder for updating a single Tool entity.
type ToolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ToolMutation
}

// SetName sets the "name" field.
func (tuo *ToolUpdateOne) SetName(s string) *ToolUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableName(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetNamespace sets the "namespace" field.
func (tuo *ToolUpdateOne) SetNamespace(s string) *ToolUpdateOne {
	tuo.mutation.SetNamespace(s)
	return tuo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableNamespace(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetNamespace(*s)
	}
	return tuo
}

// SetVersion sets the "version" field.
func (tuo *ToolUpdateOne) SetVersion(s string) *ToolUpdateOne {
	tuo.mutation.SetVersion(s)
	return tuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableVersion(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetVersion(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *ToolUpdateOne) SetDescription(s string) *ToolUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableDescription(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetAuthor sets the "author" field.
func (tuo *ToolUpdateOne) SetAuthor(s string) *ToolUpdateOne {
	tuo.mutation.SetAuthor(s)
	return tuo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableAuthor(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetAuthor(*s)
	}
	return tuo
}

// SetLicense sets the "license" field.
func (tuo *ToolUpdateOne) SetLicense(s string) *ToolUpdateOne {
	tuo.mutation.SetLicense(s)
	return tuo
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableLicense(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetLicense(*s)
	}
	return tuo
}

// SetHomepage sets the "homepage" field.
func (tuo *ToolUpdateOne) SetHomepage(s string) *ToolUpdateOne {
	tuo.mutation.SetHomepage(s)
	return tuo
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableHomepage(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetHomepage(*s)
	}
	return tuo
}

// ClearHomepage clears the value of the "homepage" field.
func (tuo *ToolUpdateOne) ClearHomepage() *ToolUpdateOne {
	tuo.mutation.ClearHomepage()
	return tuo
}

// SetDocumentation sets the "documentation" field.
func (tuo *ToolUpdateOne) SetDocumentation(s string) *ToolUpdateOne {
	tuo.mutation.SetDocumentation(s)
	return tuo
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableDocumentation(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetDocumentation(*s)
	}
	return tuo
}

// ClearDocumentation clears the value of the "documentation" field.
func (tuo *ToolUpdateOne) ClearDocumentation() *ToolUpdateOne {
	tuo.mutation.ClearDocumentation()
	return tuo
}

// SetTags sets the "tags" field.
func (tuo *ToolUpdateOne) SetTags(s []string) *ToolUpdateOne {
	tuo.mutation.SetTags(s)
	return tuo
}

// AppendTags appends s to the "tags" field.
func (tuo *ToolUpdateOne) AppendTags(s []string) *ToolUpdateOne {
	tuo.mutation.AppendTags(s)
	return tuo
}

// ClearTags clears the value of the "tags" field.
func (tuo *ToolUpdateOne) ClearTags() *ToolUpdateOne {
	tuo.mutation.ClearTags()
	return tuo
}

// SetCategories sets the "categories" field.
func (tuo *ToolUpdateOne) SetCategories(s []string) *ToolUpdateOne {
	tuo.mutation.SetCategories(s)
	return tuo
}

// AppendCategories appends s to the "categories" field.
func (tuo *ToolUpdateOne) AppendCategories(s []string) *ToolUpdateOne {
	tuo.mutation.AppendCategories(s)
	return tuo
}

// ClearCategories clears the value of the "categories" field.
func (tuo *ToolUpdateOne) ClearCategories() *ToolUpdateOne {
	tuo.mutation.ClearCategories()
	return tuo
}

// SetKeywords sets the "keywords" field.
func (tuo *ToolUpdateOne) SetKeywords(s []string) *ToolUpdateOne {
	tuo.mutation.SetKeywords(s)
	return tuo
}

// AppendKeywords appends s to the "keywords" field.
func (tuo *ToolUpdateOne) AppendKeywords(s []string) *ToolUpdateOne {
	tuo.mutation.AppendKeywords(s)
	return tuo
}

// ClearKeywords clears the value of the "keywords" field.
func (tuo *ToolUpdateOne) ClearKeywords() *ToolUpdateOne {
	tuo.mutation.ClearKeywords()
	return tuo
}

// SetStability sets the "stability" field.
func (tuo *ToolUpdateOne) SetStability(t tool.Stability) *ToolUpdateOne {
	tuo.mutation.SetStability(t)
	return tuo
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableStability(t *tool.Stability) *ToolUpdateOne {
	if t != nil {
		tuo.SetStability(*t)
	}
	return tuo
}

// SetMaturity sets the "maturity" field.
func (tuo *ToolUpdateOne) SetMaturity(t tool.Maturity) *ToolUpdateOne {
	tuo.mutation.SetMaturity(t)
	return tuo
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableMaturity(t *tool.Maturity) *ToolUpdateOne {
	if t != nil {
		tuo.SetMaturity(*t)
	}
	return tuo
}

// SetForgeVersion sets the "forge_version" field.
func (tuo *ToolUpdateOne) SetForgeVersion(s string) *ToolUpdateOne {
	tuo.mutation.SetForgeVersion(s)
	return tuo
}

// SetNillableForgeVersion sets the "forge_version" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableForgeVersion(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetForgeVersion(*s)
	}
	return tuo
}

// SetPlatforms sets the "platforms" field.
func (tuo *ToolUpdateOne) SetPlatforms(s []string) *ToolUpdateOne {
	tuo.mutation.SetPlatforms(s)
	return tuo
}

// AppendPlatforms appends s to the "platforms" field.
func (tuo *ToolUpdateOne) AppendPlatforms(s []string) *ToolUpdateOne {
	tuo.mutation.AppendPlatforms(s)
	return tuo
}

// ClearPlatforms clears the value of the "platforms" field.
func (tuo *ToolUpdateOne) ClearPlatforms() *ToolUpdateOne {
	tuo.mutation.ClearPlatforms()
	return tuo
}

// SetSpec sets the "spec" field.
func (tuo *ToolUpdateOne) SetSpec(s string) *ToolUpdateOne {
	tuo.mutation.SetSpec(s)
	return tuo
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableSpec(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetSpec(*s)
	}
	return tuo
}

// SetSpecHash sets the "spec_hash" field.
func (tuo *ToolUpdateOne) SetSpecHash(s string) *ToolUpdateOne {
	tuo.mutation.SetSpecHash(s)
	return tuo
}

// SetNillableSpecHash sets the "spec_hash" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableSpecHash(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetSpecHash(*s)
	}
	return tuo
}

// SetIsInstalled sets the "is_installed" field.
func (tuo *ToolUpdateOne) SetIsInstalled(b bool) *ToolUpdateOne {
	tuo.mutation.SetIsInstalled(b)
	return tuo
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableIsInstalled(b *bool) *ToolUpdateOne {
	if b != nil {
		tuo.SetIsInstalled(*b)
	}
	return tuo
}

// SetInstallPath sets the "install_path" field.
func (tuo *ToolUpdateOne) SetInstallPath(s string) *ToolUpdateOne {
	tuo.mutation.SetInstallPath(s)
	return tuo
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableInstallPath(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetInstallPath(*s)
	}
	return tuo
}

// ClearInstallPath clears the value of the "install_path" field.
func (tuo *ToolUpdateOne) ClearInstallPath() *ToolUpdateOne {
	tuo.mutation.ClearInstallPath()
	return tuo
}

// SetInstalledAt sets the "installed_at" field.
func (tuo *ToolUpdateOne) SetInstalledAt(t time.Time) *ToolUpdateOne {
	tuo.mutation.SetInstalledAt(t)
	return tuo
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableInstalledAt(t *time.Time) *ToolUpdateOne {
	if t != nil {
		tuo.SetInstalledAt(*t)
	}
	return tuo
}

// ClearInstalledAt clears the value of the "installed_at" field.
func (tuo *ToolUpdateOne) ClearInstalledAt() *ToolUpdateOne {
	tuo.mutation.ClearInstalledAt()
	return tuo
}

// SetCommitHash sets the "commit_hash" field.
func (tuo *ToolUpdateOne) SetCommitHash(s string) *ToolUpdateOne {
	tuo.mutation.SetCommitHash(s)
	return tuo
}

// SetNillableCommitHash sets the "commit_hash" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableCommitHash(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetCommitHash(*s)
	}
	return tuo
}

// SetBranch sets the "branch" field.
func (tuo *ToolUpdateOne) SetBranch(s string) *ToolUpdateOne {
	tuo.mutation.SetBranch(s)
	return tuo
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableBranch(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetBranch(*s)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *ToolUpdateOne) SetUpdatedAt(t time.Time) *ToolUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetExecutionType sets the "execution_type" field.
func (tuo *ToolUpdateOne) SetExecutionType(tt tool.ExecutionType) *ToolUpdateOne {
	tuo.mutation.SetExecutionType(tt)
	return tuo
}

// SetNillableExecutionType sets the "execution_type" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableExecutionType(tt *tool.ExecutionType) *ToolUpdateOne {
	if tt != nil {
		tuo.SetExecutionType(*tt)
	}
	return tuo
}

// SetSchemaPath sets the "schema_path" field.
func (tuo *ToolUpdateOne) SetSchemaPath(s string) *ToolUpdateOne {
	tuo.mutation.SetSchemaPath(s)
	return tuo
}

// SetNillableSchemaPath sets the "schema_path" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableSchemaPath(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetSchemaPath(*s)
	}
	return tuo
}

// ClearSchemaPath clears the value of the "schema_path" field.
func (tuo *ToolUpdateOne) ClearSchemaPath() *ToolUpdateOne {
	tuo.mutation.ClearSchemaPath()
	return tuo
}

// SetServerConfig sets the "server_config" field.
func (tuo *ToolUpdateOne) SetServerConfig(m map[string]interface{}) *ToolUpdateOne {
	tuo.mutation.SetServerConfig(m)
	return tuo
}

// ClearServerConfig clears the value of the "server_config" field.
func (tuo *ToolUpdateOne) ClearServerConfig() *ToolUpdateOne {
	tuo.mutation.ClearServerConfig()
	return tuo
}

// SetCapabilities sets the "capabilities" field.
func (tuo *ToolUpdateOne) SetCapabilities(s []string) *ToolUpdateOne {
	tuo.mutation.SetCapabilities(s)
	return tuo
}

// AppendCapabilities appends s to the "capabilities" field.
func (tuo *ToolUpdateOne) AppendCapabilities(s []string) *ToolUpdateOne {
	tuo.mutation.AppendCapabilities(s)
	return tuo
}

// ClearCapabilities clears the value of the "capabilities" field.
func (tuo *ToolUpdateOne) ClearCapabilities() *ToolUpdateOne {
	tuo.mutation.ClearCapabilities()
	return tuo
}

// SetEntryPoint sets the "entry_point" field.
func (tuo *ToolUpdateOne) SetEntryPoint(s string) *ToolUpdateOne {
	tuo.mutation.SetEntryPoint(s)
	return tuo
}

// SetNillableEntryPoint sets the "entry_point" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableEntryPoint(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetEntryPoint(*s)
	}
	return tuo
}

// ClearEntryPoint clears the value of the "entry_point" field.
func (tuo *ToolUpdateOne) ClearEntryPoint() *ToolUpdateOne {
	tuo.mutation.ClearEntryPoint()
	return tuo
}

// SetEnvironmentVariables sets the "environment_variables" field.
func (tuo *ToolUpdateOne) SetEnvironmentVariables(m map[string]string) *ToolUpdateOne {
	tuo.mutation.SetEnvironmentVariables(m)
	return tuo
}

// ClearEnvironmentVariables clears the value of the "environment_variables" field.
func (tuo *ToolUpdateOne) ClearEnvironmentVariables() *ToolUpdateOne {
	tuo.mutation.ClearEnvironmentVariables()
	return tuo
}

// SetRequiredPermissions sets the "required_permissions" field.
func (tuo *ToolUpdateOne) SetRequiredPermissions(s []string) *ToolUpdateOne {
	tuo.mutation.SetRequiredPermissions(s)
	return tuo
}

// AppendRequiredPermissions appends s to the "required_permissions" field.
func (tuo *ToolUpdateOne) AppendRequiredPermissions(s []string) *ToolUpdateOne {
	tuo.mutation.AppendRequiredPermissions(s)
	return tuo
}

// ClearRequiredPermissions clears the value of the "required_permissions" field.
func (tuo *ToolUpdateOne) ClearRequiredPermissions() *ToolUpdateOne {
	tuo.mutation.ClearRequiredPermissions()
	return tuo
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (tuo *ToolUpdateOne) SetTimeoutSeconds(i int) *ToolUpdateOne {
	tuo.mutation.ResetTimeoutSeconds()
	tuo.mutation.SetTimeoutSeconds(i)
	return tuo
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableTimeoutSeconds(i *int) *ToolUpdateOne {
	if i != nil {
		tuo.SetTimeoutSeconds(*i)
	}
	return tuo
}

// AddTimeoutSeconds adds i to the "timeout_seconds" field.
func (tuo *ToolUpdateOne) AddTimeoutSeconds(i int) *ToolUpdateOne {
	tuo.mutation.AddTimeoutSeconds(i)
	return tuo
}

// SetSupportsStreaming sets the "supports_streaming" field.
func (tuo *ToolUpdateOne) SetSupportsStreaming(b bool) *ToolUpdateOne {
	tuo.mutation.SetSupportsStreaming(b)
	return tuo
}

// SetNillableSupportsStreaming sets the "supports_streaming" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableSupportsStreaming(b *bool) *ToolUpdateOne {
	if b != nil {
		tuo.SetSupportsStreaming(*b)
	}
	return tuo
}

// SetInputSchema sets the "input_schema" field.
func (tuo *ToolUpdateOne) SetInputSchema(m map[string]interface{}) *ToolUpdateOne {
	tuo.mutation.SetInputSchema(m)
	return tuo
}

// ClearInputSchema clears the value of the "input_schema" field.
func (tuo *ToolUpdateOne) ClearInputSchema() *ToolUpdateOne {
	tuo.mutation.ClearInputSchema()
	return tuo
}

// SetOutputSchema sets the "output_schema" field.
func (tuo *ToolUpdateOne) SetOutputSchema(m map[string]interface{}) *ToolUpdateOne {
	tuo.mutation.SetOutputSchema(m)
	return tuo
}

// ClearOutputSchema clears the value of the "output_schema" field.
func (tuo *ToolUpdateOne) ClearOutputSchema() *ToolUpdateOne {
	tuo.mutation.ClearOutputSchema()
	return tuo
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (tuo *ToolUpdateOne) SetRepositoryID(id string) *ToolUpdateOne {
	tuo.mutation.SetRepositoryID(id)
	return tuo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (tuo *ToolUpdateOne) SetRepository(r *Repository) *ToolUpdateOne {
	return tuo.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the ToolDependency entity by IDs.
func (tuo *ToolUpdateOne) AddDependencyIDs(ids ...string) *ToolUpdateOne {
	tuo.mutation.AddDependencyIDs(ids...)
	return tuo
}

// AddDependencies adds the "dependencies" edges to the ToolDependency entity.
func (tuo *ToolUpdateOne) AddDependencies(t ...*ToolDependency) *ToolUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddDependencyIDs(ids...)
}

// Mutation returns the ToolMutation object of the builder.
func (tuo *ToolUpdateOne) Mutation() *ToolMutation {
	return tuo.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (tuo *ToolUpdateOne) ClearRepository() *ToolUpdateOne {
	tuo.mutation.ClearRepository()
	return tuo
}

// ClearDependencies clears all "dependencies" edges to the ToolDependency entity.
func (tuo *ToolUpdateOne) ClearDependencies() *ToolUpdateOne {
	tuo.mutation.ClearDependencies()
	return tuo
}

// RemoveDependencyIDs removes the "dependencies" edge to ToolDependency entities by IDs.
func (tuo *ToolUpdateOne) RemoveDependencyIDs(ids ...string) *ToolUpdateOne {
	tuo.mutation.RemoveDependencyIDs(ids...)
	return tuo
}

// RemoveDependencies removes "dependencies" edges to ToolDependency entities.
func (tuo *ToolUpdateOne) RemoveDependencies(t ...*ToolDependency) *ToolUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveDependencyIDs(ids...)
}

// Where appends a list predicates to the ToolUpdate builder.
func (tuo *ToolUpdateOne) Where(ps ...predicate.Tool) *ToolUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *ToolUpdateOne) Select(field string, fields ...string) *ToolUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tool entity.
func (tuo *ToolUpdateOne) Save(ctx context.Context) (*Tool, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *ToolUpdateOne) SaveX(ctx context.Context) *Tool {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *ToolUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *ToolUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *ToolUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := tool.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *ToolUpdateOne) check() error {
	if v, ok := tuo.mutation.Stability(); ok {
		if err := tool.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Tool.stability": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Maturity(); ok {
		if err := tool.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Tool.maturity": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ExecutionType(); ok {
		if err := tool.ExecutionTypeValidator(v); err != nil {
			return &ValidationError{Name: "execution_type", err: fmt.Errorf(`ent: validator failed for field "Tool.execution_type": %w`, err)}
		}
	}
	if tuo.mutation.RepositoryCleared() && len(tuo.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tool.repository"`)
	}
	return nil
}

func (tuo *ToolUpdateOne) sqlSave(ctx context.Context) (_node *Tool, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tool.Table, tool.Columns, sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tool.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tool.FieldID)
		for _, f := range fields {
			if !tool.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tool.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tool.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Namespace(); ok {
		_spec.SetField(tool.FieldNamespace, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Version(); ok {
		_spec.SetField(tool.FieldVersion, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(tool.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Author(); ok {
		_spec.SetField(tool.FieldAuthor, field.TypeString, value)
	}
	if value, ok := tuo.mutation.License(); ok {
		_spec.SetField(tool.FieldLicense, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Homepage(); ok {
		_spec.SetField(tool.FieldHomepage, field.TypeString, value)
	}
	if tuo.mutation.HomepageCleared() {
		_spec.ClearField(tool.FieldHomepage, field.TypeString)
	}
	if value, ok := tuo.mutation.Documentation(); ok {
		_spec.SetField(tool.FieldDocumentation, field.TypeString, value)
	}
	if tuo.mutation.DocumentationCleared() {
		_spec.ClearField(tool.FieldDocumentation, field.TypeString)
	}
	if value, ok := tuo.mutation.Tags(); ok {
		_spec.SetField(tool.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldTags, value)
		})
	}
	if tuo.mutation.TagsCleared() {
		_spec.ClearField(tool.FieldTags, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Categories(); ok {
		_spec.SetField(tool.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldCategories, value)
		})
	}
	if tuo.mutation.CategoriesCleared() {
		_spec.ClearField(tool.FieldCategories, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Keywords(); ok {
		_spec.SetField(tool.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldKeywords, value)
		})
	}
	if tuo.mutation.KeywordsCleared() {
		_spec.ClearField(tool.FieldKeywords, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Stability(); ok {
		_spec.SetField(tool.FieldStability, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Maturity(); ok {
		_spec.SetField(tool.FieldMaturity, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.ForgeVersion(); ok {
		_spec.SetField(tool.FieldForgeVersion, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Platforms(); ok {
		_spec.SetField(tool.FieldPlatforms, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedPlatforms(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldPlatforms, value)
		})
	}
	if tuo.mutation.PlatformsCleared() {
		_spec.ClearField(tool.FieldPlatforms, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Spec(); ok {
		_spec.SetField(tool.FieldSpec, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SpecHash(); ok {
		_spec.SetField(tool.FieldSpecHash, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IsInstalled(); ok {
		_spec.SetField(tool.FieldIsInstalled, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.InstallPath(); ok {
		_spec.SetField(tool.FieldInstallPath, field.TypeString, value)
	}
	if tuo.mutation.InstallPathCleared() {
		_spec.ClearField(tool.FieldInstallPath, field.TypeString)
	}
	if value, ok := tuo.mutation.InstalledAt(); ok {
		_spec.SetField(tool.FieldInstalledAt, field.TypeTime, value)
	}
	if tuo.mutation.InstalledAtCleared() {
		_spec.ClearField(tool.FieldInstalledAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.CommitHash(); ok {
		_spec.SetField(tool.FieldCommitHash, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Branch(); ok {
		_spec.SetField(tool.FieldBranch, field.TypeString, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tool.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.ExecutionType(); ok {
		_spec.SetField(tool.FieldExecutionType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.SchemaPath(); ok {
		_spec.SetField(tool.FieldSchemaPath, field.TypeString, value)
	}
	if tuo.mutation.SchemaPathCleared() {
		_spec.ClearField(tool.FieldSchemaPath, field.TypeString)
	}
	if value, ok := tuo.mutation.ServerConfig(); ok {
		_spec.SetField(tool.FieldServerConfig, field.TypeJSON, value)
	}
	if tuo.mutation.ServerConfigCleared() {
		_spec.ClearField(tool.FieldServerConfig, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Capabilities(); ok {
		_spec.SetField(tool.FieldCapabilities, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedCapabilities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldCapabilities, value)
		})
	}
	if tuo.mutation.CapabilitiesCleared() {
		_spec.ClearField(tool.FieldCapabilities, field.TypeJSON)
	}
	if value, ok := tuo.mutation.EntryPoint(); ok {
		_spec.SetField(tool.FieldEntryPoint, field.TypeString, value)
	}
	if tuo.mutation.EntryPointCleared() {
		_spec.ClearField(tool.FieldEntryPoint, field.TypeString)
	}
	if value, ok := tuo.mutation.EnvironmentVariables(); ok {
		_spec.SetField(tool.FieldEnvironmentVariables, field.TypeJSON, value)
	}
	if tuo.mutation.EnvironmentVariablesCleared() {
		_spec.ClearField(tool.FieldEnvironmentVariables, field.TypeJSON)
	}
	if value, ok := tuo.mutation.RequiredPermissions(); ok {
		_spec.SetField(tool.FieldRequiredPermissions, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedRequiredPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tool.FieldRequiredPermissions, value)
		})
	}
	if tuo.mutation.RequiredPermissionsCleared() {
		_spec.ClearField(tool.FieldRequiredPermissions, field.TypeJSON)
	}
	if value, ok := tuo.mutation.TimeoutSeconds(); ok {
		_spec.SetField(tool.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedTimeoutSeconds(); ok {
		_spec.AddField(tool.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.SupportsStreaming(); ok {
		_spec.SetField(tool.FieldSupportsStreaming, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.InputSchema(); ok {
		_spec.SetField(tool.FieldInputSchema, field.TypeJSON, value)
	}
	if tuo.mutation.InputSchemaCleared() {
		_spec.ClearField(tool.FieldInputSchema, field.TypeJSON)
	}
	if value, ok := tuo.mutation.OutputSchema(); ok {
		_spec.SetField(tool.FieldOutputSchema, field.TypeJSON, value)
	}
	if tuo.mutation.OutputSchemaCleared() {
		_spec.ClearField(tool.FieldOutputSchema, field.TypeJSON)
	}
	if tuo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tool.RepositoryTable,
			Columns: []string{tool.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tool.RepositoryTable,
			Columns: []string{tool.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.DependenciesTable,
			Columns: []string{tool.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tooldependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !tuo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.DependenciesTable,
			Columns: []string{tool.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tooldependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.DependenciesTable,
			Columns: []string{tool.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tooldependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tool{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
