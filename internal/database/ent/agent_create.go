// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/agent"
	"github.com/denkhaus/agentforge/internal/database/ent/agentdependency"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
)

// AgentCreate is the builder for creating a Agent entity.
type AgentCreate struct {
	config
	mutation *AgentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *AgentCreate) SetName(s string) *AgentCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetNamespace sets the "namespace" field.
func (ac *AgentCreate) SetNamespace(s string) *AgentCreate {
	ac.mutation.SetNamespace(s)
	return ac
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (ac *AgentCreate) SetNillableNamespace(s *string) *AgentCreate {
	if s != nil {
		ac.SetNamespace(*s)
	}
	return ac
}

// SetVersion sets the "version" field.
func (ac *AgentCreate) SetVersion(s string) *AgentCreate {
	ac.mutation.SetVersion(s)
	return ac
}

// SetDescription sets the "description" field.
func (ac *AgentCreate) SetDescription(s string) *AgentCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetAuthor sets the "author" field.
func (ac *AgentCreate) SetAuthor(s string) *AgentCreate {
	ac.mutation.SetAuthor(s)
	return ac
}

// SetLicense sets the "license" field.
func (ac *AgentCreate) SetLicense(s string) *AgentCreate {
	ac.mutation.SetLicense(s)
	return ac
}

// SetHomepage sets the "homepage" field.
func (ac *AgentCreate) SetHomepage(s string) *AgentCreate {
	ac.mutation.SetHomepage(s)
	return ac
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (ac *AgentCreate) SetNillableHomepage(s *string) *AgentCreate {
	if s != nil {
		ac.SetHomepage(*s)
	}
	return ac
}

// SetDocumentation sets the "documentation" field.
func (ac *AgentCreate) SetDocumentation(s string) *AgentCreate {
	ac.mutation.SetDocumentation(s)
	return ac
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (ac *AgentCreate) SetNillableDocumentation(s *string) *AgentCreate {
	if s != nil {
		ac.SetDocumentation(*s)
	}
	return ac
}

// SetTags sets the "tags" field.
func (ac *AgentCreate) SetTags(s []string) *AgentCreate {
	ac.mutation.SetTags(s)
	return ac
}

// SetCategories sets the "categories" field.
func (ac *AgentCreate) SetCategories(s []string) *AgentCreate {
	ac.mutation.SetCategories(s)
	return ac
}

// SetKeywords sets the "keywords" field.
func (ac *AgentCreate) SetKeywords(s []string) *AgentCreate {
	ac.mutation.SetKeywords(s)
	return ac
}

// SetStability sets the "stability" field.
func (ac *AgentCreate) SetStability(a agent.Stability) *AgentCreate {
	ac.mutation.SetStability(a)
	return ac
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (ac *AgentCreate) SetNillableStability(a *agent.Stability) *AgentCreate {
	if a != nil {
		ac.SetStability(*a)
	}
	return ac
}

// SetMaturity sets the "maturity" field.
func (ac *AgentCreate) SetMaturity(a agent.Maturity) *AgentCreate {
	ac.mutation.SetMaturity(a)
	return ac
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (ac *AgentCreate) SetNillableMaturity(a *agent.Maturity) *AgentCreate {
	if a != nil {
		ac.SetMaturity(*a)
	}
	return ac
}

// SetForgeVersion sets the "forge_version" field.
func (ac *AgentCreate) SetForgeVersion(s string) *AgentCreate {
	ac.mutation.SetForgeVersion(s)
	return ac
}

// SetPlatforms sets the "platforms" field.
func (ac *AgentCreate) SetPlatforms(s []string) *AgentCreate {
	ac.mutation.SetPlatforms(s)
	return ac
}

// SetSpec sets the "spec" field.
func (ac *AgentCreate) SetSpec(s string) *AgentCreate {
	ac.mutation.SetSpec(s)
	return ac
}

// SetSpecHash sets the "spec_hash" field.
func (ac *AgentCreate) SetSpecHash(s string) *AgentCreate {
	ac.mutation.SetSpecHash(s)
	return ac
}

// SetIsInstalled sets the "is_installed" field.
func (ac *AgentCreate) SetIsInstalled(b bool) *AgentCreate {
	ac.mutation.SetIsInstalled(b)
	return ac
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (ac *AgentCreate) SetNillableIsInstalled(b *bool) *AgentCreate {
	if b != nil {
		ac.SetIsInstalled(*b)
	}
	return ac
}

// SetInstallPath sets the "install_path" field.
func (ac *AgentCreate) SetInstallPath(s string) *AgentCreate {
	ac.mutation.SetInstallPath(s)
	return ac
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (ac *AgentCreate) SetNillableInstallPath(s *string) *AgentCreate {
	if s != nil {
		ac.SetInstallPath(*s)
	}
	return ac
}

// SetInstalledAt sets the "installed_at" field.
func (ac *AgentCreate) SetInstalledAt(t time.Time) *AgentCreate {
	ac.mutation.SetInstalledAt(t)
	return ac
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableInstalledAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetInstalledAt(*t)
	}
	return ac
}

// SetCommitHash sets the "commit_hash" field.
func (ac *AgentCreate) SetCommitHash(s string) *AgentCreate {
	ac.mutation.SetCommitHash(s)
	return ac
}

// SetBranch sets the "branch" field.
func (ac *AgentCreate) SetBranch(s string) *AgentCreate {
	ac.mutation.SetBranch(s)
	return ac
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (ac *AgentCreate) SetNillableBranch(s *string) *AgentCreate {
	if s != nil {
		ac.SetBranch(*s)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AgentCreate) SetCreatedAt(t time.Time) *AgentCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableCreatedAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AgentCreate) SetUpdatedAt(t time.Time) *AgentCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableUpdatedAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetConfigPath sets the "config_path" field.
func (ac *AgentCreate) SetConfigPath(s string) *AgentCreate {
	ac.mutation.SetConfigPath(s)
	return ac
}

// SetNillableConfigPath sets the "config_path" field if the given value is not nil.
func (ac *AgentCreate) SetNillableConfigPath(s *string) *AgentCreate {
	if s != nil {
		ac.SetConfigPath(*s)
	}
	return ac
}

// SetAgentConfig sets the "agent_config" field.
func (ac *AgentCreate) SetAgentConfig(m map[string]interface{}) *AgentCreate {
	ac.mutation.SetAgentConfig(m)
	return ac
}

// SetLlmProvider sets the "llm_provider" field.
func (ac *AgentCreate) SetLlmProvider(s string) *AgentCreate {
	ac.mutation.SetLlmProvider(s)
	return ac
}

// SetNillableLlmProvider sets the "llm_provider" field if the given value is not nil.
func (ac *AgentCreate) SetNillableLlmProvider(s *string) *AgentCreate {
	if s != nil {
		ac.SetLlmProvider(*s)
	}
	return ac
}

// SetSystemPromptID sets the "system_prompt_id" field.
func (ac *AgentCreate) SetSystemPromptID(s string) *AgentCreate {
	ac.mutation.SetSystemPromptID(s)
	return ac
}

// SetNillableSystemPromptID sets the "system_prompt_id" field if the given value is not nil.
func (ac *AgentCreate) SetNillableSystemPromptID(s *string) *AgentCreate {
	if s != nil {
		ac.SetSystemPromptID(*s)
	}
	return ac
}

// SetToolDependencies sets the "tool_dependencies" field.
func (ac *AgentCreate) SetToolDependencies(s []string) *AgentCreate {
	ac.mutation.SetToolDependencies(s)
	return ac
}

// SetPromptDependencies sets the "prompt_dependencies" field.
func (ac *AgentCreate) SetPromptDependencies(s []string) *AgentCreate {
	ac.mutation.SetPromptDependencies(s)
	return ac
}

// SetAgentDependencies sets the "agent_dependencies" field.
func (ac *AgentCreate) SetAgentDependencies(s []string) *AgentCreate {
	ac.mutation.SetAgentDependencies(s)
	return ac
}

// SetAgentType sets the "agent_type" field.
func (ac *AgentCreate) SetAgentType(at agent.AgentType) *AgentCreate {
	ac.mutation.SetAgentType(at)
	return ac
}

// SetNillableAgentType sets the "agent_type" field if the given value is not nil.
func (ac *AgentCreate) SetNillableAgentType(at *agent.AgentType) *AgentCreate {
	if at != nil {
		ac.SetAgentType(*at)
	}
	return ac
}

// SetCapabilities sets the "capabilities" field.
func (ac *AgentCreate) SetCapabilities(s []string) *AgentCreate {
	ac.mutation.SetCapabilities(s)
	return ac
}

// SetSupportedLanguages sets the "supported_languages" field.
func (ac *AgentCreate) SetSupportedLanguages(s []string) *AgentCreate {
	ac.mutation.SetSupportedLanguages(s)
	return ac
}

// SetSupportsMemory sets the "supports_memory" field.
func (ac *AgentCreate) SetSupportsMemory(b bool) *AgentCreate {
	ac.mutation.SetSupportsMemory(b)
	return ac
}

// SetNillableSupportsMemory sets the "supports_memory" field if the given value is not nil.
func (ac *AgentCreate) SetNillableSupportsMemory(b *bool) *AgentCreate {
	if b != nil {
		ac.SetSupportsMemory(*b)
	}
	return ac
}

// SetSupportsTools sets the "supports_tools" field.
func (ac *AgentCreate) SetSupportsTools(b bool) *AgentCreate {
	ac.mutation.SetSupportsTools(b)
	return ac
}

// SetNillableSupportsTools sets the "supports_tools" field if the given value is not nil.
func (ac *AgentCreate) SetNillableSupportsTools(b *bool) *AgentCreate {
	if b != nil {
		ac.SetSupportsTools(*b)
	}
	return ac
}

// SetSupportsMultimodal sets the "supports_multimodal" field.
func (ac *AgentCreate) SetSupportsMultimodal(b bool) *AgentCreate {
	ac.mutation.SetSupportsMultimodal(b)
	return ac
}

// SetNillableSupportsMultimodal sets the "supports_multimodal" field if the given value is not nil.
func (ac *AgentCreate) SetNillableSupportsMultimodal(b *bool) *AgentCreate {
	if b != nil {
		ac.SetSupportsMultimodal(*b)
	}
	return ac
}

// SetModelPreferences sets the "model_preferences" field.
func (ac *AgentCreate) SetModelPreferences(s []string) *AgentCreate {
	ac.mutation.SetModelPreferences(s)
	return ac
}

// SetDefaultTemperature sets the "default_temperature" field.
func (ac *AgentCreate) SetDefaultTemperature(f float64) *AgentCreate {
	ac.mutation.SetDefaultTemperature(f)
	return ac
}

// SetNillableDefaultTemperature sets the "default_temperature" field if the given value is not nil.
func (ac *AgentCreate) SetNillableDefaultTemperature(f *float64) *AgentCreate {
	if f != nil {
		ac.SetDefaultTemperature(*f)
	}
	return ac
}

// SetDefaultMaxTokens sets the "default_max_tokens" field.
func (ac *AgentCreate) SetDefaultMaxTokens(i int) *AgentCreate {
	ac.mutation.SetDefaultMaxTokens(i)
	return ac
}

// SetNillableDefaultMaxTokens sets the "default_max_tokens" field if the given value is not nil.
func (ac *AgentCreate) SetNillableDefaultMaxTokens(i *int) *AgentCreate {
	if i != nil {
		ac.SetDefaultMaxTokens(*i)
	}
	return ac
}

// SetSessionTimeoutMinutes sets the "session_timeout_minutes" field.
func (ac *AgentCreate) SetSessionTimeoutMinutes(i int) *AgentCreate {
	ac.mutation.SetSessionTimeoutMinutes(i)
	return ac
}

// SetNillableSessionTimeoutMinutes sets the "session_timeout_minutes" field if the given value is not nil.
func (ac *AgentCreate) SetNillableSessionTimeoutMinutes(i *int) *AgentCreate {
	if i != nil {
		ac.SetSessionTimeoutMinutes(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AgentCreate) SetID(s string) *AgentCreate {
	ac.mutation.SetID(s)
	return ac
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (ac *AgentCreate) SetRepositoryID(id string) *AgentCreate {
	ac.mutation.SetRepositoryID(id)
	return ac
}

// SetRepository sets the "repository" edge to the Repository entity.
func (ac *AgentCreate) SetRepository(r *Repository) *AgentCreate {
	return ac.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the AgentDependency entity by IDs.
func (ac *AgentCreate) AddDependencyIDs(ids ...string) *AgentCreate {
	ac.mutation.AddDependencyIDs(ids...)
	return ac
}

// AddDependencies adds the "dependencies" edges to the AgentDependency entity.
func (ac *AgentCreate) AddDependencies(a ...*AgentDependency) *AgentCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddDependencyIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (ac *AgentCreate) Mutation() *AgentMutation {
	return ac.mutation
}

// Save creates the Agent in the database.
func (ac *AgentCreate) Save(ctx context.Context) (*Agent, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AgentCreate) SaveX(ctx context.Context) *Agent {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AgentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AgentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AgentCreate) defaults() {
	if _, ok := ac.mutation.Namespace(); !ok {
		v := agent.DefaultNamespace
		ac.mutation.SetNamespace(v)
	}
	if _, ok := ac.mutation.Stability(); !ok {
		v := agent.DefaultStability
		ac.mutation.SetStability(v)
	}
	if _, ok := ac.mutation.Maturity(); !ok {
		v := agent.DefaultMaturity
		ac.mutation.SetMaturity(v)
	}
	if _, ok := ac.mutation.IsInstalled(); !ok {
		v := agent.DefaultIsInstalled
		ac.mutation.SetIsInstalled(v)
	}
	if _, ok := ac.mutation.Branch(); !ok {
		v := agent.DefaultBranch
		ac.mutation.SetBranch(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := agent.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := agent.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.AgentType(); !ok {
		v := agent.DefaultAgentType
		ac.mutation.SetAgentType(v)
	}
	if _, ok := ac.mutation.SupportsMemory(); !ok {
		v := agent.DefaultSupportsMemory
		ac.mutation.SetSupportsMemory(v)
	}
	if _, ok := ac.mutation.SupportsTools(); !ok {
		v := agent.DefaultSupportsTools
		ac.mutation.SetSupportsTools(v)
	}
	if _, ok := ac.mutation.SupportsMultimodal(); !ok {
		v := agent.DefaultSupportsMultimodal
		ac.mutation.SetSupportsMultimodal(v)
	}
	if _, ok := ac.mutation.SessionTimeoutMinutes(); !ok {
		v := agent.DefaultSessionTimeoutMinutes
		ac.mutation.SetSessionTimeoutMinutes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AgentCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Agent.name"`)}
	}
	if _, ok := ac.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "Agent.namespace"`)}
	}
	if _, ok := ac.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Agent.version"`)}
	}
	if _, ok := ac.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Agent.description"`)}
	}
	if _, ok := ac.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Agent.author"`)}
	}
	if _, ok := ac.mutation.License(); !ok {
		return &ValidationError{Name: "license", err: errors.New(`ent: missing required field "Agent.license"`)}
	}
	if _, ok := ac.mutation.Stability(); !ok {
		return &ValidationError{Name: "stability", err: errors.New(`ent: missing required field "Agent.stability"`)}
	}
	if v, ok := ac.mutation.Stability(); ok {
		if err := agent.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Agent.stability": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Maturity(); !ok {
		return &ValidationError{Name: "maturity", err: errors.New(`ent: missing required field "Agent.maturity"`)}
	}
	if v, ok := ac.mutation.Maturity(); ok {
		if err := agent.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Agent.maturity": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ForgeVersion(); !ok {
		return &ValidationError{Name: "forge_version", err: errors.New(`ent: missing required field "Agent.forge_version"`)}
	}
	if _, ok := ac.mutation.Spec(); !ok {
		return &ValidationError{Name: "spec", err: errors.New(`ent: missing required field "Agent.spec"`)}
	}
	if _, ok := ac.mutation.SpecHash(); !ok {
		return &ValidationError{Name: "spec_hash", err: errors.New(`ent: missing required field "Agent.spec_hash"`)}
	}
	if _, ok := ac.mutation.IsInstalled(); !ok {
		return &ValidationError{Name: "is_installed", err: errors.New(`ent: missing required field "Agent.is_installed"`)}
	}
	if _, ok := ac.mutation.CommitHash(); !ok {
		return &ValidationError{Name: "commit_hash", err: errors.New(`ent: missing required field "Agent.commit_hash"`)}
	}
	if _, ok := ac.mutation.Branch(); !ok {
		return &ValidationError{Name: "branch", err: errors.New(`ent: missing required field "Agent.branch"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Agent.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Agent.updated_at"`)}
	}
	if _, ok := ac.mutation.AgentType(); !ok {
		return &ValidationError{Name: "agent_type", err: errors.New(`ent: missing required field "Agent.agent_type"`)}
	}
	if v, ok := ac.mutation.AgentType(); ok {
		if err := agent.AgentTypeValidator(v); err != nil {
			return &ValidationError{Name: "agent_type", err: fmt.Errorf(`ent: validator failed for field "Agent.agent_type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.SupportsMemory(); !ok {
		return &ValidationError{Name: "supports_memory", err: errors.New(`ent: missing required field "Agent.supports_memory"`)}
	}
	if _, ok := ac.mutation.SupportsTools(); !ok {
		return &ValidationError{Name: "supports_tools", err: errors.New(`ent: missing required field "Agent.supports_tools"`)}
	}
	if _, ok := ac.mutation.SupportsMultimodal(); !ok {
		return &ValidationError{Name: "supports_multimodal", err: errors.New(`ent: missing required field "Agent.supports_multimodal"`)}
	}
	if _, ok := ac.mutation.SessionTimeoutMinutes(); !ok {
		return &ValidationError{Name: "session_timeout_minutes", err: errors.New(`ent: missing required field "Agent.session_timeout_minutes"`)}
	}
	if len(ac.mutation.RepositoryIDs()) == 0 {
		return &ValidationError{Name: "repository", err: errors.New(`ent: missing required edge "Agent.repository"`)}
	}
	return nil
}

func (ac *AgentCreate) sqlSave(ctx context.Context) (*Agent, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Agent.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AgentCreate) createSpec() (*Agent, *sqlgraph.CreateSpec) {
	var (
		_node = &Agent{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(agent.Table, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(agent.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Namespace(); ok {
		_spec.SetField(agent.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := ac.mutation.Version(); ok {
		_spec.SetField(agent.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(agent.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ac.mutation.Author(); ok {
		_spec.SetField(agent.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := ac.mutation.License(); ok {
		_spec.SetField(agent.FieldLicense, field.TypeString, value)
		_node.License = value
	}
	if value, ok := ac.mutation.Homepage(); ok {
		_spec.SetField(agent.FieldHomepage, field.TypeString, value)
		_node.Homepage = &value
	}
	if value, ok := ac.mutation.Documentation(); ok {
		_spec.SetField(agent.FieldDocumentation, field.TypeString, value)
		_node.Documentation = &value
	}
	if value, ok := ac.mutation.Tags(); ok {
		_spec.SetField(agent.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := ac.mutation.Categories(); ok {
		_spec.SetField(agent.FieldCategories, field.TypeJSON, value)
		_node.Categories = value
	}
	if value, ok := ac.mutation.Keywords(); ok {
		_spec.SetField(agent.FieldKeywords, field.TypeJSON, value)
		_node.Keywords = value
	}
	if value, ok := ac.mutation.Stability(); ok {
		_spec.SetField(agent.FieldStability, field.TypeEnum, value)
		_node.Stability = value
	}
	if value, ok := ac.mutation.Maturity(); ok {
		_spec.SetField(agent.FieldMaturity, field.TypeEnum, value)
		_node.Maturity = value
	}
	if value, ok := ac.mutation.ForgeVersion(); ok {
		_spec.SetField(agent.FieldForgeVersion, field.TypeString, value)
		_node.ForgeVersion = value
	}
	if value, ok := ac.mutation.Platforms(); ok {
		_spec.SetField(agent.FieldPlatforms, field.TypeJSON, value)
		_node.Platforms = value
	}
	if value, ok := ac.mutation.Spec(); ok {
		_spec.SetField(agent.FieldSpec, field.TypeString, value)
		_node.Spec = value
	}
	if value, ok := ac.mutation.SpecHash(); ok {
		_spec.SetField(agent.FieldSpecHash, field.TypeString, value)
		_node.SpecHash = value
	}
	if value, ok := ac.mutation.IsInstalled(); ok {
		_spec.SetField(agent.FieldIsInstalled, field.TypeBool, value)
		_node.IsInstalled = value
	}
	if value, ok := ac.mutation.InstallPath(); ok {
		_spec.SetField(agent.FieldInstallPath, field.TypeString, value)
		_node.InstallPath = &value
	}
	if value, ok := ac.mutation.InstalledAt(); ok {
		_spec.SetField(agent.FieldInstalledAt, field.TypeTime, value)
		_node.InstalledAt = &value
	}
	if value, ok := ac.mutation.CommitHash(); ok {
		_spec.SetField(agent.FieldCommitHash, field.TypeString, value)
		_node.CommitHash = value
	}
	if value, ok := ac.mutation.Branch(); ok {
		_spec.SetField(agent.FieldBranch, field.TypeString, value)
		_node.Branch = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(agent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.ConfigPath(); ok {
		_spec.SetField(agent.FieldConfigPath, field.TypeString, value)
		_node.ConfigPath = &value
	}
	if value, ok := ac.mutation.AgentConfig(); ok {
		_spec.SetField(agent.FieldAgentConfig, field.TypeJSON, value)
		_node.AgentConfig = value
	}
	if value, ok := ac.mutation.LlmProvider(); ok {
		_spec.SetField(agent.FieldLlmProvider, field.TypeString, value)
		_node.LlmProvider = &value
	}
	if value, ok := ac.mutation.SystemPromptID(); ok {
		_spec.SetField(agent.FieldSystemPromptID, field.TypeString, value)
		_node.SystemPromptID = &value
	}
	if value, ok := ac.mutation.ToolDependencies(); ok {
		_spec.SetField(agent.FieldToolDependencies, field.TypeJSON, value)
		_node.ToolDependencies = value
	}
	if value, ok := ac.mutation.PromptDependencies(); ok {
		_spec.SetField(agent.FieldPromptDependencies, field.TypeJSON, value)
		_node.PromptDependencies = value
	}
	if value, ok := ac.mutation.AgentDependencies(); ok {
		_spec.SetField(agent.FieldAgentDependencies, field.TypeJSON, value)
		_node.AgentDependencies = value
	}
	if value, ok := ac.mutation.AgentType(); ok {
		_spec.SetField(agent.FieldAgentType, field.TypeEnum, value)
		_node.AgentType = value
	}
	if value, ok := ac.mutation.Capabilities(); ok {
		_spec.SetField(agent.FieldCapabilities, field.TypeJSON, value)
		_node.Capabilities = value
	}
	if value, ok := ac.mutation.SupportedLanguages(); ok {
		_spec.SetField(agent.FieldSupportedLanguages, field.TypeJSON, value)
		_node.SupportedLanguages = value
	}
	if value, ok := ac.mutation.SupportsMemory(); ok {
		_spec.SetField(agent.FieldSupportsMemory, field.TypeBool, value)
		_node.SupportsMemory = value
	}
	if value, ok := ac.mutation.SupportsTools(); ok {
		_spec.SetField(agent.FieldSupportsTools, field.TypeBool, value)
		_node.SupportsTools = value
	}
	if value, ok := ac.mutation.SupportsMultimodal(); ok {
		_spec.SetField(agent.FieldSupportsMultimodal, field.TypeBool, value)
		_node.SupportsMultimodal = value
	}
	if value, ok := ac.mutation.ModelPreferences(); ok {
		_spec.SetField(agent.FieldModelPreferences, field.TypeJSON, value)
		_node.ModelPreferences = value
	}
	if value, ok := ac.mutation.DefaultTemperature(); ok {
		_spec.SetField(agent.FieldDefaultTemperature, field.TypeFloat64, value)
		_node.DefaultTemperature = &value
	}
	if value, ok := ac.mutation.DefaultMaxTokens(); ok {
		_spec.SetField(agent.FieldDefaultMaxTokens, field.TypeInt, value)
		_node.DefaultMaxTokens = &value
	}
	if value, ok := ac.mutation.SessionTimeoutMinutes(); ok {
		_spec.SetField(agent.FieldSessionTimeoutMinutes, field.TypeInt, value)
		_node.SessionTimeoutMinutes = value
	}
	if nodes := ac.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.RepositoryTable,
			Columns: []string{agent.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_agents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DependenciesTable,
			Columns: []string{agent.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AgentCreateBulk is the builder for creating many Agent entities in bulk.
type AgentCreateBulk struct {
	config
	err      error
	builders []*AgentCreate
}

// Save creates the Agent entities in the database.
func (acb *AgentCreateBulk) Save(ctx context.Context) ([]*Agent, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Agent, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AgentCreateBulk) SaveX(ctx context.Context) []*Agent {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AgentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AgentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
