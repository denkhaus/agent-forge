// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/denkhaus/agentforge/internal/database/ent/component"
	"github.com/denkhaus/agentforge/internal/database/ent/componentdependency"
)

// ComponentDependency is the model entity for the ComponentDependency schema.
type ComponentDependency struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type componentdependency.Type `json:"type,omitempty"`
	// DependencyName holds the value of the "dependency_name" field.
	DependencyName string `json:"dependency_name,omitempty"`
	// DependencyVersion holds the value of the "dependency_version" field.
	DependencyVersion string `json:"dependency_version,omitempty"`
	// VersionRange holds the value of the "version_range" field.
	VersionRange string `json:"version_range,omitempty"`
	// IsRequired holds the value of the "is_required" field.
	IsRequired bool `json:"is_required,omitempty"`
	// Condition holds the value of the "condition" field.
	Condition *string `json:"condition,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ComponentDependencyQuery when eager-loading is set.
	Edges                  ComponentDependencyEdges `json:"edges"`
	component_dependencies *string
	selectValues           sql.SelectValues
}

// ComponentDependencyEdges holds the relations/edges for other nodes in the graph.
type ComponentDependencyEdges struct {
	// Component holds the value of the component edge.
	Component *Component `json:"component,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ComponentOrErr returns the Component value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ComponentDependencyEdges) ComponentOrErr() (*Component, error) {
	if e.Component != nil {
		return e.Component, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: component.Label}
	}
	return nil, &NotLoadedError{edge: "component"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ComponentDependency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case componentdependency.FieldIsRequired:
			values[i] = new(sql.NullBool)
		case componentdependency.FieldID, componentdependency.FieldType, componentdependency.FieldDependencyName, componentdependency.FieldDependencyVersion, componentdependency.FieldVersionRange, componentdependency.FieldCondition:
			values[i] = new(sql.NullString)
		case componentdependency.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case componentdependency.ForeignKeys[0]: // component_dependencies
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ComponentDependency fields.
func (cd *ComponentDependency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case componentdependency.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cd.ID = value.String
			}
		case componentdependency.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cd.Type = componentdependency.Type(value.String)
			}
		case componentdependency.FieldDependencyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_name", values[i])
			} else if value.Valid {
				cd.DependencyName = value.String
			}
		case componentdependency.FieldDependencyVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_version", values[i])
			} else if value.Valid {
				cd.DependencyVersion = value.String
			}
		case componentdependency.FieldVersionRange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_range", values[i])
			} else if value.Valid {
				cd.VersionRange = value.String
			}
		case componentdependency.FieldIsRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_required", values[i])
			} else if value.Valid {
				cd.IsRequired = value.Bool
			}
		case componentdependency.FieldCondition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field condition", values[i])
			} else if value.Valid {
				cd.Condition = new(string)
				*cd.Condition = value.String
			}
		case componentdependency.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cd.CreatedAt = value.Time
			}
		case componentdependency.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field component_dependencies", values[i])
			} else if value.Valid {
				cd.component_dependencies = new(string)
				*cd.component_dependencies = value.String
			}
		default:
			cd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ComponentDependency.
// This includes values selected through modifiers, order, etc.
func (cd *ComponentDependency) Value(name string) (ent.Value, error) {
	return cd.selectValues.Get(name)
}

// QueryComponent queries the "component" edge of the ComponentDependency entity.
func (cd *ComponentDependency) QueryComponent() *ComponentQuery {
	return NewComponentDependencyClient(cd.config).QueryComponent(cd)
}

// Update returns a builder for updating this ComponentDependency.
// Note that you need to call ComponentDependency.Unwrap() before calling this method if this ComponentDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (cd *ComponentDependency) Update() *ComponentDependencyUpdateOne {
	return NewComponentDependencyClient(cd.config).UpdateOne(cd)
}

// Unwrap unwraps the ComponentDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cd *ComponentDependency) Unwrap() *ComponentDependency {
	_tx, ok := cd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ComponentDependency is not a transactional entity")
	}
	cd.config.driver = _tx.drv
	return cd
}

// String implements the fmt.Stringer.
func (cd *ComponentDependency) String() string {
	var builder strings.Builder
	builder.WriteString("ComponentDependency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cd.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", cd.Type))
	builder.WriteString(", ")
	builder.WriteString("dependency_name=")
	builder.WriteString(cd.DependencyName)
	builder.WriteString(", ")
	builder.WriteString("dependency_version=")
	builder.WriteString(cd.DependencyVersion)
	builder.WriteString(", ")
	builder.WriteString("version_range=")
	builder.WriteString(cd.VersionRange)
	builder.WriteString(", ")
	builder.WriteString("is_required=")
	builder.WriteString(fmt.Sprintf("%v", cd.IsRequired))
	builder.WriteString(", ")
	if v := cd.Condition; v != nil {
		builder.WriteString("condition=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cd.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ComponentDependencies is a parsable slice of ComponentDependency.
type ComponentDependencies []*ComponentDependency
