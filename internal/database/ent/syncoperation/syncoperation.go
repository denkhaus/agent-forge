// Code generated by ent, DO NOT EDIT.

package syncoperation

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the syncoperation type in the database.
	Label = "sync_operation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDirection holds the string denoting the direction field in the database.
	FieldDirection = "direction"
	// FieldRepositoryID holds the string denoting the repository_id field in the database.
	FieldRepositoryID = "repository_id"
	// FieldComponentID holds the string denoting the component_id field in the database.
	FieldComponentID = "component_id"
	// FieldSourceCommit holds the string denoting the source_commit field in the database.
	FieldSourceCommit = "source_commit"
	// FieldTargetCommit holds the string denoting the target_commit field in the database.
	FieldTargetCommit = "target_commit"
	// FieldBranch holds the string denoting the branch field in the database.
	FieldBranch = "branch"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldTotalSteps holds the string denoting the total_steps field in the database.
	FieldTotalSteps = "total_steps"
	// FieldCompletedSteps holds the string denoting the completed_steps field in the database.
	FieldCompletedSteps = "completed_steps"
	// Table holds the table name of the syncoperation in the database.
	Table = "sync_operations"
)

// Columns holds all SQL columns for syncoperation fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldStatus,
	FieldDirection,
	FieldRepositoryID,
	FieldComponentID,
	FieldSourceCommit,
	FieldTargetCommit,
	FieldBranch,
	FieldStartedAt,
	FieldCompletedAt,
	FieldErrorMessage,
	FieldTotalSteps,
	FieldCompletedSteps,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStartedAt holds the default value on creation for the "started_at" field.
	DefaultStartedAt func() time.Time
	// DefaultTotalSteps holds the default value on creation for the "total_steps" field.
	DefaultTotalSteps int
	// DefaultCompletedSteps holds the default value on creation for the "completed_steps" field.
	DefaultCompletedSteps int
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypePULL  Type = "PULL"
	TypePUSH  Type = "PUSH"
	TypeCLONE Type = "CLONE"
	TypeFORK  Type = "FORK"
	TypeMERGE Type = "MERGE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePULL, TypePUSH, TypeCLONE, TypeFORK, TypeMERGE:
		return nil
	default:
		return fmt.Errorf("syncoperation: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusPENDING is the default value of the Status enum.
const DefaultStatus = StatusPENDING

// Status values.
const (
	StatusPENDING   Status = "PENDING"
	StatusRUNNING   Status = "RUNNING"
	StatusCOMPLETED Status = "COMPLETED"
	StatusFAILED    Status = "FAILED"
	StatusCANCELLED Status = "CANCELLED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPENDING, StatusRUNNING, StatusCOMPLETED, StatusFAILED, StatusCANCELLED:
		return nil
	default:
		return fmt.Errorf("syncoperation: invalid enum value for status field: %q", s)
	}
}

// Direction defines the type for the "direction" enum field.
type Direction string

// Direction values.
const (
	DirectionUPSTREAM_TO_LOCAL Direction = "UPSTREAM_TO_LOCAL"
	DirectionLOCAL_TO_UPSTREAM Direction = "LOCAL_TO_UPSTREAM"
	DirectionBIDIRECTIONAL     Direction = "BIDIRECTIONAL"
)

func (d Direction) String() string {
	return string(d)
}

// DirectionValidator is a validator for the "direction" field enum values. It is called by the builders before save.
func DirectionValidator(d Direction) error {
	switch d {
	case DirectionUPSTREAM_TO_LOCAL, DirectionLOCAL_TO_UPSTREAM, DirectionBIDIRECTIONAL:
		return nil
	default:
		return fmt.Errorf("syncoperation: invalid enum value for direction field: %q", d)
	}
}

// OrderOption defines the ordering options for the SyncOperation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDirection orders the results by the direction field.
func ByDirection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDirection, opts...).ToFunc()
}

// ByRepositoryID orders the results by the repository_id field.
func ByRepositoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepositoryID, opts...).ToFunc()
}

// ByComponentID orders the results by the component_id field.
func ByComponentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComponentID, opts...).ToFunc()
}

// BySourceCommit orders the results by the source_commit field.
func BySourceCommit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceCommit, opts...).ToFunc()
}

// ByTargetCommit orders the results by the target_commit field.
func ByTargetCommit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetCommit, opts...).ToFunc()
}

// ByBranch orders the results by the branch field.
func ByBranch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranch, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByTotalSteps orders the results by the total_steps field.
func ByTotalSteps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalSteps, opts...).ToFunc()
}

// ByCompletedSteps orders the results by the completed_steps field.
func ByCompletedSteps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedSteps, opts...).ToFunc()
}
