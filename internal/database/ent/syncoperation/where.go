// Code generated by ent, DO NOT EDIT.

package syncoperation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContainsFold(FieldID, id))
}

// RepositoryID applies equality check predicate on the "repository_id" field. It's identical to RepositoryIDEQ.
func RepositoryID(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldRepositoryID, v))
}

// ComponentID applies equality check predicate on the "component_id" field. It's identical to ComponentIDEQ.
func ComponentID(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldComponentID, v))
}

// SourceCommit applies equality check predicate on the "source_commit" field. It's identical to SourceCommitEQ.
func SourceCommit(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldSourceCommit, v))
}

// TargetCommit applies equality check predicate on the "target_commit" field. It's identical to TargetCommitEQ.
func TargetCommit(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldTargetCommit, v))
}

// Branch applies equality check predicate on the "branch" field. It's identical to BranchEQ.
func Branch(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldBranch, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldCompletedAt, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldErrorMessage, v))
}

// TotalSteps applies equality check predicate on the "total_steps" field. It's identical to TotalStepsEQ.
func TotalSteps(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldTotalSteps, v))
}

// CompletedSteps applies equality check predicate on the "completed_steps" field. It's identical to CompletedStepsEQ.
func CompletedSteps(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldCompletedSteps, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldType, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldStatus, vs...))
}

// DirectionEQ applies the EQ predicate on the "direction" field.
func DirectionEQ(v Direction) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldDirection, v))
}

// DirectionNEQ applies the NEQ predicate on the "direction" field.
func DirectionNEQ(v Direction) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldDirection, v))
}

// DirectionIn applies the In predicate on the "direction" field.
func DirectionIn(vs ...Direction) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldDirection, vs...))
}

// DirectionNotIn applies the NotIn predicate on the "direction" field.
func DirectionNotIn(vs ...Direction) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldDirection, vs...))
}

// RepositoryIDEQ applies the EQ predicate on the "repository_id" field.
func RepositoryIDEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldRepositoryID, v))
}

// RepositoryIDNEQ applies the NEQ predicate on the "repository_id" field.
func RepositoryIDNEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldRepositoryID, v))
}

// RepositoryIDIn applies the In predicate on the "repository_id" field.
func RepositoryIDIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldRepositoryID, vs...))
}

// RepositoryIDNotIn applies the NotIn predicate on the "repository_id" field.
func RepositoryIDNotIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldRepositoryID, vs...))
}

// RepositoryIDGT applies the GT predicate on the "repository_id" field.
func RepositoryIDGT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGT(FieldRepositoryID, v))
}

// RepositoryIDGTE applies the GTE predicate on the "repository_id" field.
func RepositoryIDGTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGTE(FieldRepositoryID, v))
}

// RepositoryIDLT applies the LT predicate on the "repository_id" field.
func RepositoryIDLT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLT(FieldRepositoryID, v))
}

// RepositoryIDLTE applies the LTE predicate on the "repository_id" field.
func RepositoryIDLTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLTE(FieldRepositoryID, v))
}

// RepositoryIDContains applies the Contains predicate on the "repository_id" field.
func RepositoryIDContains(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContains(FieldRepositoryID, v))
}

// RepositoryIDHasPrefix applies the HasPrefix predicate on the "repository_id" field.
func RepositoryIDHasPrefix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasPrefix(FieldRepositoryID, v))
}

// RepositoryIDHasSuffix applies the HasSuffix predicate on the "repository_id" field.
func RepositoryIDHasSuffix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasSuffix(FieldRepositoryID, v))
}

// RepositoryIDIsNil applies the IsNil predicate on the "repository_id" field.
func RepositoryIDIsNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIsNull(FieldRepositoryID))
}

// RepositoryIDNotNil applies the NotNil predicate on the "repository_id" field.
func RepositoryIDNotNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotNull(FieldRepositoryID))
}

// RepositoryIDEqualFold applies the EqualFold predicate on the "repository_id" field.
func RepositoryIDEqualFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEqualFold(FieldRepositoryID, v))
}

// RepositoryIDContainsFold applies the ContainsFold predicate on the "repository_id" field.
func RepositoryIDContainsFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContainsFold(FieldRepositoryID, v))
}

// ComponentIDEQ applies the EQ predicate on the "component_id" field.
func ComponentIDEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldComponentID, v))
}

// ComponentIDNEQ applies the NEQ predicate on the "component_id" field.
func ComponentIDNEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldComponentID, v))
}

// ComponentIDIn applies the In predicate on the "component_id" field.
func ComponentIDIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldComponentID, vs...))
}

// ComponentIDNotIn applies the NotIn predicate on the "component_id" field.
func ComponentIDNotIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldComponentID, vs...))
}

// ComponentIDGT applies the GT predicate on the "component_id" field.
func ComponentIDGT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGT(FieldComponentID, v))
}

// ComponentIDGTE applies the GTE predicate on the "component_id" field.
func ComponentIDGTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGTE(FieldComponentID, v))
}

// ComponentIDLT applies the LT predicate on the "component_id" field.
func ComponentIDLT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLT(FieldComponentID, v))
}

// ComponentIDLTE applies the LTE predicate on the "component_id" field.
func ComponentIDLTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLTE(FieldComponentID, v))
}

// ComponentIDContains applies the Contains predicate on the "component_id" field.
func ComponentIDContains(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContains(FieldComponentID, v))
}

// ComponentIDHasPrefix applies the HasPrefix predicate on the "component_id" field.
func ComponentIDHasPrefix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasPrefix(FieldComponentID, v))
}

// ComponentIDHasSuffix applies the HasSuffix predicate on the "component_id" field.
func ComponentIDHasSuffix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasSuffix(FieldComponentID, v))
}

// ComponentIDIsNil applies the IsNil predicate on the "component_id" field.
func ComponentIDIsNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIsNull(FieldComponentID))
}

// ComponentIDNotNil applies the NotNil predicate on the "component_id" field.
func ComponentIDNotNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotNull(FieldComponentID))
}

// ComponentIDEqualFold applies the EqualFold predicate on the "component_id" field.
func ComponentIDEqualFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEqualFold(FieldComponentID, v))
}

// ComponentIDContainsFold applies the ContainsFold predicate on the "component_id" field.
func ComponentIDContainsFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContainsFold(FieldComponentID, v))
}

// SourceCommitEQ applies the EQ predicate on the "source_commit" field.
func SourceCommitEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldSourceCommit, v))
}

// SourceCommitNEQ applies the NEQ predicate on the "source_commit" field.
func SourceCommitNEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldSourceCommit, v))
}

// SourceCommitIn applies the In predicate on the "source_commit" field.
func SourceCommitIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldSourceCommit, vs...))
}

// SourceCommitNotIn applies the NotIn predicate on the "source_commit" field.
func SourceCommitNotIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldSourceCommit, vs...))
}

// SourceCommitGT applies the GT predicate on the "source_commit" field.
func SourceCommitGT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGT(FieldSourceCommit, v))
}

// SourceCommitGTE applies the GTE predicate on the "source_commit" field.
func SourceCommitGTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGTE(FieldSourceCommit, v))
}

// SourceCommitLT applies the LT predicate on the "source_commit" field.
func SourceCommitLT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLT(FieldSourceCommit, v))
}

// SourceCommitLTE applies the LTE predicate on the "source_commit" field.
func SourceCommitLTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLTE(FieldSourceCommit, v))
}

// SourceCommitContains applies the Contains predicate on the "source_commit" field.
func SourceCommitContains(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContains(FieldSourceCommit, v))
}

// SourceCommitHasPrefix applies the HasPrefix predicate on the "source_commit" field.
func SourceCommitHasPrefix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasPrefix(FieldSourceCommit, v))
}

// SourceCommitHasSuffix applies the HasSuffix predicate on the "source_commit" field.
func SourceCommitHasSuffix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasSuffix(FieldSourceCommit, v))
}

// SourceCommitIsNil applies the IsNil predicate on the "source_commit" field.
func SourceCommitIsNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIsNull(FieldSourceCommit))
}

// SourceCommitNotNil applies the NotNil predicate on the "source_commit" field.
func SourceCommitNotNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotNull(FieldSourceCommit))
}

// SourceCommitEqualFold applies the EqualFold predicate on the "source_commit" field.
func SourceCommitEqualFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEqualFold(FieldSourceCommit, v))
}

// SourceCommitContainsFold applies the ContainsFold predicate on the "source_commit" field.
func SourceCommitContainsFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContainsFold(FieldSourceCommit, v))
}

// TargetCommitEQ applies the EQ predicate on the "target_commit" field.
func TargetCommitEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldTargetCommit, v))
}

// TargetCommitNEQ applies the NEQ predicate on the "target_commit" field.
func TargetCommitNEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldTargetCommit, v))
}

// TargetCommitIn applies the In predicate on the "target_commit" field.
func TargetCommitIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldTargetCommit, vs...))
}

// TargetCommitNotIn applies the NotIn predicate on the "target_commit" field.
func TargetCommitNotIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldTargetCommit, vs...))
}

// TargetCommitGT applies the GT predicate on the "target_commit" field.
func TargetCommitGT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGT(FieldTargetCommit, v))
}

// TargetCommitGTE applies the GTE predicate on the "target_commit" field.
func TargetCommitGTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGTE(FieldTargetCommit, v))
}

// TargetCommitLT applies the LT predicate on the "target_commit" field.
func TargetCommitLT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLT(FieldTargetCommit, v))
}

// TargetCommitLTE applies the LTE predicate on the "target_commit" field.
func TargetCommitLTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLTE(FieldTargetCommit, v))
}

// TargetCommitContains applies the Contains predicate on the "target_commit" field.
func TargetCommitContains(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContains(FieldTargetCommit, v))
}

// TargetCommitHasPrefix applies the HasPrefix predicate on the "target_commit" field.
func TargetCommitHasPrefix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasPrefix(FieldTargetCommit, v))
}

// TargetCommitHasSuffix applies the HasSuffix predicate on the "target_commit" field.
func TargetCommitHasSuffix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasSuffix(FieldTargetCommit, v))
}

// TargetCommitIsNil applies the IsNil predicate on the "target_commit" field.
func TargetCommitIsNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIsNull(FieldTargetCommit))
}

// TargetCommitNotNil applies the NotNil predicate on the "target_commit" field.
func TargetCommitNotNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotNull(FieldTargetCommit))
}

// TargetCommitEqualFold applies the EqualFold predicate on the "target_commit" field.
func TargetCommitEqualFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEqualFold(FieldTargetCommit, v))
}

// TargetCommitContainsFold applies the ContainsFold predicate on the "target_commit" field.
func TargetCommitContainsFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContainsFold(FieldTargetCommit, v))
}

// BranchEQ applies the EQ predicate on the "branch" field.
func BranchEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldBranch, v))
}

// BranchNEQ applies the NEQ predicate on the "branch" field.
func BranchNEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldBranch, v))
}

// BranchIn applies the In predicate on the "branch" field.
func BranchIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldBranch, vs...))
}

// BranchNotIn applies the NotIn predicate on the "branch" field.
func BranchNotIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldBranch, vs...))
}

// BranchGT applies the GT predicate on the "branch" field.
func BranchGT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGT(FieldBranch, v))
}

// BranchGTE applies the GTE predicate on the "branch" field.
func BranchGTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGTE(FieldBranch, v))
}

// BranchLT applies the LT predicate on the "branch" field.
func BranchLT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLT(FieldBranch, v))
}

// BranchLTE applies the LTE predicate on the "branch" field.
func BranchLTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLTE(FieldBranch, v))
}

// BranchContains applies the Contains predicate on the "branch" field.
func BranchContains(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContains(FieldBranch, v))
}

// BranchHasPrefix applies the HasPrefix predicate on the "branch" field.
func BranchHasPrefix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasPrefix(FieldBranch, v))
}

// BranchHasSuffix applies the HasSuffix predicate on the "branch" field.
func BranchHasSuffix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasSuffix(FieldBranch, v))
}

// BranchIsNil applies the IsNil predicate on the "branch" field.
func BranchIsNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIsNull(FieldBranch))
}

// BranchNotNil applies the NotNil predicate on the "branch" field.
func BranchNotNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotNull(FieldBranch))
}

// BranchEqualFold applies the EqualFold predicate on the "branch" field.
func BranchEqualFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEqualFold(FieldBranch, v))
}

// BranchContainsFold applies the ContainsFold predicate on the "branch" field.
func BranchContainsFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContainsFold(FieldBranch, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLTE(FieldStartedAt, v))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotNull(FieldCompletedAt))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldContainsFold(FieldErrorMessage, v))
}

// TotalStepsEQ applies the EQ predicate on the "total_steps" field.
func TotalStepsEQ(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldTotalSteps, v))
}

// TotalStepsNEQ applies the NEQ predicate on the "total_steps" field.
func TotalStepsNEQ(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldTotalSteps, v))
}

// TotalStepsIn applies the In predicate on the "total_steps" field.
func TotalStepsIn(vs ...int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldTotalSteps, vs...))
}

// TotalStepsNotIn applies the NotIn predicate on the "total_steps" field.
func TotalStepsNotIn(vs ...int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldTotalSteps, vs...))
}

// TotalStepsGT applies the GT predicate on the "total_steps" field.
func TotalStepsGT(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGT(FieldTotalSteps, v))
}

// TotalStepsGTE applies the GTE predicate on the "total_steps" field.
func TotalStepsGTE(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGTE(FieldTotalSteps, v))
}

// TotalStepsLT applies the LT predicate on the "total_steps" field.
func TotalStepsLT(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLT(FieldTotalSteps, v))
}

// TotalStepsLTE applies the LTE predicate on the "total_steps" field.
func TotalStepsLTE(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLTE(FieldTotalSteps, v))
}

// CompletedStepsEQ applies the EQ predicate on the "completed_steps" field.
func CompletedStepsEQ(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldEQ(FieldCompletedSteps, v))
}

// CompletedStepsNEQ applies the NEQ predicate on the "completed_steps" field.
func CompletedStepsNEQ(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNEQ(FieldCompletedSteps, v))
}

// CompletedStepsIn applies the In predicate on the "completed_steps" field.
func CompletedStepsIn(vs ...int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldIn(FieldCompletedSteps, vs...))
}

// CompletedStepsNotIn applies the NotIn predicate on the "completed_steps" field.
func CompletedStepsNotIn(vs ...int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldNotIn(FieldCompletedSteps, vs...))
}

// CompletedStepsGT applies the GT predicate on the "completed_steps" field.
func CompletedStepsGT(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGT(FieldCompletedSteps, v))
}

// CompletedStepsGTE applies the GTE predicate on the "completed_steps" field.
func CompletedStepsGTE(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldGTE(FieldCompletedSteps, v))
}

// CompletedStepsLT applies the LT predicate on the "completed_steps" field.
func CompletedStepsLT(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLT(FieldCompletedSteps, v))
}

// CompletedStepsLTE applies the LTE predicate on the "completed_steps" field.
func CompletedStepsLTE(v int) predicate.SyncOperation {
	return predicate.SyncOperation(sql.FieldLTE(FieldCompletedSteps, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SyncOperation) predicate.SyncOperation {
	return predicate.SyncOperation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SyncOperation) predicate.SyncOperation {
	return predicate.SyncOperation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SyncOperation) predicate.SyncOperation {
	return predicate.SyncOperation(sql.NotPredicates(p))
}
