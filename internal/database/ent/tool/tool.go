// Code generated by ent, DO NOT EDIT.

package tool

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tool type in the database.
	Label = "tool"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldLicense holds the string denoting the license field in the database.
	FieldLicense = "license"
	// FieldHomepage holds the string denoting the homepage field in the database.
	FieldHomepage = "homepage"
	// FieldDocumentation holds the string denoting the documentation field in the database.
	FieldDocumentation = "documentation"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldCategories holds the string denoting the categories field in the database.
	FieldCategories = "categories"
	// FieldKeywords holds the string denoting the keywords field in the database.
	FieldKeywords = "keywords"
	// FieldStability holds the string denoting the stability field in the database.
	FieldStability = "stability"
	// FieldMaturity holds the string denoting the maturity field in the database.
	FieldMaturity = "maturity"
	// FieldForgeVersion holds the string denoting the forge_version field in the database.
	FieldForgeVersion = "forge_version"
	// FieldPlatforms holds the string denoting the platforms field in the database.
	FieldPlatforms = "platforms"
	// FieldSpec holds the string denoting the spec field in the database.
	FieldSpec = "spec"
	// FieldSpecHash holds the string denoting the spec_hash field in the database.
	FieldSpecHash = "spec_hash"
	// FieldIsInstalled holds the string denoting the is_installed field in the database.
	FieldIsInstalled = "is_installed"
	// FieldInstallPath holds the string denoting the install_path field in the database.
	FieldInstallPath = "install_path"
	// FieldInstalledAt holds the string denoting the installed_at field in the database.
	FieldInstalledAt = "installed_at"
	// FieldCommitHash holds the string denoting the commit_hash field in the database.
	FieldCommitHash = "commit_hash"
	// FieldBranch holds the string denoting the branch field in the database.
	FieldBranch = "branch"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldExecutionType holds the string denoting the execution_type field in the database.
	FieldExecutionType = "execution_type"
	// FieldSchemaPath holds the string denoting the schema_path field in the database.
	FieldSchemaPath = "schema_path"
	// FieldServerConfig holds the string denoting the server_config field in the database.
	FieldServerConfig = "server_config"
	// FieldCapabilities holds the string denoting the capabilities field in the database.
	FieldCapabilities = "capabilities"
	// FieldEntryPoint holds the string denoting the entry_point field in the database.
	FieldEntryPoint = "entry_point"
	// FieldEnvironmentVariables holds the string denoting the environment_variables field in the database.
	FieldEnvironmentVariables = "environment_variables"
	// FieldRequiredPermissions holds the string denoting the required_permissions field in the database.
	FieldRequiredPermissions = "required_permissions"
	// FieldTimeoutSeconds holds the string denoting the timeout_seconds field in the database.
	FieldTimeoutSeconds = "timeout_seconds"
	// FieldSupportsStreaming holds the string denoting the supports_streaming field in the database.
	FieldSupportsStreaming = "supports_streaming"
	// FieldInputSchema holds the string denoting the input_schema field in the database.
	FieldInputSchema = "input_schema"
	// FieldOutputSchema holds the string denoting the output_schema field in the database.
	FieldOutputSchema = "output_schema"
	// EdgeRepository holds the string denoting the repository edge name in mutations.
	EdgeRepository = "repository"
	// EdgeDependencies holds the string denoting the dependencies edge name in mutations.
	EdgeDependencies = "dependencies"
	// Table holds the table name of the tool in the database.
	Table = "tools"
	// RepositoryTable is the table that holds the repository relation/edge.
	RepositoryTable = "tools"
	// RepositoryInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoryInverseTable = "repositories"
	// RepositoryColumn is the table column denoting the repository relation/edge.
	RepositoryColumn = "repository_tools"
	// DependenciesTable is the table that holds the dependencies relation/edge.
	DependenciesTable = "tool_dependencies"
	// DependenciesInverseTable is the table name for the ToolDependency entity.
	// It exists in this package in order to avoid circular dependency with the "tooldependency" package.
	DependenciesInverseTable = "tool_dependencies"
	// DependenciesColumn is the table column denoting the dependencies relation/edge.
	DependenciesColumn = "tool_dependencies"
)

// Columns holds all SQL columns for tool fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNamespace,
	FieldVersion,
	FieldDescription,
	FieldAuthor,
	FieldLicense,
	FieldHomepage,
	FieldDocumentation,
	FieldTags,
	FieldCategories,
	FieldKeywords,
	FieldStability,
	FieldMaturity,
	FieldForgeVersion,
	FieldPlatforms,
	FieldSpec,
	FieldSpecHash,
	FieldIsInstalled,
	FieldInstallPath,
	FieldInstalledAt,
	FieldCommitHash,
	FieldBranch,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldExecutionType,
	FieldSchemaPath,
	FieldServerConfig,
	FieldCapabilities,
	FieldEntryPoint,
	FieldEnvironmentVariables,
	FieldRequiredPermissions,
	FieldTimeoutSeconds,
	FieldSupportsStreaming,
	FieldInputSchema,
	FieldOutputSchema,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tools"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"repository_tools",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultNamespace holds the default value on creation for the "namespace" field.
	DefaultNamespace string
	// DefaultIsInstalled holds the default value on creation for the "is_installed" field.
	DefaultIsInstalled bool
	// DefaultBranch holds the default value on creation for the "branch" field.
	DefaultBranch string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTimeoutSeconds holds the default value on creation for the "timeout_seconds" field.
	DefaultTimeoutSeconds int
	// DefaultSupportsStreaming holds the default value on creation for the "supports_streaming" field.
	DefaultSupportsStreaming bool
)

// Stability defines the type for the "stability" enum field.
type Stability string

// StabilityEXPERIMENTAL is the default value of the Stability enum.
const DefaultStability = StabilityEXPERIMENTAL

// Stability values.
const (
	StabilityEXPERIMENTAL Stability = "EXPERIMENTAL"
	StabilityBETA         Stability = "BETA"
	StabilitySTABLE       Stability = "STABLE"
	StabilityDEPRECATED   Stability = "DEPRECATED"
)

func (s Stability) String() string {
	return string(s)
}

// StabilityValidator is a validator for the "stability" field enum values. It is called by the builders before save.
func StabilityValidator(s Stability) error {
	switch s {
	case StabilityEXPERIMENTAL, StabilityBETA, StabilitySTABLE, StabilityDEPRECATED:
		return nil
	default:
		return fmt.Errorf("tool: invalid enum value for stability field: %q", s)
	}
}

// Maturity defines the type for the "maturity" enum field.
type Maturity string

// MaturityALPHA is the default value of the Maturity enum.
const DefaultMaturity = MaturityALPHA

// Maturity values.
const (
	MaturityALPHA  Maturity = "ALPHA"
	MaturityBETA   Maturity = "BETA"
	MaturitySTABLE Maturity = "STABLE"
	MaturityMATURE Maturity = "MATURE"
)

func (m Maturity) String() string {
	return string(m)
}

// MaturityValidator is a validator for the "maturity" field enum values. It is called by the builders before save.
func MaturityValidator(m Maturity) error {
	switch m {
	case MaturityALPHA, MaturityBETA, MaturitySTABLE, MaturityMATURE:
		return nil
	default:
		return fmt.Errorf("tool: invalid enum value for maturity field: %q", m)
	}
}

// ExecutionType defines the type for the "execution_type" enum field.
type ExecutionType string

// ExecutionTypeMCP is the default value of the ExecutionType enum.
const DefaultExecutionType = ExecutionTypeMCP

// ExecutionType values.
const (
	ExecutionTypeMCP      ExecutionType = "MCP"
	ExecutionTypeHTTP     ExecutionType = "HTTP"
	ExecutionTypeBINARY   ExecutionType = "BINARY"
	ExecutionTypeFUNCTION ExecutionType = "FUNCTION"
)

func (et ExecutionType) String() string {
	return string(et)
}

// ExecutionTypeValidator is a validator for the "execution_type" field enum values. It is called by the builders before save.
func ExecutionTypeValidator(et ExecutionType) error {
	switch et {
	case ExecutionTypeMCP, ExecutionTypeHTTP, ExecutionTypeBINARY, ExecutionTypeFUNCTION:
		return nil
	default:
		return fmt.Errorf("tool: invalid enum value for execution_type field: %q", et)
	}
}

// OrderOption defines the ordering options for the Tool queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByLicense orders the results by the license field.
func ByLicense(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicense, opts...).ToFunc()
}

// ByHomepage orders the results by the homepage field.
func ByHomepage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomepage, opts...).ToFunc()
}

// ByDocumentation orders the results by the documentation field.
func ByDocumentation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentation, opts...).ToFunc()
}

// ByStability orders the results by the stability field.
func ByStability(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStability, opts...).ToFunc()
}

// ByMaturity orders the results by the maturity field.
func ByMaturity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaturity, opts...).ToFunc()
}

// ByForgeVersion orders the results by the forge_version field.
func ByForgeVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForgeVersion, opts...).ToFunc()
}

// BySpec orders the results by the spec field.
func BySpec(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpec, opts...).ToFunc()
}

// BySpecHash orders the results by the spec_hash field.
func BySpecHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpecHash, opts...).ToFunc()
}

// ByIsInstalled orders the results by the is_installed field.
func ByIsInstalled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsInstalled, opts...).ToFunc()
}

// ByInstallPath orders the results by the install_path field.
func ByInstallPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallPath, opts...).ToFunc()
}

// ByInstalledAt orders the results by the installed_at field.
func ByInstalledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstalledAt, opts...).ToFunc()
}

// ByCommitHash orders the results by the commit_hash field.
func ByCommitHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitHash, opts...).ToFunc()
}

// ByBranch orders the results by the branch field.
func ByBranch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranch, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByExecutionType orders the results by the execution_type field.
func ByExecutionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionType, opts...).ToFunc()
}

// BySchemaPath orders the results by the schema_path field.
func BySchemaPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchemaPath, opts...).ToFunc()
}

// ByEntryPoint orders the results by the entry_point field.
func ByEntryPoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryPoint, opts...).ToFunc()
}

// ByTimeoutSeconds orders the results by the timeout_seconds field.
func ByTimeoutSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeoutSeconds, opts...).ToFunc()
}

// BySupportsStreaming orders the results by the supports_streaming field.
func BySupportsStreaming(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSupportsStreaming, opts...).ToFunc()
}

// ByRepositoryField orders the results by repository field.
func ByRepositoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepositoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByDependenciesCount orders the results by dependencies count.
func ByDependenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependenciesStep(), opts...)
	}
}

// ByDependencies orders the results by dependencies terms.
func ByDependencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRepositoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepositoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RepositoryTable, RepositoryColumn),
	)
}
func newDependenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DependenciesTable, DependenciesColumn),
	)
}
