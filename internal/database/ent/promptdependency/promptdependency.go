// Code generated by ent, DO NOT EDIT.

package promptdependency

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the promptdependency type in the database.
	Label = "prompt_dependency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDependencyName holds the string denoting the dependency_name field in the database.
	FieldDependencyName = "dependency_name"
	// FieldDependencyVersion holds the string denoting the dependency_version field in the database.
	FieldDependencyVersion = "dependency_version"
	// FieldVersionRange holds the string denoting the version_range field in the database.
	FieldVersionRange = "version_range"
	// FieldIsRequired holds the string denoting the is_required field in the database.
	FieldIsRequired = "is_required"
	// FieldCondition holds the string denoting the condition field in the database.
	FieldCondition = "condition"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgePrompt holds the string denoting the prompt edge name in mutations.
	EdgePrompt = "prompt"
	// Table holds the table name of the promptdependency in the database.
	Table = "prompt_dependencies"
	// PromptTable is the table that holds the prompt relation/edge.
	PromptTable = "prompt_dependencies"
	// PromptInverseTable is the table name for the Prompt entity.
	// It exists in this package in order to avoid circular dependency with the "prompt" package.
	PromptInverseTable = "prompts"
	// PromptColumn is the table column denoting the prompt relation/edge.
	PromptColumn = "prompt_dependencies"
)

// Columns holds all SQL columns for promptdependency fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldDependencyName,
	FieldDependencyVersion,
	FieldVersionRange,
	FieldIsRequired,
	FieldCondition,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "prompt_dependencies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"prompt_dependencies",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsRequired holds the default value on creation for the "is_required" field.
	DefaultIsRequired bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// TypeRUNTIME is the default value of the Type enum.
const DefaultType = TypeRUNTIME

// Type values.
const (
	TypeRUNTIME  Type = "RUNTIME"
	TypeBUILD    Type = "BUILD"
	TypeOPTIONAL Type = "OPTIONAL"
	TypePEER     Type = "PEER"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeRUNTIME, TypeBUILD, TypeOPTIONAL, TypePEER:
		return nil
	default:
		return fmt.Errorf("promptdependency: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the PromptDependency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDependencyName orders the results by the dependency_name field.
func ByDependencyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDependencyName, opts...).ToFunc()
}

// ByDependencyVersion orders the results by the dependency_version field.
func ByDependencyVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDependencyVersion, opts...).ToFunc()
}

// ByVersionRange orders the results by the version_range field.
func ByVersionRange(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersionRange, opts...).ToFunc()
}

// ByIsRequired orders the results by the is_required field.
func ByIsRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRequired, opts...).ToFunc()
}

// ByCondition orders the results by the condition field.
func ByCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCondition, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByPromptField orders the results by prompt field.
func ByPromptField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPromptStep(), sql.OrderByField(field, opts...))
	}
}
func newPromptStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PromptInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PromptTable, PromptColumn),
	)
}
