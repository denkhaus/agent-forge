// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/syncoperation"
)

// SyncOperationCreate is the builder for creating a SyncOperation entity.
type SyncOperationCreate struct {
	config
	mutation *SyncOperationMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (soc *SyncOperationCreate) SetType(s syncoperation.Type) *SyncOperationCreate {
	soc.mutation.SetType(s)
	return soc
}

// SetStatus sets the "status" field.
func (soc *SyncOperationCreate) SetStatus(s syncoperation.Status) *SyncOperationCreate {
	soc.mutation.SetStatus(s)
	return soc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (soc *SyncOperationCreate) SetNillableStatus(s *syncoperation.Status) *SyncOperationCreate {
	if s != nil {
		soc.SetStatus(*s)
	}
	return soc
}

// SetDirection sets the "direction" field.
func (soc *SyncOperationCreate) SetDirection(s syncoperation.Direction) *SyncOperationCreate {
	soc.mutation.SetDirection(s)
	return soc
}

// SetRepositoryID sets the "repository_id" field.
func (soc *SyncOperationCreate) SetRepositoryID(s string) *SyncOperationCreate {
	soc.mutation.SetRepositoryID(s)
	return soc
}

// SetNillableRepositoryID sets the "repository_id" field if the given value is not nil.
func (soc *SyncOperationCreate) SetNillableRepositoryID(s *string) *SyncOperationCreate {
	if s != nil {
		soc.SetRepositoryID(*s)
	}
	return soc
}

// SetComponentID sets the "component_id" field.
func (soc *SyncOperationCreate) SetComponentID(s string) *SyncOperationCreate {
	soc.mutation.SetComponentID(s)
	return soc
}

// SetNillableComponentID sets the "component_id" field if the given value is not nil.
func (soc *SyncOperationCreate) SetNillableComponentID(s *string) *SyncOperationCreate {
	if s != nil {
		soc.SetComponentID(*s)
	}
	return soc
}

// SetSourceCommit sets the "source_commit" field.
func (soc *SyncOperationCreate) SetSourceCommit(s string) *SyncOperationCreate {
	soc.mutation.SetSourceCommit(s)
	return soc
}

// SetNillableSourceCommit sets the "source_commit" field if the given value is not nil.
func (soc *SyncOperationCreate) SetNillableSourceCommit(s *string) *SyncOperationCreate {
	if s != nil {
		soc.SetSourceCommit(*s)
	}
	return soc
}

// SetTargetCommit sets the "target_commit" field.
func (soc *SyncOperationCreate) SetTargetCommit(s string) *SyncOperationCreate {
	soc.mutation.SetTargetCommit(s)
	return soc
}

// SetNillableTargetCommit sets the "target_commit" field if the given value is not nil.
func (soc *SyncOperationCreate) SetNillableTargetCommit(s *string) *SyncOperationCreate {
	if s != nil {
		soc.SetTargetCommit(*s)
	}
	return soc
}

// SetBranch sets the "branch" field.
func (soc *SyncOperationCreate) SetBranch(s string) *SyncOperationCreate {
	soc.mutation.SetBranch(s)
	return soc
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (soc *SyncOperationCreate) SetNillableBranch(s *string) *SyncOperationCreate {
	if s != nil {
		soc.SetBranch(*s)
	}
	return soc
}

// SetStartedAt sets the "started_at" field.
func (soc *SyncOperationCreate) SetStartedAt(t time.Time) *SyncOperationCreate {
	soc.mutation.SetStartedAt(t)
	return soc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (soc *SyncOperationCreate) SetNillableStartedAt(t *time.Time) *SyncOperationCreate {
	if t != nil {
		soc.SetStartedAt(*t)
	}
	return soc
}

// SetCompletedAt sets the "completed_at" field.
func (soc *SyncOperationCreate) SetCompletedAt(t time.Time) *SyncOperationCreate {
	soc.mutation.SetCompletedAt(t)
	return soc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (soc *SyncOperationCreate) SetNillableCompletedAt(t *time.Time) *SyncOperationCreate {
	if t != nil {
		soc.SetCompletedAt(*t)
	}
	return soc
}

// SetErrorMessage sets the "error_message" field.
func (soc *SyncOperationCreate) SetErrorMessage(s string) *SyncOperationCreate {
	soc.mutation.SetErrorMessage(s)
	return soc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (soc *SyncOperationCreate) SetNillableErrorMessage(s *string) *SyncOperationCreate {
	if s != nil {
		soc.SetErrorMessage(*s)
	}
	return soc
}

// SetTotalSteps sets the "total_steps" field.
func (soc *SyncOperationCreate) SetTotalSteps(i int) *SyncOperationCreate {
	soc.mutation.SetTotalSteps(i)
	return soc
}

// SetNillableTotalSteps sets the "total_steps" field if the given value is not nil.
func (soc *SyncOperationCreate) SetNillableTotalSteps(i *int) *SyncOperationCreate {
	if i != nil {
		soc.SetTotalSteps(*i)
	}
	return soc
}

// SetCompletedSteps sets the "completed_steps" field.
func (soc *SyncOperationCreate) SetCompletedSteps(i int) *SyncOperationCreate {
	soc.mutation.SetCompletedSteps(i)
	return soc
}

// SetNillableCompletedSteps sets the "completed_steps" field if the given value is not nil.
func (soc *SyncOperationCreate) SetNillableCompletedSteps(i *int) *SyncOperationCreate {
	if i != nil {
		soc.SetCompletedSteps(*i)
	}
	return soc
}

// SetID sets the "id" field.
func (soc *SyncOperationCreate) SetID(s string) *SyncOperationCreate {
	soc.mutation.SetID(s)
	return soc
}

// Mutation returns the SyncOperationMutation object of the builder.
func (soc *SyncOperationCreate) Mutation() *SyncOperationMutation {
	return soc.mutation
}

// Save creates the SyncOperation in the database.
func (soc *SyncOperationCreate) Save(ctx context.Context) (*SyncOperation, error) {
	soc.defaults()
	return withHooks(ctx, soc.sqlSave, soc.mutation, soc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (soc *SyncOperationCreate) SaveX(ctx context.Context) *SyncOperation {
	v, err := soc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (soc *SyncOperationCreate) Exec(ctx context.Context) error {
	_, err := soc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (soc *SyncOperationCreate) ExecX(ctx context.Context) {
	if err := soc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (soc *SyncOperationCreate) defaults() {
	if _, ok := soc.mutation.Status(); !ok {
		v := syncoperation.DefaultStatus
		soc.mutation.SetStatus(v)
	}
	if _, ok := soc.mutation.StartedAt(); !ok {
		v := syncoperation.DefaultStartedAt()
		soc.mutation.SetStartedAt(v)
	}
	if _, ok := soc.mutation.TotalSteps(); !ok {
		v := syncoperation.DefaultTotalSteps
		soc.mutation.SetTotalSteps(v)
	}
	if _, ok := soc.mutation.CompletedSteps(); !ok {
		v := syncoperation.DefaultCompletedSteps
		soc.mutation.SetCompletedSteps(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (soc *SyncOperationCreate) check() error {
	if _, ok := soc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SyncOperation.type"`)}
	}
	if v, ok := soc.mutation.GetType(); ok {
		if err := syncoperation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SyncOperation.type": %w`, err)}
		}
	}
	if _, ok := soc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SyncOperation.status"`)}
	}
	if v, ok := soc.mutation.Status(); ok {
		if err := syncoperation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SyncOperation.status": %w`, err)}
		}
	}
	if _, ok := soc.mutation.Direction(); !ok {
		return &ValidationError{Name: "direction", err: errors.New(`ent: missing required field "SyncOperation.direction"`)}
	}
	if v, ok := soc.mutation.Direction(); ok {
		if err := syncoperation.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`ent: validator failed for field "SyncOperation.direction": %w`, err)}
		}
	}
	if _, ok := soc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "SyncOperation.started_at"`)}
	}
	if _, ok := soc.mutation.TotalSteps(); !ok {
		return &ValidationError{Name: "total_steps", err: errors.New(`ent: missing required field "SyncOperation.total_steps"`)}
	}
	if _, ok := soc.mutation.CompletedSteps(); !ok {
		return &ValidationError{Name: "completed_steps", err: errors.New(`ent: missing required field "SyncOperation.completed_steps"`)}
	}
	return nil
}

func (soc *SyncOperationCreate) sqlSave(ctx context.Context) (*SyncOperation, error) {
	if err := soc.check(); err != nil {
		return nil, err
	}
	_node, _spec := soc.createSpec()
	if err := sqlgraph.CreateNode(ctx, soc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SyncOperation.ID type: %T", _spec.ID.Value)
		}
	}
	soc.mutation.id = &_node.ID
	soc.mutation.done = true
	return _node, nil
}

func (soc *SyncOperationCreate) createSpec() (*SyncOperation, *sqlgraph.CreateSpec) {
	var (
		_node = &SyncOperation{config: soc.config}
		_spec = sqlgraph.NewCreateSpec(syncoperation.Table, sqlgraph.NewFieldSpec(syncoperation.FieldID, field.TypeString))
	)
	if id, ok := soc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := soc.mutation.GetType(); ok {
		_spec.SetField(syncoperation.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := soc.mutation.Status(); ok {
		_spec.SetField(syncoperation.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := soc.mutation.Direction(); ok {
		_spec.SetField(syncoperation.FieldDirection, field.TypeEnum, value)
		_node.Direction = value
	}
	if value, ok := soc.mutation.RepositoryID(); ok {
		_spec.SetField(syncoperation.FieldRepositoryID, field.TypeString, value)
		_node.RepositoryID = &value
	}
	if value, ok := soc.mutation.ComponentID(); ok {
		_spec.SetField(syncoperation.FieldComponentID, field.TypeString, value)
		_node.ComponentID = &value
	}
	if value, ok := soc.mutation.SourceCommit(); ok {
		_spec.SetField(syncoperation.FieldSourceCommit, field.TypeString, value)
		_node.SourceCommit = &value
	}
	if value, ok := soc.mutation.TargetCommit(); ok {
		_spec.SetField(syncoperation.FieldTargetCommit, field.TypeString, value)
		_node.TargetCommit = &value
	}
	if value, ok := soc.mutation.Branch(); ok {
		_spec.SetField(syncoperation.FieldBranch, field.TypeString, value)
		_node.Branch = &value
	}
	if value, ok := soc.mutation.StartedAt(); ok {
		_spec.SetField(syncoperation.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := soc.mutation.CompletedAt(); ok {
		_spec.SetField(syncoperation.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := soc.mutation.ErrorMessage(); ok {
		_spec.SetField(syncoperation.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = &value
	}
	if value, ok := soc.mutation.TotalSteps(); ok {
		_spec.SetField(syncoperation.FieldTotalSteps, field.TypeInt, value)
		_node.TotalSteps = value
	}
	if value, ok := soc.mutation.CompletedSteps(); ok {
		_spec.SetField(syncoperation.FieldCompletedSteps, field.TypeInt, value)
		_node.CompletedSteps = value
	}
	return _node, _spec
}

// SyncOperationCreateBulk is the builder for creating many SyncOperation entities in bulk.
type SyncOperationCreateBulk struct {
	config
	err      error
	builders []*SyncOperationCreate
}

// Save creates the SyncOperation entities in the database.
func (socb *SyncOperationCreateBulk) Save(ctx context.Context) ([]*SyncOperation, error) {
	if socb.err != nil {
		return nil, socb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(socb.builders))
	nodes := make([]*SyncOperation, len(socb.builders))
	mutators := make([]Mutator, len(socb.builders))
	for i := range socb.builders {
		func(i int, root context.Context) {
			builder := socb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SyncOperationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, socb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, socb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, socb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (socb *SyncOperationCreateBulk) SaveX(ctx context.Context) []*SyncOperation {
	v, err := socb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (socb *SyncOperationCreateBulk) Exec(ctx context.Context) error {
	_, err := socb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (socb *SyncOperationCreateBulk) ExecX(ctx context.Context) {
	if err := socb.Exec(ctx); err != nil {
		panic(err)
	}
}
