// Code generated by ent, DO NOT EDIT.

package repository

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldName, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldURL, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldIsActive, v))
}

// DefaultBranch applies equality check predicate on the "default_branch" field. It's identical to DefaultBranchEQ.
func DefaultBranch(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDefaultBranch, v))
}

// LastSync applies equality check predicate on the "last_sync" field. It's identical to LastSyncEQ.
func LastSync(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLastSync, v))
}

// Manifest applies equality check predicate on the "manifest" field. It's identical to ManifestEQ.
func Manifest(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldManifest, v))
}

// ManifestHash applies equality check predicate on the "manifest_hash" field. It's identical to ManifestHashEQ.
func ManifestHash(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldManifestHash, v))
}

// HasWriteAccess applies equality check predicate on the "has_write_access" field. It's identical to HasWriteAccessEQ.
func HasWriteAccess(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasWriteAccess, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldAccessToken, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldName, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldURL, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldType, vs...))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldIsActive, v))
}

// DefaultBranchEQ applies the EQ predicate on the "default_branch" field.
func DefaultBranchEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDefaultBranch, v))
}

// DefaultBranchNEQ applies the NEQ predicate on the "default_branch" field.
func DefaultBranchNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldDefaultBranch, v))
}

// DefaultBranchIn applies the In predicate on the "default_branch" field.
func DefaultBranchIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldDefaultBranch, vs...))
}

// DefaultBranchNotIn applies the NotIn predicate on the "default_branch" field.
func DefaultBranchNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldDefaultBranch, vs...))
}

// DefaultBranchGT applies the GT predicate on the "default_branch" field.
func DefaultBranchGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldDefaultBranch, v))
}

// DefaultBranchGTE applies the GTE predicate on the "default_branch" field.
func DefaultBranchGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldDefaultBranch, v))
}

// DefaultBranchLT applies the LT predicate on the "default_branch" field.
func DefaultBranchLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldDefaultBranch, v))
}

// DefaultBranchLTE applies the LTE predicate on the "default_branch" field.
func DefaultBranchLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldDefaultBranch, v))
}

// DefaultBranchContains applies the Contains predicate on the "default_branch" field.
func DefaultBranchContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldDefaultBranch, v))
}

// DefaultBranchHasPrefix applies the HasPrefix predicate on the "default_branch" field.
func DefaultBranchHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldDefaultBranch, v))
}

// DefaultBranchHasSuffix applies the HasSuffix predicate on the "default_branch" field.
func DefaultBranchHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldDefaultBranch, v))
}

// DefaultBranchEqualFold applies the EqualFold predicate on the "default_branch" field.
func DefaultBranchEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldDefaultBranch, v))
}

// DefaultBranchContainsFold applies the ContainsFold predicate on the "default_branch" field.
func DefaultBranchContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldDefaultBranch, v))
}

// LastSyncEQ applies the EQ predicate on the "last_sync" field.
func LastSyncEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLastSync, v))
}

// LastSyncNEQ applies the NEQ predicate on the "last_sync" field.
func LastSyncNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldLastSync, v))
}

// LastSyncIn applies the In predicate on the "last_sync" field.
func LastSyncIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldLastSync, vs...))
}

// LastSyncNotIn applies the NotIn predicate on the "last_sync" field.
func LastSyncNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldLastSync, vs...))
}

// LastSyncGT applies the GT predicate on the "last_sync" field.
func LastSyncGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldLastSync, v))
}

// LastSyncGTE applies the GTE predicate on the "last_sync" field.
func LastSyncGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldLastSync, v))
}

// LastSyncLT applies the LT predicate on the "last_sync" field.
func LastSyncLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldLastSync, v))
}

// LastSyncLTE applies the LTE predicate on the "last_sync" field.
func LastSyncLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldLastSync, v))
}

// LastSyncIsNil applies the IsNil predicate on the "last_sync" field.
func LastSyncIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldLastSync))
}

// LastSyncNotNil applies the NotNil predicate on the "last_sync" field.
func LastSyncNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldLastSync))
}

// SyncStatusEQ applies the EQ predicate on the "sync_status" field.
func SyncStatusEQ(v SyncStatus) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldSyncStatus, v))
}

// SyncStatusNEQ applies the NEQ predicate on the "sync_status" field.
func SyncStatusNEQ(v SyncStatus) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldSyncStatus, v))
}

// SyncStatusIn applies the In predicate on the "sync_status" field.
func SyncStatusIn(vs ...SyncStatus) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldSyncStatus, vs...))
}

// SyncStatusNotIn applies the NotIn predicate on the "sync_status" field.
func SyncStatusNotIn(vs ...SyncStatus) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldSyncStatus, vs...))
}

// ManifestEQ applies the EQ predicate on the "manifest" field.
func ManifestEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldManifest, v))
}

// ManifestNEQ applies the NEQ predicate on the "manifest" field.
func ManifestNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldManifest, v))
}

// ManifestIn applies the In predicate on the "manifest" field.
func ManifestIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldManifest, vs...))
}

// ManifestNotIn applies the NotIn predicate on the "manifest" field.
func ManifestNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldManifest, vs...))
}

// ManifestGT applies the GT predicate on the "manifest" field.
func ManifestGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldManifest, v))
}

// ManifestGTE applies the GTE predicate on the "manifest" field.
func ManifestGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldManifest, v))
}

// ManifestLT applies the LT predicate on the "manifest" field.
func ManifestLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldManifest, v))
}

// ManifestLTE applies the LTE predicate on the "manifest" field.
func ManifestLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldManifest, v))
}

// ManifestContains applies the Contains predicate on the "manifest" field.
func ManifestContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldManifest, v))
}

// ManifestHasPrefix applies the HasPrefix predicate on the "manifest" field.
func ManifestHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldManifest, v))
}

// ManifestHasSuffix applies the HasSuffix predicate on the "manifest" field.
func ManifestHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldManifest, v))
}

// ManifestIsNil applies the IsNil predicate on the "manifest" field.
func ManifestIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldManifest))
}

// ManifestNotNil applies the NotNil predicate on the "manifest" field.
func ManifestNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldManifest))
}

// ManifestEqualFold applies the EqualFold predicate on the "manifest" field.
func ManifestEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldManifest, v))
}

// ManifestContainsFold applies the ContainsFold predicate on the "manifest" field.
func ManifestContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldManifest, v))
}

// ManifestHashEQ applies the EQ predicate on the "manifest_hash" field.
func ManifestHashEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldManifestHash, v))
}

// ManifestHashNEQ applies the NEQ predicate on the "manifest_hash" field.
func ManifestHashNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldManifestHash, v))
}

// ManifestHashIn applies the In predicate on the "manifest_hash" field.
func ManifestHashIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldManifestHash, vs...))
}

// ManifestHashNotIn applies the NotIn predicate on the "manifest_hash" field.
func ManifestHashNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldManifestHash, vs...))
}

// ManifestHashGT applies the GT predicate on the "manifest_hash" field.
func ManifestHashGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldManifestHash, v))
}

// ManifestHashGTE applies the GTE predicate on the "manifest_hash" field.
func ManifestHashGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldManifestHash, v))
}

// ManifestHashLT applies the LT predicate on the "manifest_hash" field.
func ManifestHashLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldManifestHash, v))
}

// ManifestHashLTE applies the LTE predicate on the "manifest_hash" field.
func ManifestHashLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldManifestHash, v))
}

// ManifestHashContains applies the Contains predicate on the "manifest_hash" field.
func ManifestHashContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldManifestHash, v))
}

// ManifestHashHasPrefix applies the HasPrefix predicate on the "manifest_hash" field.
func ManifestHashHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldManifestHash, v))
}

// ManifestHashHasSuffix applies the HasSuffix predicate on the "manifest_hash" field.
func ManifestHashHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldManifestHash, v))
}

// ManifestHashIsNil applies the IsNil predicate on the "manifest_hash" field.
func ManifestHashIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldManifestHash))
}

// ManifestHashNotNil applies the NotNil predicate on the "manifest_hash" field.
func ManifestHashNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldManifestHash))
}

// ManifestHashEqualFold applies the EqualFold predicate on the "manifest_hash" field.
func ManifestHashEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldManifestHash, v))
}

// ManifestHashContainsFold applies the ContainsFold predicate on the "manifest_hash" field.
func ManifestHashContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldManifestHash, v))
}

// HasWriteAccessEQ applies the EQ predicate on the "has_write_access" field.
func HasWriteAccessEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldHasWriteAccess, v))
}

// HasWriteAccessNEQ applies the NEQ predicate on the "has_write_access" field.
func HasWriteAccessNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldHasWriteAccess, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenIsNil applies the IsNil predicate on the "access_token" field.
func AccessTokenIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldAccessToken))
}

// AccessTokenNotNil applies the NotNil predicate on the "access_token" field.
func AccessTokenNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldAccessToken))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldAccessToken, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasComponents applies the HasEdge predicate on the "components" edge.
func HasComponents() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ComponentsTable, ComponentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasComponentsWith applies the HasEdge predicate on the "components" edge with a given conditions (other predicates).
func HasComponentsWith(preds ...predicate.Component) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newComponentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTools applies the HasEdge predicate on the "tools" edge.
func HasTools() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ToolsTable, ToolsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToolsWith applies the HasEdge predicate on the "tools" edge with a given conditions (other predicates).
func HasToolsWith(preds ...predicate.Tool) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newToolsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrompts applies the HasEdge predicate on the "prompts" edge.
func HasPrompts() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PromptsTable, PromptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPromptsWith applies the HasEdge predicate on the "prompts" edge with a given conditions (other predicates).
func HasPromptsWith(preds ...predicate.Prompt) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newPromptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgents applies the HasEdge predicate on the "agents" edge.
func HasAgents() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AgentsTable, AgentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentsWith applies the HasEdge predicate on the "agents" edge with a given conditions (other predicates).
func HasAgentsWith(preds ...predicate.Agent) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newAgentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasForks applies the HasEdge predicate on the "forks" edge.
func HasForks() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ForksTable, ForksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasForksWith applies the HasEdge predicate on the "forks" edge with a given conditions (other predicates).
func HasForksWith(preds ...predicate.Fork) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newForksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.NotPredicates(p))
}
