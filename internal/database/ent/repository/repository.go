// Code generated by ent, DO NOT EDIT.

package repository

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the repository type in the database.
	Label = "repository"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldDefaultBranch holds the string denoting the default_branch field in the database.
	FieldDefaultBranch = "default_branch"
	// FieldLastSync holds the string denoting the last_sync field in the database.
	FieldLastSync = "last_sync"
	// FieldSyncStatus holds the string denoting the sync_status field in the database.
	FieldSyncStatus = "sync_status"
	// FieldManifest holds the string denoting the manifest field in the database.
	FieldManifest = "manifest"
	// FieldManifestHash holds the string denoting the manifest_hash field in the database.
	FieldManifestHash = "manifest_hash"
	// FieldHasWriteAccess holds the string denoting the has_write_access field in the database.
	FieldHasWriteAccess = "has_write_access"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeComponents holds the string denoting the components edge name in mutations.
	EdgeComponents = "components"
	// EdgeTools holds the string denoting the tools edge name in mutations.
	EdgeTools = "tools"
	// EdgePrompts holds the string denoting the prompts edge name in mutations.
	EdgePrompts = "prompts"
	// EdgeAgents holds the string denoting the agents edge name in mutations.
	EdgeAgents = "agents"
	// EdgeForks holds the string denoting the forks edge name in mutations.
	EdgeForks = "forks"
	// Table holds the table name of the repository in the database.
	Table = "repositories"
	// ComponentsTable is the table that holds the components relation/edge.
	ComponentsTable = "components"
	// ComponentsInverseTable is the table name for the Component entity.
	// It exists in this package in order to avoid circular dependency with the "component" package.
	ComponentsInverseTable = "components"
	// ComponentsColumn is the table column denoting the components relation/edge.
	ComponentsColumn = "repository_components"
	// ToolsTable is the table that holds the tools relation/edge.
	ToolsTable = "tools"
	// ToolsInverseTable is the table name for the Tool entity.
	// It exists in this package in order to avoid circular dependency with the "tool" package.
	ToolsInverseTable = "tools"
	// ToolsColumn is the table column denoting the tools relation/edge.
	ToolsColumn = "repository_tools"
	// PromptsTable is the table that holds the prompts relation/edge.
	PromptsTable = "prompts"
	// PromptsInverseTable is the table name for the Prompt entity.
	// It exists in this package in order to avoid circular dependency with the "prompt" package.
	PromptsInverseTable = "prompts"
	// PromptsColumn is the table column denoting the prompts relation/edge.
	PromptsColumn = "repository_prompts"
	// AgentsTable is the table that holds the agents relation/edge.
	AgentsTable = "agents"
	// AgentsInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	AgentsInverseTable = "agents"
	// AgentsColumn is the table column denoting the agents relation/edge.
	AgentsColumn = "repository_agents"
	// ForksTable is the table that holds the forks relation/edge.
	ForksTable = "forks"
	// ForksInverseTable is the table name for the Fork entity.
	// It exists in this package in order to avoid circular dependency with the "fork" package.
	ForksInverseTable = "forks"
	// ForksColumn is the table column denoting the forks relation/edge.
	ForksColumn = "repository_forks"
)

// Columns holds all SQL columns for repository fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldURL,
	FieldType,
	FieldIsActive,
	FieldDefaultBranch,
	FieldLastSync,
	FieldSyncStatus,
	FieldManifest,
	FieldManifestHash,
	FieldHasWriteAccess,
	FieldAccessToken,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultDefaultBranch holds the default value on creation for the "default_branch" field.
	DefaultDefaultBranch string
	// DefaultHasWriteAccess holds the default value on creation for the "has_write_access" field.
	DefaultHasWriteAccess bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// TypeGITHUB is the default value of the Type enum.
const DefaultType = TypeGITHUB

// Type values.
const (
	TypeGITHUB    Type = "GITHUB"
	TypeGITLAB    Type = "GITLAB"
	TypeBITBUCKET Type = "BITBUCKET"
	TypeLOCAL     Type = "LOCAL"
	TypeOTHER     Type = "OTHER"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeGITHUB, TypeGITLAB, TypeBITBUCKET, TypeLOCAL, TypeOTHER:
		return nil
	default:
		return fmt.Errorf("repository: invalid enum value for type field: %q", _type)
	}
}

// SyncStatus defines the type for the "sync_status" enum field.
type SyncStatus string

// SyncStatusNEVER_SYNCED is the default value of the SyncStatus enum.
const DefaultSyncStatus = SyncStatusNEVER_SYNCED

// SyncStatus values.
const (
	SyncStatusNEVER_SYNCED SyncStatus = "NEVER_SYNCED"
	SyncStatusSYNCING      SyncStatus = "SYNCING"
	SyncStatusUP_TO_DATE   SyncStatus = "UP_TO_DATE"
	SyncStatusBEHIND       SyncStatus = "BEHIND"
	SyncStatusAHEAD        SyncStatus = "AHEAD"
	SyncStatusDIVERGED     SyncStatus = "DIVERGED"
	SyncStatusERROR        SyncStatus = "ERROR"
)

func (ss SyncStatus) String() string {
	return string(ss)
}

// SyncStatusValidator is a validator for the "sync_status" field enum values. It is called by the builders before save.
func SyncStatusValidator(ss SyncStatus) error {
	switch ss {
	case SyncStatusNEVER_SYNCED, SyncStatusSYNCING, SyncStatusUP_TO_DATE, SyncStatusBEHIND, SyncStatusAHEAD, SyncStatusDIVERGED, SyncStatusERROR:
		return nil
	default:
		return fmt.Errorf("repository: invalid enum value for sync_status field: %q", ss)
	}
}

// OrderOption defines the ordering options for the Repository queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByDefaultBranch orders the results by the default_branch field.
func ByDefaultBranch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultBranch, opts...).ToFunc()
}

// ByLastSync orders the results by the last_sync field.
func ByLastSync(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSync, opts...).ToFunc()
}

// BySyncStatus orders the results by the sync_status field.
func BySyncStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSyncStatus, opts...).ToFunc()
}

// ByManifest orders the results by the manifest field.
func ByManifest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManifest, opts...).ToFunc()
}

// ByManifestHash orders the results by the manifest_hash field.
func ByManifestHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManifestHash, opts...).ToFunc()
}

// ByHasWriteAccess orders the results by the has_write_access field.
func ByHasWriteAccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasWriteAccess, opts...).ToFunc()
}

// ByAccessToken orders the results by the access_token field.
func ByAccessToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessToken, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByComponentsCount orders the results by components count.
func ByComponentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newComponentsStep(), opts...)
	}
}

// ByComponents orders the results by components terms.
func ByComponents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newComponentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByToolsCount orders the results by tools count.
func ByToolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newToolsStep(), opts...)
	}
}

// ByTools orders the results by tools terms.
func ByTools(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPromptsCount orders the results by prompts count.
func ByPromptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPromptsStep(), opts...)
	}
}

// ByPrompts orders the results by prompts terms.
func ByPrompts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPromptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAgentsCount orders the results by agents count.
func ByAgentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAgentsStep(), opts...)
	}
}

// ByAgents orders the results by agents terms.
func ByAgents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByForksCount orders the results by forks count.
func ByForksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newForksStep(), opts...)
	}
}

// ByForks orders the results by forks terms.
func ByForks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newForksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newComponentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ComponentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ComponentsTable, ComponentsColumn),
	)
}
func newToolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ToolsTable, ToolsColumn),
	)
}
func newPromptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PromptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PromptsTable, PromptsColumn),
	)
}
func newAgentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AgentsTable, AgentsColumn),
	)
}
func newForksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ForksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ForksTable, ForksColumn),
	)
}
