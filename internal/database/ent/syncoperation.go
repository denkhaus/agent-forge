// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/denkhaus/agentforge/internal/database/ent/syncoperation"
)

// SyncOperation is the model entity for the SyncOperation schema.
type SyncOperation struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type syncoperation.Type `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status syncoperation.Status `json:"status,omitempty"`
	// Direction holds the value of the "direction" field.
	Direction syncoperation.Direction `json:"direction,omitempty"`
	// RepositoryID holds the value of the "repository_id" field.
	RepositoryID *string `json:"repository_id,omitempty"`
	// ComponentID holds the value of the "component_id" field.
	ComponentID *string `json:"component_id,omitempty"`
	// SourceCommit holds the value of the "source_commit" field.
	SourceCommit *string `json:"source_commit,omitempty"`
	// TargetCommit holds the value of the "target_commit" field.
	TargetCommit *string `json:"target_commit,omitempty"`
	// Branch holds the value of the "branch" field.
	Branch *string `json:"branch,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage *string `json:"error_message,omitempty"`
	// TotalSteps holds the value of the "total_steps" field.
	TotalSteps int `json:"total_steps,omitempty"`
	// CompletedSteps holds the value of the "completed_steps" field.
	CompletedSteps int `json:"completed_steps,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SyncOperation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case syncoperation.FieldTotalSteps, syncoperation.FieldCompletedSteps:
			values[i] = new(sql.NullInt64)
		case syncoperation.FieldID, syncoperation.FieldType, syncoperation.FieldStatus, syncoperation.FieldDirection, syncoperation.FieldRepositoryID, syncoperation.FieldComponentID, syncoperation.FieldSourceCommit, syncoperation.FieldTargetCommit, syncoperation.FieldBranch, syncoperation.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case syncoperation.FieldStartedAt, syncoperation.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SyncOperation fields.
func (so *SyncOperation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case syncoperation.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				so.ID = value.String
			}
		case syncoperation.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				so.Type = syncoperation.Type(value.String)
			}
		case syncoperation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				so.Status = syncoperation.Status(value.String)
			}
		case syncoperation.FieldDirection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field direction", values[i])
			} else if value.Valid {
				so.Direction = syncoperation.Direction(value.String)
			}
		case syncoperation.FieldRepositoryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repository_id", values[i])
			} else if value.Valid {
				so.RepositoryID = new(string)
				*so.RepositoryID = value.String
			}
		case syncoperation.FieldComponentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field component_id", values[i])
			} else if value.Valid {
				so.ComponentID = new(string)
				*so.ComponentID = value.String
			}
		case syncoperation.FieldSourceCommit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_commit", values[i])
			} else if value.Valid {
				so.SourceCommit = new(string)
				*so.SourceCommit = value.String
			}
		case syncoperation.FieldTargetCommit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_commit", values[i])
			} else if value.Valid {
				so.TargetCommit = new(string)
				*so.TargetCommit = value.String
			}
		case syncoperation.FieldBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch", values[i])
			} else if value.Valid {
				so.Branch = new(string)
				*so.Branch = value.String
			}
		case syncoperation.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				so.StartedAt = value.Time
			}
		case syncoperation.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				so.CompletedAt = new(time.Time)
				*so.CompletedAt = value.Time
			}
		case syncoperation.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				so.ErrorMessage = new(string)
				*so.ErrorMessage = value.String
			}
		case syncoperation.FieldTotalSteps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_steps", values[i])
			} else if value.Valid {
				so.TotalSteps = int(value.Int64)
			}
		case syncoperation.FieldCompletedSteps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completed_steps", values[i])
			} else if value.Valid {
				so.CompletedSteps = int(value.Int64)
			}
		default:
			so.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SyncOperation.
// This includes values selected through modifiers, order, etc.
func (so *SyncOperation) Value(name string) (ent.Value, error) {
	return so.selectValues.Get(name)
}

// Update returns a builder for updating this SyncOperation.
// Note that you need to call SyncOperation.Unwrap() before calling this method if this SyncOperation
// was returned from a transaction, and the transaction was committed or rolled back.
func (so *SyncOperation) Update() *SyncOperationUpdateOne {
	return NewSyncOperationClient(so.config).UpdateOne(so)
}

// Unwrap unwraps the SyncOperation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (so *SyncOperation) Unwrap() *SyncOperation {
	_tx, ok := so.config.driver.(*txDriver)
	if !ok {
		panic("ent: SyncOperation is not a transactional entity")
	}
	so.config.driver = _tx.drv
	return so
}

// String implements the fmt.Stringer.
func (so *SyncOperation) String() string {
	var builder strings.Builder
	builder.WriteString("SyncOperation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", so.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", so.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", so.Status))
	builder.WriteString(", ")
	builder.WriteString("direction=")
	builder.WriteString(fmt.Sprintf("%v", so.Direction))
	builder.WriteString(", ")
	if v := so.RepositoryID; v != nil {
		builder.WriteString("repository_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := so.ComponentID; v != nil {
		builder.WriteString("component_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := so.SourceCommit; v != nil {
		builder.WriteString("source_commit=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := so.TargetCommit; v != nil {
		builder.WriteString("target_commit=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := so.Branch; v != nil {
		builder.WriteString("branch=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(so.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := so.CompletedAt; v != nil {
		builder.WriteString("completed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := so.ErrorMessage; v != nil {
		builder.WriteString("error_message=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("total_steps=")
	builder.WriteString(fmt.Sprintf("%v", so.TotalSteps))
	builder.WriteString(", ")
	builder.WriteString("completed_steps=")
	builder.WriteString(fmt.Sprintf("%v", so.CompletedSteps))
	builder.WriteByte(')')
	return builder.String()
}

// SyncOperations is a parsable slice of SyncOperation.
type SyncOperations []*SyncOperation
