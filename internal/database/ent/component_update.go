// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/component"
	"github.com/denkhaus/agentforge/internal/database/ent/componentdependency"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
)

// ComponentUpdate is the builder for updating Component entities.
type ComponentUpdate struct {
	config
	hooks    []Hook
	mutation *ComponentMutation
}

// Where appends a list predicates to the ComponentUpdate builder.
func (cu *ComponentUpdate) Where(ps ...predicate.Component) *ComponentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ComponentUpdate) SetName(s string) *ComponentUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableName(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetNamespace sets the "namespace" field.
func (cu *ComponentUpdate) SetNamespace(s string) *ComponentUpdate {
	cu.mutation.SetNamespace(s)
	return cu
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableNamespace(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetNamespace(*s)
	}
	return cu
}

// SetVersion sets the "version" field.
func (cu *ComponentUpdate) SetVersion(s string) *ComponentUpdate {
	cu.mutation.SetVersion(s)
	return cu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableVersion(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetVersion(*s)
	}
	return cu
}

// SetKind sets the "kind" field.
func (cu *ComponentUpdate) SetKind(c component.Kind) *ComponentUpdate {
	cu.mutation.SetKind(c)
	return cu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableKind(c *component.Kind) *ComponentUpdate {
	if c != nil {
		cu.SetKind(*c)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *ComponentUpdate) SetDescription(s string) *ComponentUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableDescription(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// SetAuthor sets the "author" field.
func (cu *ComponentUpdate) SetAuthor(s string) *ComponentUpdate {
	cu.mutation.SetAuthor(s)
	return cu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableAuthor(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetAuthor(*s)
	}
	return cu
}

// SetLicense sets the "license" field.
func (cu *ComponentUpdate) SetLicense(s string) *ComponentUpdate {
	cu.mutation.SetLicense(s)
	return cu
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableLicense(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetLicense(*s)
	}
	return cu
}

// SetHomepage sets the "homepage" field.
func (cu *ComponentUpdate) SetHomepage(s string) *ComponentUpdate {
	cu.mutation.SetHomepage(s)
	return cu
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableHomepage(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetHomepage(*s)
	}
	return cu
}

// ClearHomepage clears the value of the "homepage" field.
func (cu *ComponentUpdate) ClearHomepage() *ComponentUpdate {
	cu.mutation.ClearHomepage()
	return cu
}

// SetDocumentation sets the "documentation" field.
func (cu *ComponentUpdate) SetDocumentation(s string) *ComponentUpdate {
	cu.mutation.SetDocumentation(s)
	return cu
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableDocumentation(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetDocumentation(*s)
	}
	return cu
}

// ClearDocumentation clears the value of the "documentation" field.
func (cu *ComponentUpdate) ClearDocumentation() *ComponentUpdate {
	cu.mutation.ClearDocumentation()
	return cu
}

// SetTags sets the "tags" field.
func (cu *ComponentUpdate) SetTags(s []string) *ComponentUpdate {
	cu.mutation.SetTags(s)
	return cu
}

// AppendTags appends s to the "tags" field.
func (cu *ComponentUpdate) AppendTags(s []string) *ComponentUpdate {
	cu.mutation.AppendTags(s)
	return cu
}

// ClearTags clears the value of the "tags" field.
func (cu *ComponentUpdate) ClearTags() *ComponentUpdate {
	cu.mutation.ClearTags()
	return cu
}

// SetCategories sets the "categories" field.
func (cu *ComponentUpdate) SetCategories(s []string) *ComponentUpdate {
	cu.mutation.SetCategories(s)
	return cu
}

// AppendCategories appends s to the "categories" field.
func (cu *ComponentUpdate) AppendCategories(s []string) *ComponentUpdate {
	cu.mutation.AppendCategories(s)
	return cu
}

// ClearCategories clears the value of the "categories" field.
func (cu *ComponentUpdate) ClearCategories() *ComponentUpdate {
	cu.mutation.ClearCategories()
	return cu
}

// SetKeywords sets the "keywords" field.
func (cu *ComponentUpdate) SetKeywords(s []string) *ComponentUpdate {
	cu.mutation.SetKeywords(s)
	return cu
}

// AppendKeywords appends s to the "keywords" field.
func (cu *ComponentUpdate) AppendKeywords(s []string) *ComponentUpdate {
	cu.mutation.AppendKeywords(s)
	return cu
}

// ClearKeywords clears the value of the "keywords" field.
func (cu *ComponentUpdate) ClearKeywords() *ComponentUpdate {
	cu.mutation.ClearKeywords()
	return cu
}

// SetStability sets the "stability" field.
func (cu *ComponentUpdate) SetStability(c component.Stability) *ComponentUpdate {
	cu.mutation.SetStability(c)
	return cu
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableStability(c *component.Stability) *ComponentUpdate {
	if c != nil {
		cu.SetStability(*c)
	}
	return cu
}

// SetMaturity sets the "maturity" field.
func (cu *ComponentUpdate) SetMaturity(c component.Maturity) *ComponentUpdate {
	cu.mutation.SetMaturity(c)
	return cu
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableMaturity(c *component.Maturity) *ComponentUpdate {
	if c != nil {
		cu.SetMaturity(*c)
	}
	return cu
}

// SetForgeVersion sets the "forge_version" field.
func (cu *ComponentUpdate) SetForgeVersion(s string) *ComponentUpdate {
	cu.mutation.SetForgeVersion(s)
	return cu
}

// SetNillableForgeVersion sets the "forge_version" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableForgeVersion(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetForgeVersion(*s)
	}
	return cu
}

// SetPlatforms sets the "platforms" field.
func (cu *ComponentUpdate) SetPlatforms(s []string) *ComponentUpdate {
	cu.mutation.SetPlatforms(s)
	return cu
}

// AppendPlatforms appends s to the "platforms" field.
func (cu *ComponentUpdate) AppendPlatforms(s []string) *ComponentUpdate {
	cu.mutation.AppendPlatforms(s)
	return cu
}

// ClearPlatforms clears the value of the "platforms" field.
func (cu *ComponentUpdate) ClearPlatforms() *ComponentUpdate {
	cu.mutation.ClearPlatforms()
	return cu
}

// SetSpec sets the "spec" field.
func (cu *ComponentUpdate) SetSpec(s string) *ComponentUpdate {
	cu.mutation.SetSpec(s)
	return cu
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableSpec(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetSpec(*s)
	}
	return cu
}

// SetSpecHash sets the "spec_hash" field.
func (cu *ComponentUpdate) SetSpecHash(s string) *ComponentUpdate {
	cu.mutation.SetSpecHash(s)
	return cu
}

// SetNillableSpecHash sets the "spec_hash" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableSpecHash(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetSpecHash(*s)
	}
	return cu
}

// SetIsInstalled sets the "is_installed" field.
func (cu *ComponentUpdate) SetIsInstalled(b bool) *ComponentUpdate {
	cu.mutation.SetIsInstalled(b)
	return cu
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableIsInstalled(b *bool) *ComponentUpdate {
	if b != nil {
		cu.SetIsInstalled(*b)
	}
	return cu
}

// SetInstallPath sets the "install_path" field.
func (cu *ComponentUpdate) SetInstallPath(s string) *ComponentUpdate {
	cu.mutation.SetInstallPath(s)
	return cu
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableInstallPath(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetInstallPath(*s)
	}
	return cu
}

// ClearInstallPath clears the value of the "install_path" field.
func (cu *ComponentUpdate) ClearInstallPath() *ComponentUpdate {
	cu.mutation.ClearInstallPath()
	return cu
}

// SetInstalledAt sets the "installed_at" field.
func (cu *ComponentUpdate) SetInstalledAt(t time.Time) *ComponentUpdate {
	cu.mutation.SetInstalledAt(t)
	return cu
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableInstalledAt(t *time.Time) *ComponentUpdate {
	if t != nil {
		cu.SetInstalledAt(*t)
	}
	return cu
}

// ClearInstalledAt clears the value of the "installed_at" field.
func (cu *ComponentUpdate) ClearInstalledAt() *ComponentUpdate {
	cu.mutation.ClearInstalledAt()
	return cu
}

// SetCommitHash sets the "commit_hash" field.
func (cu *ComponentUpdate) SetCommitHash(s string) *ComponentUpdate {
	cu.mutation.SetCommitHash(s)
	return cu
}

// SetNillableCommitHash sets the "commit_hash" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableCommitHash(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetCommitHash(*s)
	}
	return cu
}

// SetBranch sets the "branch" field.
func (cu *ComponentUpdate) SetBranch(s string) *ComponentUpdate {
	cu.mutation.SetBranch(s)
	return cu
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (cu *ComponentUpdate) SetNillableBranch(s *string) *ComponentUpdate {
	if s != nil {
		cu.SetBranch(*s)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ComponentUpdate) SetUpdatedAt(t time.Time) *ComponentUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (cu *ComponentUpdate) SetRepositoryID(id string) *ComponentUpdate {
	cu.mutation.SetRepositoryID(id)
	return cu
}

// SetRepository sets the "repository" edge to the Repository entity.
func (cu *ComponentUpdate) SetRepository(r *Repository) *ComponentUpdate {
	return cu.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the ComponentDependency entity by IDs.
func (cu *ComponentUpdate) AddDependencyIDs(ids ...string) *ComponentUpdate {
	cu.mutation.AddDependencyIDs(ids...)
	return cu
}

// AddDependencies adds the "dependencies" edges to the ComponentDependency entity.
func (cu *ComponentUpdate) AddDependencies(c ...*ComponentDependency) *ComponentUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddDependencyIDs(ids...)
}

// Mutation returns the ComponentMutation object of the builder.
func (cu *ComponentUpdate) Mutation() *ComponentMutation {
	return cu.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (cu *ComponentUpdate) ClearRepository() *ComponentUpdate {
	cu.mutation.ClearRepository()
	return cu
}

// ClearDependencies clears all "dependencies" edges to the ComponentDependency entity.
func (cu *ComponentUpdate) ClearDependencies() *ComponentUpdate {
	cu.mutation.ClearDependencies()
	return cu
}

// RemoveDependencyIDs removes the "dependencies" edge to ComponentDependency entities by IDs.
func (cu *ComponentUpdate) RemoveDependencyIDs(ids ...string) *ComponentUpdate {
	cu.mutation.RemoveDependencyIDs(ids...)
	return cu
}

// RemoveDependencies removes "dependencies" edges to ComponentDependency entities.
func (cu *ComponentUpdate) RemoveDependencies(c ...*ComponentDependency) *ComponentUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveDependencyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ComponentUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ComponentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ComponentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ComponentUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := component.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ComponentUpdate) check() error {
	if v, ok := cu.mutation.Kind(); ok {
		if err := component.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Component.kind": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Stability(); ok {
		if err := component.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Component.stability": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Maturity(); ok {
		if err := component.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Component.maturity": %w`, err)}
		}
	}
	if cu.mutation.RepositoryCleared() && len(cu.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Component.repository"`)
	}
	return nil
}

func (cu *ComponentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(component.Table, component.Columns, sqlgraph.NewFieldSpec(component.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(component.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Namespace(); ok {
		_spec.SetField(component.FieldNamespace, field.TypeString, value)
	}
	if value, ok := cu.mutation.Version(); ok {
		_spec.SetField(component.FieldVersion, field.TypeString, value)
	}
	if value, ok := cu.mutation.Kind(); ok {
		_spec.SetField(component.FieldKind, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(component.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.Author(); ok {
		_spec.SetField(component.FieldAuthor, field.TypeString, value)
	}
	if value, ok := cu.mutation.License(); ok {
		_spec.SetField(component.FieldLicense, field.TypeString, value)
	}
	if value, ok := cu.mutation.Homepage(); ok {
		_spec.SetField(component.FieldHomepage, field.TypeString, value)
	}
	if cu.mutation.HomepageCleared() {
		_spec.ClearField(component.FieldHomepage, field.TypeString)
	}
	if value, ok := cu.mutation.Documentation(); ok {
		_spec.SetField(component.FieldDocumentation, field.TypeString, value)
	}
	if cu.mutation.DocumentationCleared() {
		_spec.ClearField(component.FieldDocumentation, field.TypeString)
	}
	if value, ok := cu.mutation.Tags(); ok {
		_spec.SetField(component.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, component.FieldTags, value)
		})
	}
	if cu.mutation.TagsCleared() {
		_spec.ClearField(component.FieldTags, field.TypeJSON)
	}
	if value, ok := cu.mutation.Categories(); ok {
		_spec.SetField(component.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, component.FieldCategories, value)
		})
	}
	if cu.mutation.CategoriesCleared() {
		_spec.ClearField(component.FieldCategories, field.TypeJSON)
	}
	if value, ok := cu.mutation.Keywords(); ok {
		_spec.SetField(component.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, component.FieldKeywords, value)
		})
	}
	if cu.mutation.KeywordsCleared() {
		_spec.ClearField(component.FieldKeywords, field.TypeJSON)
	}
	if value, ok := cu.mutation.Stability(); ok {
		_spec.SetField(component.FieldStability, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Maturity(); ok {
		_spec.SetField(component.FieldMaturity, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.ForgeVersion(); ok {
		_spec.SetField(component.FieldForgeVersion, field.TypeString, value)
	}
	if value, ok := cu.mutation.Platforms(); ok {
		_spec.SetField(component.FieldPlatforms, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedPlatforms(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, component.FieldPlatforms, value)
		})
	}
	if cu.mutation.PlatformsCleared() {
		_spec.ClearField(component.FieldPlatforms, field.TypeJSON)
	}
	if value, ok := cu.mutation.Spec(); ok {
		_spec.SetField(component.FieldSpec, field.TypeString, value)
	}
	if value, ok := cu.mutation.SpecHash(); ok {
		_spec.SetField(component.FieldSpecHash, field.TypeString, value)
	}
	if value, ok := cu.mutation.IsInstalled(); ok {
		_spec.SetField(component.FieldIsInstalled, field.TypeBool, value)
	}
	if value, ok := cu.mutation.InstallPath(); ok {
		_spec.SetField(component.FieldInstallPath, field.TypeString, value)
	}
	if cu.mutation.InstallPathCleared() {
		_spec.ClearField(component.FieldInstallPath, field.TypeString)
	}
	if value, ok := cu.mutation.InstalledAt(); ok {
		_spec.SetField(component.FieldInstalledAt, field.TypeTime, value)
	}
	if cu.mutation.InstalledAtCleared() {
		_spec.ClearField(component.FieldInstalledAt, field.TypeTime)
	}
	if value, ok := cu.mutation.CommitHash(); ok {
		_spec.SetField(component.FieldCommitHash, field.TypeString, value)
	}
	if value, ok := cu.mutation.Branch(); ok {
		_spec.SetField(component.FieldBranch, field.TypeString, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(component.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   component.RepositoryTable,
			Columns: []string{component.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   component.RepositoryTable,
			Columns: []string{component.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.DependenciesTable,
			Columns: []string{component.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(componentdependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !cu.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.DependenciesTable,
			Columns: []string{component.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(componentdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.DependenciesTable,
			Columns: []string{component.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(componentdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{component.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ComponentUpdateOne is the builder for updating a single Component entity.
type ComponentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ComponentMutation
}

// SetName sets the "name" field.
func (cuo *ComponentUpdateOne) SetName(s string) *ComponentUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableName(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetNamespace sets the "namespace" field.
func (cuo *ComponentUpdateOne) SetNamespace(s string) *ComponentUpdateOne {
	cuo.mutation.SetNamespace(s)
	return cuo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableNamespace(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetNamespace(*s)
	}
	return cuo
}

// SetVersion sets the "version" field.
func (cuo *ComponentUpdateOne) SetVersion(s string) *ComponentUpdateOne {
	cuo.mutation.SetVersion(s)
	return cuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableVersion(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetVersion(*s)
	}
	return cuo
}

// SetKind sets the "kind" field.
func (cuo *ComponentUpdateOne) SetKind(c component.Kind) *ComponentUpdateOne {
	cuo.mutation.SetKind(c)
	return cuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableKind(c *component.Kind) *ComponentUpdateOne {
	if c != nil {
		cuo.SetKind(*c)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ComponentUpdateOne) SetDescription(s string) *ComponentUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableDescription(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// SetAuthor sets the "author" field.
func (cuo *ComponentUpdateOne) SetAuthor(s string) *ComponentUpdateOne {
	cuo.mutation.SetAuthor(s)
	return cuo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableAuthor(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetAuthor(*s)
	}
	return cuo
}

// SetLicense sets the "license" field.
func (cuo *ComponentUpdateOne) SetLicense(s string) *ComponentUpdateOne {
	cuo.mutation.SetLicense(s)
	return cuo
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableLicense(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetLicense(*s)
	}
	return cuo
}

// SetHomepage sets the "homepage" field.
func (cuo *ComponentUpdateOne) SetHomepage(s string) *ComponentUpdateOne {
	cuo.mutation.SetHomepage(s)
	return cuo
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableHomepage(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetHomepage(*s)
	}
	return cuo
}

// ClearHomepage clears the value of the "homepage" field.
func (cuo *ComponentUpdateOne) ClearHomepage() *ComponentUpdateOne {
	cuo.mutation.ClearHomepage()
	return cuo
}

// SetDocumentation sets the "documentation" field.
func (cuo *ComponentUpdateOne) SetDocumentation(s string) *ComponentUpdateOne {
	cuo.mutation.SetDocumentation(s)
	return cuo
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableDocumentation(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetDocumentation(*s)
	}
	return cuo
}

// ClearDocumentation clears the value of the "documentation" field.
func (cuo *ComponentUpdateOne) ClearDocumentation() *ComponentUpdateOne {
	cuo.mutation.ClearDocumentation()
	return cuo
}

// SetTags sets the "tags" field.
func (cuo *ComponentUpdateOne) SetTags(s []string) *ComponentUpdateOne {
	cuo.mutation.SetTags(s)
	return cuo
}

// AppendTags appends s to the "tags" field.
func (cuo *ComponentUpdateOne) AppendTags(s []string) *ComponentUpdateOne {
	cuo.mutation.AppendTags(s)
	return cuo
}

// ClearTags clears the value of the "tags" field.
func (cuo *ComponentUpdateOne) ClearTags() *ComponentUpdateOne {
	cuo.mutation.ClearTags()
	return cuo
}

// SetCategories sets the "categories" field.
func (cuo *ComponentUpdateOne) SetCategories(s []string) *ComponentUpdateOne {
	cuo.mutation.SetCategories(s)
	return cuo
}

// AppendCategories appends s to the "categories" field.
func (cuo *ComponentUpdateOne) AppendCategories(s []string) *ComponentUpdateOne {
	cuo.mutation.AppendCategories(s)
	return cuo
}

// ClearCategories clears the value of the "categories" field.
func (cuo *ComponentUpdateOne) ClearCategories() *ComponentUpdateOne {
	cuo.mutation.ClearCategories()
	return cuo
}

// SetKeywords sets the "keywords" field.
func (cuo *ComponentUpdateOne) SetKeywords(s []string) *ComponentUpdateOne {
	cuo.mutation.SetKeywords(s)
	return cuo
}

// AppendKeywords appends s to the "keywords" field.
func (cuo *ComponentUpdateOne) AppendKeywords(s []string) *ComponentUpdateOne {
	cuo.mutation.AppendKeywords(s)
	return cuo
}

// ClearKeywords clears the value of the "keywords" field.
func (cuo *ComponentUpdateOne) ClearKeywords() *ComponentUpdateOne {
	cuo.mutation.ClearKeywords()
	return cuo
}

// SetStability sets the "stability" field.
func (cuo *ComponentUpdateOne) SetStability(c component.Stability) *ComponentUpdateOne {
	cuo.mutation.SetStability(c)
	return cuo
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableStability(c *component.Stability) *ComponentUpdateOne {
	if c != nil {
		cuo.SetStability(*c)
	}
	return cuo
}

// SetMaturity sets the "maturity" field.
func (cuo *ComponentUpdateOne) SetMaturity(c component.Maturity) *ComponentUpdateOne {
	cuo.mutation.SetMaturity(c)
	return cuo
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableMaturity(c *component.Maturity) *ComponentUpdateOne {
	if c != nil {
		cuo.SetMaturity(*c)
	}
	return cuo
}

// SetForgeVersion sets the "forge_version" field.
func (cuo *ComponentUpdateOne) SetForgeVersion(s string) *ComponentUpdateOne {
	cuo.mutation.SetForgeVersion(s)
	return cuo
}

// SetNillableForgeVersion sets the "forge_version" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableForgeVersion(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetForgeVersion(*s)
	}
	return cuo
}

// SetPlatforms sets the "platforms" field.
func (cuo *ComponentUpdateOne) SetPlatforms(s []string) *ComponentUpdateOne {
	cuo.mutation.SetPlatforms(s)
	return cuo
}

// AppendPlatforms appends s to the "platforms" field.
func (cuo *ComponentUpdateOne) AppendPlatforms(s []string) *ComponentUpdateOne {
	cuo.mutation.AppendPlatforms(s)
	return cuo
}

// ClearPlatforms clears the value of the "platforms" field.
func (cuo *ComponentUpdateOne) ClearPlatforms() *ComponentUpdateOne {
	cuo.mutation.ClearPlatforms()
	return cuo
}

// SetSpec sets the "spec" field.
func (cuo *ComponentUpdateOne) SetSpec(s string) *ComponentUpdateOne {
	cuo.mutation.SetSpec(s)
	return cuo
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableSpec(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetSpec(*s)
	}
	return cuo
}

// SetSpecHash sets the "spec_hash" field.
func (cuo *ComponentUpdateOne) SetSpecHash(s string) *ComponentUpdateOne {
	cuo.mutation.SetSpecHash(s)
	return cuo
}

// SetNillableSpecHash sets the "spec_hash" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableSpecHash(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetSpecHash(*s)
	}
	return cuo
}

// SetIsInstalled sets the "is_installed" field.
func (cuo *ComponentUpdateOne) SetIsInstalled(b bool) *ComponentUpdateOne {
	cuo.mutation.SetIsInstalled(b)
	return cuo
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableIsInstalled(b *bool) *ComponentUpdateOne {
	if b != nil {
		cuo.SetIsInstalled(*b)
	}
	return cuo
}

// SetInstallPath sets the "install_path" field.
func (cuo *ComponentUpdateOne) SetInstallPath(s string) *ComponentUpdateOne {
	cuo.mutation.SetInstallPath(s)
	return cuo
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableInstallPath(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetInstallPath(*s)
	}
	return cuo
}

// ClearInstallPath clears the value of the "install_path" field.
func (cuo *ComponentUpdateOne) ClearInstallPath() *ComponentUpdateOne {
	cuo.mutation.ClearInstallPath()
	return cuo
}

// SetInstalledAt sets the "installed_at" field.
func (cuo *ComponentUpdateOne) SetInstalledAt(t time.Time) *ComponentUpdateOne {
	cuo.mutation.SetInstalledAt(t)
	return cuo
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableInstalledAt(t *time.Time) *ComponentUpdateOne {
	if t != nil {
		cuo.SetInstalledAt(*t)
	}
	return cuo
}

// ClearInstalledAt clears the value of the "installed_at" field.
func (cuo *ComponentUpdateOne) ClearInstalledAt() *ComponentUpdateOne {
	cuo.mutation.ClearInstalledAt()
	return cuo
}

// SetCommitHash sets the "commit_hash" field.
func (cuo *ComponentUpdateOne) SetCommitHash(s string) *ComponentUpdateOne {
	cuo.mutation.SetCommitHash(s)
	return cuo
}

// SetNillableCommitHash sets the "commit_hash" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableCommitHash(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetCommitHash(*s)
	}
	return cuo
}

// SetBranch sets the "branch" field.
func (cuo *ComponentUpdateOne) SetBranch(s string) *ComponentUpdateOne {
	cuo.mutation.SetBranch(s)
	return cuo
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (cuo *ComponentUpdateOne) SetNillableBranch(s *string) *ComponentUpdateOne {
	if s != nil {
		cuo.SetBranch(*s)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ComponentUpdateOne) SetUpdatedAt(t time.Time) *ComponentUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (cuo *ComponentUpdateOne) SetRepositoryID(id string) *ComponentUpdateOne {
	cuo.mutation.SetRepositoryID(id)
	return cuo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (cuo *ComponentUpdateOne) SetRepository(r *Repository) *ComponentUpdateOne {
	return cuo.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the ComponentDependency entity by IDs.
func (cuo *ComponentUpdateOne) AddDependencyIDs(ids ...string) *ComponentUpdateOne {
	cuo.mutation.AddDependencyIDs(ids...)
	return cuo
}

// AddDependencies adds the "dependencies" edges to the ComponentDependency entity.
func (cuo *ComponentUpdateOne) AddDependencies(c ...*ComponentDependency) *ComponentUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddDependencyIDs(ids...)
}

// Mutation returns the ComponentMutation object of the builder.
func (cuo *ComponentUpdateOne) Mutation() *ComponentMutation {
	return cuo.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (cuo *ComponentUpdateOne) ClearRepository() *ComponentUpdateOne {
	cuo.mutation.ClearRepository()
	return cuo
}

// ClearDependencies clears all "dependencies" edges to the ComponentDependency entity.
func (cuo *ComponentUpdateOne) ClearDependencies() *ComponentUpdateOne {
	cuo.mutation.ClearDependencies()
	return cuo
}

// RemoveDependencyIDs removes the "dependencies" edge to ComponentDependency entities by IDs.
func (cuo *ComponentUpdateOne) RemoveDependencyIDs(ids ...string) *ComponentUpdateOne {
	cuo.mutation.RemoveDependencyIDs(ids...)
	return cuo
}

// RemoveDependencies removes "dependencies" edges to ComponentDependency entities.
func (cuo *ComponentUpdateOne) RemoveDependencies(c ...*ComponentDependency) *ComponentUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveDependencyIDs(ids...)
}

// Where appends a list predicates to the ComponentUpdate builder.
func (cuo *ComponentUpdateOne) Where(ps ...predicate.Component) *ComponentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ComponentUpdateOne) Select(field string, fields ...string) *ComponentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Component entity.
func (cuo *ComponentUpdateOne) Save(ctx context.Context) (*Component, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ComponentUpdateOne) SaveX(ctx context.Context) *Component {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ComponentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ComponentUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := component.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ComponentUpdateOne) check() error {
	if v, ok := cuo.mutation.Kind(); ok {
		if err := component.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Component.kind": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Stability(); ok {
		if err := component.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Component.stability": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Maturity(); ok {
		if err := component.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Component.maturity": %w`, err)}
		}
	}
	if cuo.mutation.RepositoryCleared() && len(cuo.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Component.repository"`)
	}
	return nil
}

func (cuo *ComponentUpdateOne) sqlSave(ctx context.Context) (_node *Component, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(component.Table, component.Columns, sqlgraph.NewFieldSpec(component.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Component.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, component.FieldID)
		for _, f := range fields {
			if !component.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != component.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(component.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Namespace(); ok {
		_spec.SetField(component.FieldNamespace, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Version(); ok {
		_spec.SetField(component.FieldVersion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Kind(); ok {
		_spec.SetField(component.FieldKind, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(component.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Author(); ok {
		_spec.SetField(component.FieldAuthor, field.TypeString, value)
	}
	if value, ok := cuo.mutation.License(); ok {
		_spec.SetField(component.FieldLicense, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Homepage(); ok {
		_spec.SetField(component.FieldHomepage, field.TypeString, value)
	}
	if cuo.mutation.HomepageCleared() {
		_spec.ClearField(component.FieldHomepage, field.TypeString)
	}
	if value, ok := cuo.mutation.Documentation(); ok {
		_spec.SetField(component.FieldDocumentation, field.TypeString, value)
	}
	if cuo.mutation.DocumentationCleared() {
		_spec.ClearField(component.FieldDocumentation, field.TypeString)
	}
	if value, ok := cuo.mutation.Tags(); ok {
		_spec.SetField(component.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, component.FieldTags, value)
		})
	}
	if cuo.mutation.TagsCleared() {
		_spec.ClearField(component.FieldTags, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Categories(); ok {
		_spec.SetField(component.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, component.FieldCategories, value)
		})
	}
	if cuo.mutation.CategoriesCleared() {
		_spec.ClearField(component.FieldCategories, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Keywords(); ok {
		_spec.SetField(component.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, component.FieldKeywords, value)
		})
	}
	if cuo.mutation.KeywordsCleared() {
		_spec.ClearField(component.FieldKeywords, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Stability(); ok {
		_spec.SetField(component.FieldStability, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Maturity(); ok {
		_spec.SetField(component.FieldMaturity, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.ForgeVersion(); ok {
		_spec.SetField(component.FieldForgeVersion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Platforms(); ok {
		_spec.SetField(component.FieldPlatforms, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedPlatforms(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, component.FieldPlatforms, value)
		})
	}
	if cuo.mutation.PlatformsCleared() {
		_spec.ClearField(component.FieldPlatforms, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Spec(); ok {
		_spec.SetField(component.FieldSpec, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SpecHash(); ok {
		_spec.SetField(component.FieldSpecHash, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IsInstalled(); ok {
		_spec.SetField(component.FieldIsInstalled, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.InstallPath(); ok {
		_spec.SetField(component.FieldInstallPath, field.TypeString, value)
	}
	if cuo.mutation.InstallPathCleared() {
		_spec.ClearField(component.FieldInstallPath, field.TypeString)
	}
	if value, ok := cuo.mutation.InstalledAt(); ok {
		_spec.SetField(component.FieldInstalledAt, field.TypeTime, value)
	}
	if cuo.mutation.InstalledAtCleared() {
		_spec.ClearField(component.FieldInstalledAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.CommitHash(); ok {
		_spec.SetField(component.FieldCommitHash, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Branch(); ok {
		_spec.SetField(component.FieldBranch, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(component.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   component.RepositoryTable,
			Columns: []string{component.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   component.RepositoryTable,
			Columns: []string{component.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.DependenciesTable,
			Columns: []string{component.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(componentdependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !cuo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.DependenciesTable,
			Columns: []string{component.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(componentdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   component.DependenciesTable,
			Columns: []string{component.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(componentdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Component{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{component.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
