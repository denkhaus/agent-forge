// Code generated by ent, DO NOT EDIT.

package fork

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the fork type in the database.
	Label = "fork"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldForkURL holds the string denoting the fork_url field in the database.
	FieldForkURL = "fork_url"
	// FieldForkOwner holds the string denoting the fork_owner field in the database.
	FieldForkOwner = "fork_owner"
	// FieldForkName holds the string denoting the fork_name field in the database.
	FieldForkName = "fork_name"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldLastSync holds the string denoting the last_sync field in the database.
	FieldLastSync = "last_sync"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOriginalRepo holds the string denoting the original_repo edge name in mutations.
	EdgeOriginalRepo = "original_repo"
	// Table holds the table name of the fork in the database.
	Table = "forks"
	// OriginalRepoTable is the table that holds the original_repo relation/edge.
	OriginalRepoTable = "forks"
	// OriginalRepoInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	OriginalRepoInverseTable = "repositories"
	// OriginalRepoColumn is the table column denoting the original_repo relation/edge.
	OriginalRepoColumn = "repository_forks"
)

// Columns holds all SQL columns for fork fields.
var Columns = []string{
	FieldID,
	FieldForkURL,
	FieldForkOwner,
	FieldForkName,
	FieldIsActive,
	FieldLastSync,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "forks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"repository_forks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Fork queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByForkURL orders the results by the fork_url field.
func ByForkURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForkURL, opts...).ToFunc()
}

// ByForkOwner orders the results by the fork_owner field.
func ByForkOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForkOwner, opts...).ToFunc()
}

// ByForkName orders the results by the fork_name field.
func ByForkName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForkName, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByLastSync orders the results by the last_sync field.
func ByLastSync(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSync, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOriginalRepoField orders the results by original_repo field.
func ByOriginalRepoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOriginalRepoStep(), sql.OrderByField(field, opts...))
	}
}
func newOriginalRepoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OriginalRepoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OriginalRepoTable, OriginalRepoColumn),
	)
}
