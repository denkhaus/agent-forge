// Code generated by ent, DO NOT EDIT.

package fork

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Fork {
	return predicate.Fork(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Fork {
	return predicate.Fork(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Fork {
	return predicate.Fork(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Fork {
	return predicate.Fork(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Fork {
	return predicate.Fork(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Fork {
	return predicate.Fork(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Fork {
	return predicate.Fork(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Fork {
	return predicate.Fork(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Fork {
	return predicate.Fork(sql.FieldContainsFold(FieldID, id))
}

// ForkURL applies equality check predicate on the "fork_url" field. It's identical to ForkURLEQ.
func ForkURL(v string) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldForkURL, v))
}

// ForkOwner applies equality check predicate on the "fork_owner" field. It's identical to ForkOwnerEQ.
func ForkOwner(v string) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldForkOwner, v))
}

// ForkName applies equality check predicate on the "fork_name" field. It's identical to ForkNameEQ.
func ForkName(v string) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldForkName, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldIsActive, v))
}

// LastSync applies equality check predicate on the "last_sync" field. It's identical to LastSyncEQ.
func LastSync(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldLastSync, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldUpdatedAt, v))
}

// ForkURLEQ applies the EQ predicate on the "fork_url" field.
func ForkURLEQ(v string) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldForkURL, v))
}

// ForkURLNEQ applies the NEQ predicate on the "fork_url" field.
func ForkURLNEQ(v string) predicate.Fork {
	return predicate.Fork(sql.FieldNEQ(FieldForkURL, v))
}

// ForkURLIn applies the In predicate on the "fork_url" field.
func ForkURLIn(vs ...string) predicate.Fork {
	return predicate.Fork(sql.FieldIn(FieldForkURL, vs...))
}

// ForkURLNotIn applies the NotIn predicate on the "fork_url" field.
func ForkURLNotIn(vs ...string) predicate.Fork {
	return predicate.Fork(sql.FieldNotIn(FieldForkURL, vs...))
}

// ForkURLGT applies the GT predicate on the "fork_url" field.
func ForkURLGT(v string) predicate.Fork {
	return predicate.Fork(sql.FieldGT(FieldForkURL, v))
}

// ForkURLGTE applies the GTE predicate on the "fork_url" field.
func ForkURLGTE(v string) predicate.Fork {
	return predicate.Fork(sql.FieldGTE(FieldForkURL, v))
}

// ForkURLLT applies the LT predicate on the "fork_url" field.
func ForkURLLT(v string) predicate.Fork {
	return predicate.Fork(sql.FieldLT(FieldForkURL, v))
}

// ForkURLLTE applies the LTE predicate on the "fork_url" field.
func ForkURLLTE(v string) predicate.Fork {
	return predicate.Fork(sql.FieldLTE(FieldForkURL, v))
}

// ForkURLContains applies the Contains predicate on the "fork_url" field.
func ForkURLContains(v string) predicate.Fork {
	return predicate.Fork(sql.FieldContains(FieldForkURL, v))
}

// ForkURLHasPrefix applies the HasPrefix predicate on the "fork_url" field.
func ForkURLHasPrefix(v string) predicate.Fork {
	return predicate.Fork(sql.FieldHasPrefix(FieldForkURL, v))
}

// ForkURLHasSuffix applies the HasSuffix predicate on the "fork_url" field.
func ForkURLHasSuffix(v string) predicate.Fork {
	return predicate.Fork(sql.FieldHasSuffix(FieldForkURL, v))
}

// ForkURLEqualFold applies the EqualFold predicate on the "fork_url" field.
func ForkURLEqualFold(v string) predicate.Fork {
	return predicate.Fork(sql.FieldEqualFold(FieldForkURL, v))
}

// ForkURLContainsFold applies the ContainsFold predicate on the "fork_url" field.
func ForkURLContainsFold(v string) predicate.Fork {
	return predicate.Fork(sql.FieldContainsFold(FieldForkURL, v))
}

// ForkOwnerEQ applies the EQ predicate on the "fork_owner" field.
func ForkOwnerEQ(v string) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldForkOwner, v))
}

// ForkOwnerNEQ applies the NEQ predicate on the "fork_owner" field.
func ForkOwnerNEQ(v string) predicate.Fork {
	return predicate.Fork(sql.FieldNEQ(FieldForkOwner, v))
}

// ForkOwnerIn applies the In predicate on the "fork_owner" field.
func ForkOwnerIn(vs ...string) predicate.Fork {
	return predicate.Fork(sql.FieldIn(FieldForkOwner, vs...))
}

// ForkOwnerNotIn applies the NotIn predicate on the "fork_owner" field.
func ForkOwnerNotIn(vs ...string) predicate.Fork {
	return predicate.Fork(sql.FieldNotIn(FieldForkOwner, vs...))
}

// ForkOwnerGT applies the GT predicate on the "fork_owner" field.
func ForkOwnerGT(v string) predicate.Fork {
	return predicate.Fork(sql.FieldGT(FieldForkOwner, v))
}

// ForkOwnerGTE applies the GTE predicate on the "fork_owner" field.
func ForkOwnerGTE(v string) predicate.Fork {
	return predicate.Fork(sql.FieldGTE(FieldForkOwner, v))
}

// ForkOwnerLT applies the LT predicate on the "fork_owner" field.
func ForkOwnerLT(v string) predicate.Fork {
	return predicate.Fork(sql.FieldLT(FieldForkOwner, v))
}

// ForkOwnerLTE applies the LTE predicate on the "fork_owner" field.
func ForkOwnerLTE(v string) predicate.Fork {
	return predicate.Fork(sql.FieldLTE(FieldForkOwner, v))
}

// ForkOwnerContains applies the Contains predicate on the "fork_owner" field.
func ForkOwnerContains(v string) predicate.Fork {
	return predicate.Fork(sql.FieldContains(FieldForkOwner, v))
}

// ForkOwnerHasPrefix applies the HasPrefix predicate on the "fork_owner" field.
func ForkOwnerHasPrefix(v string) predicate.Fork {
	return predicate.Fork(sql.FieldHasPrefix(FieldForkOwner, v))
}

// ForkOwnerHasSuffix applies the HasSuffix predicate on the "fork_owner" field.
func ForkOwnerHasSuffix(v string) predicate.Fork {
	return predicate.Fork(sql.FieldHasSuffix(FieldForkOwner, v))
}

// ForkOwnerEqualFold applies the EqualFold predicate on the "fork_owner" field.
func ForkOwnerEqualFold(v string) predicate.Fork {
	return predicate.Fork(sql.FieldEqualFold(FieldForkOwner, v))
}

// ForkOwnerContainsFold applies the ContainsFold predicate on the "fork_owner" field.
func ForkOwnerContainsFold(v string) predicate.Fork {
	return predicate.Fork(sql.FieldContainsFold(FieldForkOwner, v))
}

// ForkNameEQ applies the EQ predicate on the "fork_name" field.
func ForkNameEQ(v string) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldForkName, v))
}

// ForkNameNEQ applies the NEQ predicate on the "fork_name" field.
func ForkNameNEQ(v string) predicate.Fork {
	return predicate.Fork(sql.FieldNEQ(FieldForkName, v))
}

// ForkNameIn applies the In predicate on the "fork_name" field.
func ForkNameIn(vs ...string) predicate.Fork {
	return predicate.Fork(sql.FieldIn(FieldForkName, vs...))
}

// ForkNameNotIn applies the NotIn predicate on the "fork_name" field.
func ForkNameNotIn(vs ...string) predicate.Fork {
	return predicate.Fork(sql.FieldNotIn(FieldForkName, vs...))
}

// ForkNameGT applies the GT predicate on the "fork_name" field.
func ForkNameGT(v string) predicate.Fork {
	return predicate.Fork(sql.FieldGT(FieldForkName, v))
}

// ForkNameGTE applies the GTE predicate on the "fork_name" field.
func ForkNameGTE(v string) predicate.Fork {
	return predicate.Fork(sql.FieldGTE(FieldForkName, v))
}

// ForkNameLT applies the LT predicate on the "fork_name" field.
func ForkNameLT(v string) predicate.Fork {
	return predicate.Fork(sql.FieldLT(FieldForkName, v))
}

// ForkNameLTE applies the LTE predicate on the "fork_name" field.
func ForkNameLTE(v string) predicate.Fork {
	return predicate.Fork(sql.FieldLTE(FieldForkName, v))
}

// ForkNameContains applies the Contains predicate on the "fork_name" field.
func ForkNameContains(v string) predicate.Fork {
	return predicate.Fork(sql.FieldContains(FieldForkName, v))
}

// ForkNameHasPrefix applies the HasPrefix predicate on the "fork_name" field.
func ForkNameHasPrefix(v string) predicate.Fork {
	return predicate.Fork(sql.FieldHasPrefix(FieldForkName, v))
}

// ForkNameHasSuffix applies the HasSuffix predicate on the "fork_name" field.
func ForkNameHasSuffix(v string) predicate.Fork {
	return predicate.Fork(sql.FieldHasSuffix(FieldForkName, v))
}

// ForkNameEqualFold applies the EqualFold predicate on the "fork_name" field.
func ForkNameEqualFold(v string) predicate.Fork {
	return predicate.Fork(sql.FieldEqualFold(FieldForkName, v))
}

// ForkNameContainsFold applies the ContainsFold predicate on the "fork_name" field.
func ForkNameContainsFold(v string) predicate.Fork {
	return predicate.Fork(sql.FieldContainsFold(FieldForkName, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Fork {
	return predicate.Fork(sql.FieldNEQ(FieldIsActive, v))
}

// LastSyncEQ applies the EQ predicate on the "last_sync" field.
func LastSyncEQ(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldLastSync, v))
}

// LastSyncNEQ applies the NEQ predicate on the "last_sync" field.
func LastSyncNEQ(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldNEQ(FieldLastSync, v))
}

// LastSyncIn applies the In predicate on the "last_sync" field.
func LastSyncIn(vs ...time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldIn(FieldLastSync, vs...))
}

// LastSyncNotIn applies the NotIn predicate on the "last_sync" field.
func LastSyncNotIn(vs ...time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldNotIn(FieldLastSync, vs...))
}

// LastSyncGT applies the GT predicate on the "last_sync" field.
func LastSyncGT(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldGT(FieldLastSync, v))
}

// LastSyncGTE applies the GTE predicate on the "last_sync" field.
func LastSyncGTE(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldGTE(FieldLastSync, v))
}

// LastSyncLT applies the LT predicate on the "last_sync" field.
func LastSyncLT(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldLT(FieldLastSync, v))
}

// LastSyncLTE applies the LTE predicate on the "last_sync" field.
func LastSyncLTE(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldLTE(FieldLastSync, v))
}

// LastSyncIsNil applies the IsNil predicate on the "last_sync" field.
func LastSyncIsNil() predicate.Fork {
	return predicate.Fork(sql.FieldIsNull(FieldLastSync))
}

// LastSyncNotNil applies the NotNil predicate on the "last_sync" field.
func LastSyncNotNil() predicate.Fork {
	return predicate.Fork(sql.FieldNotNull(FieldLastSync))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Fork {
	return predicate.Fork(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOriginalRepo applies the HasEdge predicate on the "original_repo" edge.
func HasOriginalRepo() predicate.Fork {
	return predicate.Fork(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OriginalRepoTable, OriginalRepoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOriginalRepoWith applies the HasEdge predicate on the "original_repo" edge with a given conditions (other predicates).
func HasOriginalRepoWith(preds ...predicate.Repository) predicate.Fork {
	return predicate.Fork(func(s *sql.Selector) {
		step := newOriginalRepoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Fork) predicate.Fork {
	return predicate.Fork(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Fork) predicate.Fork {
	return predicate.Fork(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Fork) predicate.Fork {
	return predicate.Fork(sql.NotPredicates(p))
}
