// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
	"github.com/denkhaus/agentforge/internal/database/ent/tool"
	"github.com/denkhaus/agentforge/internal/database/ent/tooldependency"
)

// ToolDependencyUpdate is the builder for updating ToolDependency entities.
type ToolDependencyUpdate struct {
	config
	hooks    []Hook
	mutation *ToolDependencyMutation
}

// Where appends a list predicates to the ToolDependencyUpdate builder.
func (tdu *ToolDependencyUpdate) Where(ps ...predicate.ToolDependency) *ToolDependencyUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetType sets the "type" field.
func (tdu *ToolDependencyUpdate) SetType(t tooldependency.Type) *ToolDependencyUpdate {
	tdu.mutation.SetType(t)
	return tdu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tdu *ToolDependencyUpdate) SetNillableType(t *tooldependency.Type) *ToolDependencyUpdate {
	if t != nil {
		tdu.SetType(*t)
	}
	return tdu
}

// SetDependencyName sets the "dependency_name" field.
func (tdu *ToolDependencyUpdate) SetDependencyName(s string) *ToolDependencyUpdate {
	tdu.mutation.SetDependencyName(s)
	return tdu
}

// SetNillableDependencyName sets the "dependency_name" field if the given value is not nil.
func (tdu *ToolDependencyUpdate) SetNillableDependencyName(s *string) *ToolDependencyUpdate {
	if s != nil {
		tdu.SetDependencyName(*s)
	}
	return tdu
}

// SetDependencyVersion sets the "dependency_version" field.
func (tdu *ToolDependencyUpdate) SetDependencyVersion(s string) *ToolDependencyUpdate {
	tdu.mutation.SetDependencyVersion(s)
	return tdu
}

// SetNillableDependencyVersion sets the "dependency_version" field if the given value is not nil.
func (tdu *ToolDependencyUpdate) SetNillableDependencyVersion(s *string) *ToolDependencyUpdate {
	if s != nil {
		tdu.SetDependencyVersion(*s)
	}
	return tdu
}

// SetVersionRange sets the "version_range" field.
func (tdu *ToolDependencyUpdate) SetVersionRange(s string) *ToolDependencyUpdate {
	tdu.mutation.SetVersionRange(s)
	return tdu
}

// SetNillableVersionRange sets the "version_range" field if the given value is not nil.
func (tdu *ToolDependencyUpdate) SetNillableVersionRange(s *string) *ToolDependencyUpdate {
	if s != nil {
		tdu.SetVersionRange(*s)
	}
	return tdu
}

// SetIsRequired sets the "is_required" field.
func (tdu *ToolDependencyUpdate) SetIsRequired(b bool) *ToolDependencyUpdate {
	tdu.mutation.SetIsRequired(b)
	return tdu
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (tdu *ToolDependencyUpdate) SetNillableIsRequired(b *bool) *ToolDependencyUpdate {
	if b != nil {
		tdu.SetIsRequired(*b)
	}
	return tdu
}

// SetCondition sets the "condition" field.
func (tdu *ToolDependencyUpdate) SetCondition(s string) *ToolDependencyUpdate {
	tdu.mutation.SetCondition(s)
	return tdu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (tdu *ToolDependencyUpdate) SetNillableCondition(s *string) *ToolDependencyUpdate {
	if s != nil {
		tdu.SetCondition(*s)
	}
	return tdu
}

// ClearCondition clears the value of the "condition" field.
func (tdu *ToolDependencyUpdate) ClearCondition() *ToolDependencyUpdate {
	tdu.mutation.ClearCondition()
	return tdu
}

// SetToolID sets the "tool" edge to the Tool entity by ID.
func (tdu *ToolDependencyUpdate) SetToolID(id string) *ToolDependencyUpdate {
	tdu.mutation.SetToolID(id)
	return tdu
}

// SetTool sets the "tool" edge to the Tool entity.
func (tdu *ToolDependencyUpdate) SetTool(t *Tool) *ToolDependencyUpdate {
	return tdu.SetToolID(t.ID)
}

// Mutation returns the ToolDependencyMutation object of the builder.
func (tdu *ToolDependencyUpdate) Mutation() *ToolDependencyMutation {
	return tdu.mutation
}

// ClearTool clears the "tool" edge to the Tool entity.
func (tdu *ToolDependencyUpdate) ClearTool() *ToolDependencyUpdate {
	tdu.mutation.ClearTool()
	return tdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *ToolDependencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tdu.sqlSave, tdu.mutation, tdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *ToolDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *ToolDependencyUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *ToolDependencyUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdu *ToolDependencyUpdate) check() error {
	if v, ok := tdu.mutation.GetType(); ok {
		if err := tooldependency.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ToolDependency.type": %w`, err)}
		}
	}
	if tdu.mutation.ToolCleared() && len(tdu.mutation.ToolIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ToolDependency.tool"`)
	}
	return nil
}

func (tdu *ToolDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tooldependency.Table, tooldependency.Columns, sqlgraph.NewFieldSpec(tooldependency.FieldID, field.TypeString))
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.GetType(); ok {
		_spec.SetField(tooldependency.FieldType, field.TypeEnum, value)
	}
	if value, ok := tdu.mutation.DependencyName(); ok {
		_spec.SetField(tooldependency.FieldDependencyName, field.TypeString, value)
	}
	if value, ok := tdu.mutation.DependencyVersion(); ok {
		_spec.SetField(tooldependency.FieldDependencyVersion, field.TypeString, value)
	}
	if value, ok := tdu.mutation.VersionRange(); ok {
		_spec.SetField(tooldependency.FieldVersionRange, field.TypeString, value)
	}
	if value, ok := tdu.mutation.IsRequired(); ok {
		_spec.SetField(tooldependency.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := tdu.mutation.Condition(); ok {
		_spec.SetField(tooldependency.FieldCondition, field.TypeString, value)
	}
	if tdu.mutation.ConditionCleared() {
		_spec.ClearField(tooldependency.FieldCondition, field.TypeString)
	}
	if tdu.mutation.ToolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tooldependency.ToolTable,
			Columns: []string{tooldependency.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.ToolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tooldependency.ToolTable,
			Columns: []string{tooldependency.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tooldependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tdu.mutation.done = true
	return n, nil
}

// ToolDependencyUpdateOne is the builder for updating a single ToolDependency entity.
type ToolDependencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ToolDependencyMutation
}

// SetType sets the "type" field.
func (tduo *ToolDependencyUpdateOne) SetType(t tooldependency.Type) *ToolDependencyUpdateOne {
	tduo.mutation.SetType(t)
	return tduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tduo *ToolDependencyUpdateOne) SetNillableType(t *tooldependency.Type) *ToolDependencyUpdateOne {
	if t != nil {
		tduo.SetType(*t)
	}
	return tduo
}

// SetDependencyName sets the "dependency_name" field.
func (tduo *ToolDependencyUpdateOne) SetDependencyName(s string) *ToolDependencyUpdateOne {
	tduo.mutation.SetDependencyName(s)
	return tduo
}

// SetNillableDependencyName sets the "dependency_name" field if the given value is not nil.
func (tduo *ToolDependencyUpdateOne) SetNillableDependencyName(s *string) *ToolDependencyUpdateOne {
	if s != nil {
		tduo.SetDependencyName(*s)
	}
	return tduo
}

// SetDependencyVersion sets the "dependency_version" field.
func (tduo *ToolDependencyUpdateOne) SetDependencyVersion(s string) *ToolDependencyUpdateOne {
	tduo.mutation.SetDependencyVersion(s)
	return tduo
}

// SetNillableDependencyVersion sets the "dependency_version" field if the given value is not nil.
func (tduo *ToolDependencyUpdateOne) SetNillableDependencyVersion(s *string) *ToolDependencyUpdateOne {
	if s != nil {
		tduo.SetDependencyVersion(*s)
	}
	return tduo
}

// SetVersionRange sets the "version_range" field.
func (tduo *ToolDependencyUpdateOne) SetVersionRange(s string) *ToolDependencyUpdateOne {
	tduo.mutation.SetVersionRange(s)
	return tduo
}

// SetNillableVersionRange sets the "version_range" field if the given value is not nil.
func (tduo *ToolDependencyUpdateOne) SetNillableVersionRange(s *string) *ToolDependencyUpdateOne {
	if s != nil {
		tduo.SetVersionRange(*s)
	}
	return tduo
}

// SetIsRequired sets the "is_required" field.
func (tduo *ToolDependencyUpdateOne) SetIsRequired(b bool) *ToolDependencyUpdateOne {
	tduo.mutation.SetIsRequired(b)
	return tduo
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (tduo *ToolDependencyUpdateOne) SetNillableIsRequired(b *bool) *ToolDependencyUpdateOne {
	if b != nil {
		tduo.SetIsRequired(*b)
	}
	return tduo
}

// SetCondition sets the "condition" field.
func (tduo *ToolDependencyUpdateOne) SetCondition(s string) *ToolDependencyUpdateOne {
	tduo.mutation.SetCondition(s)
	return tduo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (tduo *ToolDependencyUpdateOne) SetNillableCondition(s *string) *ToolDependencyUpdateOne {
	if s != nil {
		tduo.SetCondition(*s)
	}
	return tduo
}

// ClearCondition clears the value of the "condition" field.
func (tduo *ToolDependencyUpdateOne) ClearCondition() *ToolDependencyUpdateOne {
	tduo.mutation.ClearCondition()
	return tduo
}

// SetToolID sets the "tool" edge to the Tool entity by ID.
func (tduo *ToolDependencyUpdateOne) SetToolID(id string) *ToolDependencyUpdateOne {
	tduo.mutation.SetToolID(id)
	return tduo
}

// SetTool sets the "tool" edge to the Tool entity.
func (tduo *ToolDependencyUpdateOne) SetTool(t *Tool) *ToolDependencyUpdateOne {
	return tduo.SetToolID(t.ID)
}

// Mutation returns the ToolDependencyMutation object of the builder.
func (tduo *ToolDependencyUpdateOne) Mutation() *ToolDependencyMutation {
	return tduo.mutation
}

// ClearTool clears the "tool" edge to the Tool entity.
func (tduo *ToolDependencyUpdateOne) ClearTool() *ToolDependencyUpdateOne {
	tduo.mutation.ClearTool()
	return tduo
}

// Where appends a list predicates to the ToolDependencyUpdate builder.
func (tduo *ToolDependencyUpdateOne) Where(ps ...predicate.ToolDependency) *ToolDependencyUpdateOne {
	tduo.mutation.Where(ps...)
	return tduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *ToolDependencyUpdateOne) Select(field string, fields ...string) *ToolDependencyUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated ToolDependency entity.
func (tduo *ToolDependencyUpdateOne) Save(ctx context.Context) (*ToolDependency, error) {
	return withHooks(ctx, tduo.sqlSave, tduo.mutation, tduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *ToolDependencyUpdateOne) SaveX(ctx context.Context) *ToolDependency {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *ToolDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *ToolDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tduo *ToolDependencyUpdateOne) check() error {
	if v, ok := tduo.mutation.GetType(); ok {
		if err := tooldependency.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ToolDependency.type": %w`, err)}
		}
	}
	if tduo.mutation.ToolCleared() && len(tduo.mutation.ToolIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ToolDependency.tool"`)
	}
	return nil
}

func (tduo *ToolDependencyUpdateOne) sqlSave(ctx context.Context) (_node *ToolDependency, err error) {
	if err := tduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tooldependency.Table, tooldependency.Columns, sqlgraph.NewFieldSpec(tooldependency.FieldID, field.TypeString))
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ToolDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tooldependency.FieldID)
		for _, f := range fields {
			if !tooldependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tooldependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.GetType(); ok {
		_spec.SetField(tooldependency.FieldType, field.TypeEnum, value)
	}
	if value, ok := tduo.mutation.DependencyName(); ok {
		_spec.SetField(tooldependency.FieldDependencyName, field.TypeString, value)
	}
	if value, ok := tduo.mutation.DependencyVersion(); ok {
		_spec.SetField(tooldependency.FieldDependencyVersion, field.TypeString, value)
	}
	if value, ok := tduo.mutation.VersionRange(); ok {
		_spec.SetField(tooldependency.FieldVersionRange, field.TypeString, value)
	}
	if value, ok := tduo.mutation.IsRequired(); ok {
		_spec.SetField(tooldependency.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := tduo.mutation.Condition(); ok {
		_spec.SetField(tooldependency.FieldCondition, field.TypeString, value)
	}
	if tduo.mutation.ConditionCleared() {
		_spec.ClearField(tooldependency.FieldCondition, field.TypeString)
	}
	if tduo.mutation.ToolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tooldependency.ToolTable,
			Columns: []string{tooldependency.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.ToolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tooldependency.ToolTable,
			Columns: []string{tooldependency.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ToolDependency{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tooldependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tduo.mutation.done = true
	return _node, nil
}
