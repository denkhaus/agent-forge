// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
	"github.com/denkhaus/agentforge/internal/database/ent/prompt"
	"github.com/denkhaus/agentforge/internal/database/ent/promptdependency"
)

// PromptDependencyUpdate is the builder for updating PromptDependency entities.
type PromptDependencyUpdate struct {
	config
	hooks    []Hook
	mutation *PromptDependencyMutation
}

// Where appends a list predicates to the PromptDependencyUpdate builder.
func (pdu *PromptDependencyUpdate) Where(ps ...predicate.PromptDependency) *PromptDependencyUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetType sets the "type" field.
func (pdu *PromptDependencyUpdate) SetType(pr promptdependency.Type) *PromptDependencyUpdate {
	pdu.mutation.SetType(pr)
	return pdu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pdu *PromptDependencyUpdate) SetNillableType(pr *promptdependency.Type) *PromptDependencyUpdate {
	if pr != nil {
		pdu.SetType(*pr)
	}
	return pdu
}

// SetDependencyName sets the "dependency_name" field.
func (pdu *PromptDependencyUpdate) SetDependencyName(s string) *PromptDependencyUpdate {
	pdu.mutation.SetDependencyName(s)
	return pdu
}

// SetNillableDependencyName sets the "dependency_name" field if the given value is not nil.
func (pdu *PromptDependencyUpdate) SetNillableDependencyName(s *string) *PromptDependencyUpdate {
	if s != nil {
		pdu.SetDependencyName(*s)
	}
	return pdu
}

// SetDependencyVersion sets the "dependency_version" field.
func (pdu *PromptDependencyUpdate) SetDependencyVersion(s string) *PromptDependencyUpdate {
	pdu.mutation.SetDependencyVersion(s)
	return pdu
}

// SetNillableDependencyVersion sets the "dependency_version" field if the given value is not nil.
func (pdu *PromptDependencyUpdate) SetNillableDependencyVersion(s *string) *PromptDependencyUpdate {
	if s != nil {
		pdu.SetDependencyVersion(*s)
	}
	return pdu
}

// SetVersionRange sets the "version_range" field.
func (pdu *PromptDependencyUpdate) SetVersionRange(s string) *PromptDependencyUpdate {
	pdu.mutation.SetVersionRange(s)
	return pdu
}

// SetNillableVersionRange sets the "version_range" field if the given value is not nil.
func (pdu *PromptDependencyUpdate) SetNillableVersionRange(s *string) *PromptDependencyUpdate {
	if s != nil {
		pdu.SetVersionRange(*s)
	}
	return pdu
}

// SetIsRequired sets the "is_required" field.
func (pdu *PromptDependencyUpdate) SetIsRequired(b bool) *PromptDependencyUpdate {
	pdu.mutation.SetIsRequired(b)
	return pdu
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (pdu *PromptDependencyUpdate) SetNillableIsRequired(b *bool) *PromptDependencyUpdate {
	if b != nil {
		pdu.SetIsRequired(*b)
	}
	return pdu
}

// SetCondition sets the "condition" field.
func (pdu *PromptDependencyUpdate) SetCondition(s string) *PromptDependencyUpdate {
	pdu.mutation.SetCondition(s)
	return pdu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (pdu *PromptDependencyUpdate) SetNillableCondition(s *string) *PromptDependencyUpdate {
	if s != nil {
		pdu.SetCondition(*s)
	}
	return pdu
}

// ClearCondition clears the value of the "condition" field.
func (pdu *PromptDependencyUpdate) ClearCondition() *PromptDependencyUpdate {
	pdu.mutation.ClearCondition()
	return pdu
}

// SetPromptID sets the "prompt" edge to the Prompt entity by ID.
func (pdu *PromptDependencyUpdate) SetPromptID(id string) *PromptDependencyUpdate {
	pdu.mutation.SetPromptID(id)
	return pdu
}

// SetPrompt sets the "prompt" edge to the Prompt entity.
func (pdu *PromptDependencyUpdate) SetPrompt(p *Prompt) *PromptDependencyUpdate {
	return pdu.SetPromptID(p.ID)
}

// Mutation returns the PromptDependencyMutation object of the builder.
func (pdu *PromptDependencyUpdate) Mutation() *PromptDependencyMutation {
	return pdu.mutation
}

// ClearPrompt clears the "prompt" edge to the Prompt entity.
func (pdu *PromptDependencyUpdate) ClearPrompt() *PromptDependencyUpdate {
	pdu.mutation.ClearPrompt()
	return pdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *PromptDependencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *PromptDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *PromptDependencyUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *PromptDependencyUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *PromptDependencyUpdate) check() error {
	if v, ok := pdu.mutation.GetType(); ok {
		if err := promptdependency.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PromptDependency.type": %w`, err)}
		}
	}
	if pdu.mutation.PromptCleared() && len(pdu.mutation.PromptIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PromptDependency.prompt"`)
	}
	return nil
}

func (pdu *PromptDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(promptdependency.Table, promptdependency.Columns, sqlgraph.NewFieldSpec(promptdependency.FieldID, field.TypeString))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.GetType(); ok {
		_spec.SetField(promptdependency.FieldType, field.TypeEnum, value)
	}
	if value, ok := pdu.mutation.DependencyName(); ok {
		_spec.SetField(promptdependency.FieldDependencyName, field.TypeString, value)
	}
	if value, ok := pdu.mutation.DependencyVersion(); ok {
		_spec.SetField(promptdependency.FieldDependencyVersion, field.TypeString, value)
	}
	if value, ok := pdu.mutation.VersionRange(); ok {
		_spec.SetField(promptdependency.FieldVersionRange, field.TypeString, value)
	}
	if value, ok := pdu.mutation.IsRequired(); ok {
		_spec.SetField(promptdependency.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := pdu.mutation.Condition(); ok {
		_spec.SetField(promptdependency.FieldCondition, field.TypeString, value)
	}
	if pdu.mutation.ConditionCleared() {
		_spec.ClearField(promptdependency.FieldCondition, field.TypeString)
	}
	if pdu.mutation.PromptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptdependency.PromptTable,
			Columns: []string{promptdependency.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.PromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptdependency.PromptTable,
			Columns: []string{promptdependency.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promptdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// PromptDependencyUpdateOne is the builder for updating a single PromptDependency entity.
type PromptDependencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PromptDependencyMutation
}

// SetType sets the "type" field.
func (pduo *PromptDependencyUpdateOne) SetType(pr promptdependency.Type) *PromptDependencyUpdateOne {
	pduo.mutation.SetType(pr)
	return pduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pduo *PromptDependencyUpdateOne) SetNillableType(pr *promptdependency.Type) *PromptDependencyUpdateOne {
	if pr != nil {
		pduo.SetType(*pr)
	}
	return pduo
}

// SetDependencyName sets the "dependency_name" field.
func (pduo *PromptDependencyUpdateOne) SetDependencyName(s string) *PromptDependencyUpdateOne {
	pduo.mutation.SetDependencyName(s)
	return pduo
}

// SetNillableDependencyName sets the "dependency_name" field if the given value is not nil.
func (pduo *PromptDependencyUpdateOne) SetNillableDependencyName(s *string) *PromptDependencyUpdateOne {
	if s != nil {
		pduo.SetDependencyName(*s)
	}
	return pduo
}

// SetDependencyVersion sets the "dependency_version" field.
func (pduo *PromptDependencyUpdateOne) SetDependencyVersion(s string) *PromptDependencyUpdateOne {
	pduo.mutation.SetDependencyVersion(s)
	return pduo
}

// SetNillableDependencyVersion sets the "dependency_version" field if the given value is not nil.
func (pduo *PromptDependencyUpdateOne) SetNillableDependencyVersion(s *string) *PromptDependencyUpdateOne {
	if s != nil {
		pduo.SetDependencyVersion(*s)
	}
	return pduo
}

// SetVersionRange sets the "version_range" field.
func (pduo *PromptDependencyUpdateOne) SetVersionRange(s string) *PromptDependencyUpdateOne {
	pduo.mutation.SetVersionRange(s)
	return pduo
}

// SetNillableVersionRange sets the "version_range" field if the given value is not nil.
func (pduo *PromptDependencyUpdateOne) SetNillableVersionRange(s *string) *PromptDependencyUpdateOne {
	if s != nil {
		pduo.SetVersionRange(*s)
	}
	return pduo
}

// SetIsRequired sets the "is_required" field.
func (pduo *PromptDependencyUpdateOne) SetIsRequired(b bool) *PromptDependencyUpdateOne {
	pduo.mutation.SetIsRequired(b)
	return pduo
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (pduo *PromptDependencyUpdateOne) SetNillableIsRequired(b *bool) *PromptDependencyUpdateOne {
	if b != nil {
		pduo.SetIsRequired(*b)
	}
	return pduo
}

// SetCondition sets the "condition" field.
func (pduo *PromptDependencyUpdateOne) SetCondition(s string) *PromptDependencyUpdateOne {
	pduo.mutation.SetCondition(s)
	return pduo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (pduo *PromptDependencyUpdateOne) SetNillableCondition(s *string) *PromptDependencyUpdateOne {
	if s != nil {
		pduo.SetCondition(*s)
	}
	return pduo
}

// ClearCondition clears the value of the "condition" field.
func (pduo *PromptDependencyUpdateOne) ClearCondition() *PromptDependencyUpdateOne {
	pduo.mutation.ClearCondition()
	return pduo
}

// SetPromptID sets the "prompt" edge to the Prompt entity by ID.
func (pduo *PromptDependencyUpdateOne) SetPromptID(id string) *PromptDependencyUpdateOne {
	pduo.mutation.SetPromptID(id)
	return pduo
}

// SetPrompt sets the "prompt" edge to the Prompt entity.
func (pduo *PromptDependencyUpdateOne) SetPrompt(p *Prompt) *PromptDependencyUpdateOne {
	return pduo.SetPromptID(p.ID)
}

// Mutation returns the PromptDependencyMutation object of the builder.
func (pduo *PromptDependencyUpdateOne) Mutation() *PromptDependencyMutation {
	return pduo.mutation
}

// ClearPrompt clears the "prompt" edge to the Prompt entity.
func (pduo *PromptDependencyUpdateOne) ClearPrompt() *PromptDependencyUpdateOne {
	pduo.mutation.ClearPrompt()
	return pduo
}

// Where appends a list predicates to the PromptDependencyUpdate builder.
func (pduo *PromptDependencyUpdateOne) Where(ps ...predicate.PromptDependency) *PromptDependencyUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *PromptDependencyUpdateOne) Select(field string, fields ...string) *PromptDependencyUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated PromptDependency entity.
func (pduo *PromptDependencyUpdateOne) Save(ctx context.Context) (*PromptDependency, error) {
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *PromptDependencyUpdateOne) SaveX(ctx context.Context) *PromptDependency {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *PromptDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *PromptDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *PromptDependencyUpdateOne) check() error {
	if v, ok := pduo.mutation.GetType(); ok {
		if err := promptdependency.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PromptDependency.type": %w`, err)}
		}
	}
	if pduo.mutation.PromptCleared() && len(pduo.mutation.PromptIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PromptDependency.prompt"`)
	}
	return nil
}

func (pduo *PromptDependencyUpdateOne) sqlSave(ctx context.Context) (_node *PromptDependency, err error) {
	if err := pduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(promptdependency.Table, promptdependency.Columns, sqlgraph.NewFieldSpec(promptdependency.FieldID, field.TypeString))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromptDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promptdependency.FieldID)
		for _, f := range fields {
			if !promptdependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promptdependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.GetType(); ok {
		_spec.SetField(promptdependency.FieldType, field.TypeEnum, value)
	}
	if value, ok := pduo.mutation.DependencyName(); ok {
		_spec.SetField(promptdependency.FieldDependencyName, field.TypeString, value)
	}
	if value, ok := pduo.mutation.DependencyVersion(); ok {
		_spec.SetField(promptdependency.FieldDependencyVersion, field.TypeString, value)
	}
	if value, ok := pduo.mutation.VersionRange(); ok {
		_spec.SetField(promptdependency.FieldVersionRange, field.TypeString, value)
	}
	if value, ok := pduo.mutation.IsRequired(); ok {
		_spec.SetField(promptdependency.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := pduo.mutation.Condition(); ok {
		_spec.SetField(promptdependency.FieldCondition, field.TypeString, value)
	}
	if pduo.mutation.ConditionCleared() {
		_spec.ClearField(promptdependency.FieldCondition, field.TypeString)
	}
	if pduo.mutation.PromptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptdependency.PromptTable,
			Columns: []string{promptdependency.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.PromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promptdependency.PromptTable,
			Columns: []string{promptdependency.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PromptDependency{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promptdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
