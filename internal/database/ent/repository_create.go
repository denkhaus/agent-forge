// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/agent"
	"github.com/denkhaus/agentforge/internal/database/ent/component"
	"github.com/denkhaus/agentforge/internal/database/ent/fork"
	"github.com/denkhaus/agentforge/internal/database/ent/prompt"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
	"github.com/denkhaus/agentforge/internal/database/ent/tool"
)

// RepositoryCreate is the builder for creating a Repository entity.
type RepositoryCreate struct {
	config
	mutation *RepositoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RepositoryCreate) SetName(s string) *RepositoryCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetURL sets the "url" field.
func (rc *RepositoryCreate) SetURL(s string) *RepositoryCreate {
	rc.mutation.SetURL(s)
	return rc
}

// SetType sets the "type" field.
func (rc *RepositoryCreate) SetType(r repository.Type) *RepositoryCreate {
	rc.mutation.SetType(r)
	return rc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableType(r *repository.Type) *RepositoryCreate {
	if r != nil {
		rc.SetType(*r)
	}
	return rc
}

// SetIsActive sets the "is_active" field.
func (rc *RepositoryCreate) SetIsActive(b bool) *RepositoryCreate {
	rc.mutation.SetIsActive(b)
	return rc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableIsActive(b *bool) *RepositoryCreate {
	if b != nil {
		rc.SetIsActive(*b)
	}
	return rc
}

// SetDefaultBranch sets the "default_branch" field.
func (rc *RepositoryCreate) SetDefaultBranch(s string) *RepositoryCreate {
	rc.mutation.SetDefaultBranch(s)
	return rc
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableDefaultBranch(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetDefaultBranch(*s)
	}
	return rc
}

// SetLastSync sets the "last_sync" field.
func (rc *RepositoryCreate) SetLastSync(t time.Time) *RepositoryCreate {
	rc.mutation.SetLastSync(t)
	return rc
}

// SetNillableLastSync sets the "last_sync" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableLastSync(t *time.Time) *RepositoryCreate {
	if t != nil {
		rc.SetLastSync(*t)
	}
	return rc
}

// SetSyncStatus sets the "sync_status" field.
func (rc *RepositoryCreate) SetSyncStatus(rs repository.SyncStatus) *RepositoryCreate {
	rc.mutation.SetSyncStatus(rs)
	return rc
}

// SetNillableSyncStatus sets the "sync_status" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableSyncStatus(rs *repository.SyncStatus) *RepositoryCreate {
	if rs != nil {
		rc.SetSyncStatus(*rs)
	}
	return rc
}

// SetManifest sets the "manifest" field.
func (rc *RepositoryCreate) SetManifest(s string) *RepositoryCreate {
	rc.mutation.SetManifest(s)
	return rc
}

// SetNillableManifest sets the "manifest" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableManifest(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetManifest(*s)
	}
	return rc
}

// SetManifestHash sets the "manifest_hash" field.
func (rc *RepositoryCreate) SetManifestHash(s string) *RepositoryCreate {
	rc.mutation.SetManifestHash(s)
	return rc
}

// SetNillableManifestHash sets the "manifest_hash" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableManifestHash(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetManifestHash(*s)
	}
	return rc
}

// SetHasWriteAccess sets the "has_write_access" field.
func (rc *RepositoryCreate) SetHasWriteAccess(b bool) *RepositoryCreate {
	rc.mutation.SetHasWriteAccess(b)
	return rc
}

// SetNillableHasWriteAccess sets the "has_write_access" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableHasWriteAccess(b *bool) *RepositoryCreate {
	if b != nil {
		rc.SetHasWriteAccess(*b)
	}
	return rc
}

// SetAccessToken sets the "access_token" field.
func (rc *RepositoryCreate) SetAccessToken(s string) *RepositoryCreate {
	rc.mutation.SetAccessToken(s)
	return rc
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableAccessToken(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetAccessToken(*s)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RepositoryCreate) SetCreatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableCreatedAt(t *time.Time) *RepositoryCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RepositoryCreate) SetUpdatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableUpdatedAt(t *time.Time) *RepositoryCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RepositoryCreate) SetID(s string) *RepositoryCreate {
	rc.mutation.SetID(s)
	return rc
}

// AddComponentIDs adds the "components" edge to the Component entity by IDs.
func (rc *RepositoryCreate) AddComponentIDs(ids ...string) *RepositoryCreate {
	rc.mutation.AddComponentIDs(ids...)
	return rc
}

// AddComponents adds the "components" edges to the Component entity.
func (rc *RepositoryCreate) AddComponents(c ...*Component) *RepositoryCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddComponentIDs(ids...)
}

// AddToolIDs adds the "tools" edge to the Tool entity by IDs.
func (rc *RepositoryCreate) AddToolIDs(ids ...string) *RepositoryCreate {
	rc.mutation.AddToolIDs(ids...)
	return rc
}

// AddTools adds the "tools" edges to the Tool entity.
func (rc *RepositoryCreate) AddTools(t ...*Tool) *RepositoryCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rc.AddToolIDs(ids...)
}

// AddPromptIDs adds the "prompts" edge to the Prompt entity by IDs.
func (rc *RepositoryCreate) AddPromptIDs(ids ...string) *RepositoryCreate {
	rc.mutation.AddPromptIDs(ids...)
	return rc
}

// AddPrompts adds the "prompts" edges to the Prompt entity.
func (rc *RepositoryCreate) AddPrompts(p ...*Prompt) *RepositoryCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPromptIDs(ids...)
}

// AddAgentIDs adds the "agents" edge to the Agent entity by IDs.
func (rc *RepositoryCreate) AddAgentIDs(ids ...string) *RepositoryCreate {
	rc.mutation.AddAgentIDs(ids...)
	return rc
}

// AddAgents adds the "agents" edges to the Agent entity.
func (rc *RepositoryCreate) AddAgents(a ...*Agent) *RepositoryCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddAgentIDs(ids...)
}

// AddForkIDs adds the "forks" edge to the Fork entity by IDs.
func (rc *RepositoryCreate) AddForkIDs(ids ...string) *RepositoryCreate {
	rc.mutation.AddForkIDs(ids...)
	return rc
}

// AddForks adds the "forks" edges to the Fork entity.
func (rc *RepositoryCreate) AddForks(f ...*Fork) *RepositoryCreate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rc.AddForkIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (rc *RepositoryCreate) Mutation() *RepositoryMutation {
	return rc.mutation
}

// Save creates the Repository in the database.
func (rc *RepositoryCreate) Save(ctx context.Context) (*Repository, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RepositoryCreate) SaveX(ctx context.Context) *Repository {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RepositoryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RepositoryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RepositoryCreate) defaults() {
	if _, ok := rc.mutation.GetType(); !ok {
		v := repository.DefaultType
		rc.mutation.SetType(v)
	}
	if _, ok := rc.mutation.IsActive(); !ok {
		v := repository.DefaultIsActive
		rc.mutation.SetIsActive(v)
	}
	if _, ok := rc.mutation.DefaultBranch(); !ok {
		v := repository.DefaultDefaultBranch
		rc.mutation.SetDefaultBranch(v)
	}
	if _, ok := rc.mutation.SyncStatus(); !ok {
		v := repository.DefaultSyncStatus
		rc.mutation.SetSyncStatus(v)
	}
	if _, ok := rc.mutation.HasWriteAccess(); !ok {
		v := repository.DefaultHasWriteAccess
		rc.mutation.SetHasWriteAccess(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := repository.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := repository.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RepositoryCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Repository.name"`)}
	}
	if _, ok := rc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Repository.url"`)}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Repository.type"`)}
	}
	if v, ok := rc.mutation.GetType(); ok {
		if err := repository.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Repository.type": %w`, err)}
		}
	}
	if _, ok := rc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Repository.is_active"`)}
	}
	if _, ok := rc.mutation.DefaultBranch(); !ok {
		return &ValidationError{Name: "default_branch", err: errors.New(`ent: missing required field "Repository.default_branch"`)}
	}
	if _, ok := rc.mutation.SyncStatus(); !ok {
		return &ValidationError{Name: "sync_status", err: errors.New(`ent: missing required field "Repository.sync_status"`)}
	}
	if v, ok := rc.mutation.SyncStatus(); ok {
		if err := repository.SyncStatusValidator(v); err != nil {
			return &ValidationError{Name: "sync_status", err: fmt.Errorf(`ent: validator failed for field "Repository.sync_status": %w`, err)}
		}
	}
	if _, ok := rc.mutation.HasWriteAccess(); !ok {
		return &ValidationError{Name: "has_write_access", err: errors.New(`ent: missing required field "Repository.has_write_access"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Repository.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Repository.updated_at"`)}
	}
	return nil
}

func (rc *RepositoryCreate) sqlSave(ctx context.Context) (*Repository, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Repository.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RepositoryCreate) createSpec() (*Repository, *sqlgraph.CreateSpec) {
	var (
		_node = &Repository{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(repository.Table, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.URL(); ok {
		_spec.SetField(repository.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(repository.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := rc.mutation.IsActive(); ok {
		_spec.SetField(repository.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := rc.mutation.DefaultBranch(); ok {
		_spec.SetField(repository.FieldDefaultBranch, field.TypeString, value)
		_node.DefaultBranch = value
	}
	if value, ok := rc.mutation.LastSync(); ok {
		_spec.SetField(repository.FieldLastSync, field.TypeTime, value)
		_node.LastSync = &value
	}
	if value, ok := rc.mutation.SyncStatus(); ok {
		_spec.SetField(repository.FieldSyncStatus, field.TypeEnum, value)
		_node.SyncStatus = value
	}
	if value, ok := rc.mutation.Manifest(); ok {
		_spec.SetField(repository.FieldManifest, field.TypeString, value)
		_node.Manifest = &value
	}
	if value, ok := rc.mutation.ManifestHash(); ok {
		_spec.SetField(repository.FieldManifestHash, field.TypeString, value)
		_node.ManifestHash = &value
	}
	if value, ok := rc.mutation.HasWriteAccess(); ok {
		_spec.SetField(repository.FieldHasWriteAccess, field.TypeBool, value)
		_node.HasWriteAccess = value
	}
	if value, ok := rc.mutation.AccessToken(); ok {
		_spec.SetField(repository.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = &value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(repository.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rc.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ComponentsTable,
			Columns: []string{repository.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ToolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ToolsTable,
			Columns: []string{repository.ToolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.PromptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PromptsTable,
			Columns: []string{repository.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.AgentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.AgentsTable,
			Columns: []string{repository.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ForksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ForksTable,
			Columns: []string{repository.ForksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fork.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RepositoryCreateBulk is the builder for creating many Repository entities in bulk.
type RepositoryCreateBulk struct {
	config
	err      error
	builders []*RepositoryCreate
}

// Save creates the Repository entities in the database.
func (rcb *RepositoryCreateBulk) Save(ctx context.Context) ([]*Repository, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Repository, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) SaveX(ctx context.Context) []*Repository {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
