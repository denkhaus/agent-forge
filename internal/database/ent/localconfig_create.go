// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/localconfig"
)

// LocalConfigCreate is the builder for creating a LocalConfig entity.
type LocalConfigCreate struct {
	config
	mutation *LocalConfigMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (lcc *LocalConfigCreate) SetKey(s string) *LocalConfigCreate {
	lcc.mutation.SetKey(s)
	return lcc
}

// SetValue sets the "value" field.
func (lcc *LocalConfigCreate) SetValue(s string) *LocalConfigCreate {
	lcc.mutation.SetValue(s)
	return lcc
}

// SetType sets the "type" field.
func (lcc *LocalConfigCreate) SetType(l localconfig.Type) *LocalConfigCreate {
	lcc.mutation.SetType(l)
	return lcc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lcc *LocalConfigCreate) SetNillableType(l *localconfig.Type) *LocalConfigCreate {
	if l != nil {
		lcc.SetType(*l)
	}
	return lcc
}

// SetCreatedAt sets the "created_at" field.
func (lcc *LocalConfigCreate) SetCreatedAt(t time.Time) *LocalConfigCreate {
	lcc.mutation.SetCreatedAt(t)
	return lcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lcc *LocalConfigCreate) SetNillableCreatedAt(t *time.Time) *LocalConfigCreate {
	if t != nil {
		lcc.SetCreatedAt(*t)
	}
	return lcc
}

// SetUpdatedAt sets the "updated_at" field.
func (lcc *LocalConfigCreate) SetUpdatedAt(t time.Time) *LocalConfigCreate {
	lcc.mutation.SetUpdatedAt(t)
	return lcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lcc *LocalConfigCreate) SetNillableUpdatedAt(t *time.Time) *LocalConfigCreate {
	if t != nil {
		lcc.SetUpdatedAt(*t)
	}
	return lcc
}

// SetID sets the "id" field.
func (lcc *LocalConfigCreate) SetID(s string) *LocalConfigCreate {
	lcc.mutation.SetID(s)
	return lcc
}

// Mutation returns the LocalConfigMutation object of the builder.
func (lcc *LocalConfigCreate) Mutation() *LocalConfigMutation {
	return lcc.mutation
}

// Save creates the LocalConfig in the database.
func (lcc *LocalConfigCreate) Save(ctx context.Context) (*LocalConfig, error) {
	lcc.defaults()
	return withHooks(ctx, lcc.sqlSave, lcc.mutation, lcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lcc *LocalConfigCreate) SaveX(ctx context.Context) *LocalConfig {
	v, err := lcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcc *LocalConfigCreate) Exec(ctx context.Context) error {
	_, err := lcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcc *LocalConfigCreate) ExecX(ctx context.Context) {
	if err := lcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcc *LocalConfigCreate) defaults() {
	if _, ok := lcc.mutation.GetType(); !ok {
		v := localconfig.DefaultType
		lcc.mutation.SetType(v)
	}
	if _, ok := lcc.mutation.CreatedAt(); !ok {
		v := localconfig.DefaultCreatedAt()
		lcc.mutation.SetCreatedAt(v)
	}
	if _, ok := lcc.mutation.UpdatedAt(); !ok {
		v := localconfig.DefaultUpdatedAt()
		lcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcc *LocalConfigCreate) check() error {
	if _, ok := lcc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "LocalConfig.key"`)}
	}
	if _, ok := lcc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "LocalConfig.value"`)}
	}
	if _, ok := lcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "LocalConfig.type"`)}
	}
	if v, ok := lcc.mutation.GetType(); ok {
		if err := localconfig.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "LocalConfig.type": %w`, err)}
		}
	}
	if _, ok := lcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LocalConfig.created_at"`)}
	}
	if _, ok := lcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LocalConfig.updated_at"`)}
	}
	return nil
}

func (lcc *LocalConfigCreate) sqlSave(ctx context.Context) (*LocalConfig, error) {
	if err := lcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected LocalConfig.ID type: %T", _spec.ID.Value)
		}
	}
	lcc.mutation.id = &_node.ID
	lcc.mutation.done = true
	return _node, nil
}

func (lcc *LocalConfigCreate) createSpec() (*LocalConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &LocalConfig{config: lcc.config}
		_spec = sqlgraph.NewCreateSpec(localconfig.Table, sqlgraph.NewFieldSpec(localconfig.FieldID, field.TypeString))
	)
	if id, ok := lcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lcc.mutation.Key(); ok {
		_spec.SetField(localconfig.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := lcc.mutation.Value(); ok {
		_spec.SetField(localconfig.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := lcc.mutation.GetType(); ok {
		_spec.SetField(localconfig.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := lcc.mutation.CreatedAt(); ok {
		_spec.SetField(localconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lcc.mutation.UpdatedAt(); ok {
		_spec.SetField(localconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// LocalConfigCreateBulk is the builder for creating many LocalConfig entities in bulk.
type LocalConfigCreateBulk struct {
	config
	err      error
	builders []*LocalConfigCreate
}

// Save creates the LocalConfig entities in the database.
func (lccb *LocalConfigCreateBulk) Save(ctx context.Context) ([]*LocalConfig, error) {
	if lccb.err != nil {
		return nil, lccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lccb.builders))
	nodes := make([]*LocalConfig, len(lccb.builders))
	mutators := make([]Mutator, len(lccb.builders))
	for i := range lccb.builders {
		func(i int, root context.Context) {
			builder := lccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocalConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lccb *LocalConfigCreateBulk) SaveX(ctx context.Context) []*LocalConfig {
	v, err := lccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lccb *LocalConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := lccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lccb *LocalConfigCreateBulk) ExecX(ctx context.Context) {
	if err := lccb.Exec(ctx); err != nil {
		panic(err)
	}
}
