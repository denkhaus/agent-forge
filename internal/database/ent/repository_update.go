// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/agent"
	"github.com/denkhaus/agentforge/internal/database/ent/component"
	"github.com/denkhaus/agentforge/internal/database/ent/fork"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
	"github.com/denkhaus/agentforge/internal/database/ent/prompt"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
	"github.com/denkhaus/agentforge/internal/database/ent/tool"
)

// RepositoryUpdate is the builder for updating Repository entities.
type RepositoryUpdate struct {
	config
	hooks    []Hook
	mutation *RepositoryMutation
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ru *RepositoryUpdate) Where(ps ...predicate.Repository) *RepositoryUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RepositoryUpdate) SetName(s string) *RepositoryUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableName(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetURL sets the "url" field.
func (ru *RepositoryUpdate) SetURL(s string) *RepositoryUpdate {
	ru.mutation.SetURL(s)
	return ru
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableURL(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetURL(*s)
	}
	return ru
}

// SetType sets the "type" field.
func (ru *RepositoryUpdate) SetType(r repository.Type) *RepositoryUpdate {
	ru.mutation.SetType(r)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableType(r *repository.Type) *RepositoryUpdate {
	if r != nil {
		ru.SetType(*r)
	}
	return ru
}

// SetIsActive sets the "is_active" field.
func (ru *RepositoryUpdate) SetIsActive(b bool) *RepositoryUpdate {
	ru.mutation.SetIsActive(b)
	return ru
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableIsActive(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetIsActive(*b)
	}
	return ru
}

// SetDefaultBranch sets the "default_branch" field.
func (ru *RepositoryUpdate) SetDefaultBranch(s string) *RepositoryUpdate {
	ru.mutation.SetDefaultBranch(s)
	return ru
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableDefaultBranch(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetDefaultBranch(*s)
	}
	return ru
}

// SetLastSync sets the "last_sync" field.
func (ru *RepositoryUpdate) SetLastSync(t time.Time) *RepositoryUpdate {
	ru.mutation.SetLastSync(t)
	return ru
}

// SetNillableLastSync sets the "last_sync" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableLastSync(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetLastSync(*t)
	}
	return ru
}

// ClearLastSync clears the value of the "last_sync" field.
func (ru *RepositoryUpdate) ClearLastSync() *RepositoryUpdate {
	ru.mutation.ClearLastSync()
	return ru
}

// SetSyncStatus sets the "sync_status" field.
func (ru *RepositoryUpdate) SetSyncStatus(rs repository.SyncStatus) *RepositoryUpdate {
	ru.mutation.SetSyncStatus(rs)
	return ru
}

// SetNillableSyncStatus sets the "sync_status" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableSyncStatus(rs *repository.SyncStatus) *RepositoryUpdate {
	if rs != nil {
		ru.SetSyncStatus(*rs)
	}
	return ru
}

// SetManifest sets the "manifest" field.
func (ru *RepositoryUpdate) SetManifest(s string) *RepositoryUpdate {
	ru.mutation.SetManifest(s)
	return ru
}

// SetNillableManifest sets the "manifest" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableManifest(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetManifest(*s)
	}
	return ru
}

// ClearManifest clears the value of the "manifest" field.
func (ru *RepositoryUpdate) ClearManifest() *RepositoryUpdate {
	ru.mutation.ClearManifest()
	return ru
}

// SetManifestHash sets the "manifest_hash" field.
func (ru *RepositoryUpdate) SetManifestHash(s string) *RepositoryUpdate {
	ru.mutation.SetManifestHash(s)
	return ru
}

// SetNillableManifestHash sets the "manifest_hash" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableManifestHash(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetManifestHash(*s)
	}
	return ru
}

// ClearManifestHash clears the value of the "manifest_hash" field.
func (ru *RepositoryUpdate) ClearManifestHash() *RepositoryUpdate {
	ru.mutation.ClearManifestHash()
	return ru
}

// SetHasWriteAccess sets the "has_write_access" field.
func (ru *RepositoryUpdate) SetHasWriteAccess(b bool) *RepositoryUpdate {
	ru.mutation.SetHasWriteAccess(b)
	return ru
}

// SetNillableHasWriteAccess sets the "has_write_access" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableHasWriteAccess(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetHasWriteAccess(*b)
	}
	return ru
}

// SetAccessToken sets the "access_token" field.
func (ru *RepositoryUpdate) SetAccessToken(s string) *RepositoryUpdate {
	ru.mutation.SetAccessToken(s)
	return ru
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableAccessToken(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetAccessToken(*s)
	}
	return ru
}

// ClearAccessToken clears the value of the "access_token" field.
func (ru *RepositoryUpdate) ClearAccessToken() *RepositoryUpdate {
	ru.mutation.ClearAccessToken()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RepositoryUpdate) SetUpdatedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// AddComponentIDs adds the "components" edge to the Component entity by IDs.
func (ru *RepositoryUpdate) AddComponentIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.AddComponentIDs(ids...)
	return ru
}

// AddComponents adds the "components" edges to the Component entity.
func (ru *RepositoryUpdate) AddComponents(c ...*Component) *RepositoryUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddComponentIDs(ids...)
}

// AddToolIDs adds the "tools" edge to the Tool entity by IDs.
func (ru *RepositoryUpdate) AddToolIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.AddToolIDs(ids...)
	return ru
}

// AddTools adds the "tools" edges to the Tool entity.
func (ru *RepositoryUpdate) AddTools(t ...*Tool) *RepositoryUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.AddToolIDs(ids...)
}

// AddPromptIDs adds the "prompts" edge to the Prompt entity by IDs.
func (ru *RepositoryUpdate) AddPromptIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.AddPromptIDs(ids...)
	return ru
}

// AddPrompts adds the "prompts" edges to the Prompt entity.
func (ru *RepositoryUpdate) AddPrompts(p ...*Prompt) *RepositoryUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddPromptIDs(ids...)
}

// AddAgentIDs adds the "agents" edge to the Agent entity by IDs.
func (ru *RepositoryUpdate) AddAgentIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.AddAgentIDs(ids...)
	return ru
}

// AddAgents adds the "agents" edges to the Agent entity.
func (ru *RepositoryUpdate) AddAgents(a ...*Agent) *RepositoryUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddAgentIDs(ids...)
}

// AddForkIDs adds the "forks" edge to the Fork entity by IDs.
func (ru *RepositoryUpdate) AddForkIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.AddForkIDs(ids...)
	return ru
}

// AddForks adds the "forks" edges to the Fork entity.
func (ru *RepositoryUpdate) AddForks(f ...*Fork) *RepositoryUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ru.AddForkIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ru *RepositoryUpdate) Mutation() *RepositoryMutation {
	return ru.mutation
}

// ClearComponents clears all "components" edges to the Component entity.
func (ru *RepositoryUpdate) ClearComponents() *RepositoryUpdate {
	ru.mutation.ClearComponents()
	return ru
}

// RemoveComponentIDs removes the "components" edge to Component entities by IDs.
func (ru *RepositoryUpdate) RemoveComponentIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.RemoveComponentIDs(ids...)
	return ru
}

// RemoveComponents removes "components" edges to Component entities.
func (ru *RepositoryUpdate) RemoveComponents(c ...*Component) *RepositoryUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveComponentIDs(ids...)
}

// ClearTools clears all "tools" edges to the Tool entity.
func (ru *RepositoryUpdate) ClearTools() *RepositoryUpdate {
	ru.mutation.ClearTools()
	return ru
}

// RemoveToolIDs removes the "tools" edge to Tool entities by IDs.
func (ru *RepositoryUpdate) RemoveToolIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.RemoveToolIDs(ids...)
	return ru
}

// RemoveTools removes "tools" edges to Tool entities.
func (ru *RepositoryUpdate) RemoveTools(t ...*Tool) *RepositoryUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.RemoveToolIDs(ids...)
}

// ClearPrompts clears all "prompts" edges to the Prompt entity.
func (ru *RepositoryUpdate) ClearPrompts() *RepositoryUpdate {
	ru.mutation.ClearPrompts()
	return ru
}

// RemovePromptIDs removes the "prompts" edge to Prompt entities by IDs.
func (ru *RepositoryUpdate) RemovePromptIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.RemovePromptIDs(ids...)
	return ru
}

// RemovePrompts removes "prompts" edges to Prompt entities.
func (ru *RepositoryUpdate) RemovePrompts(p ...*Prompt) *RepositoryUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemovePromptIDs(ids...)
}

// ClearAgents clears all "agents" edges to the Agent entity.
func (ru *RepositoryUpdate) ClearAgents() *RepositoryUpdate {
	ru.mutation.ClearAgents()
	return ru
}

// RemoveAgentIDs removes the "agents" edge to Agent entities by IDs.
func (ru *RepositoryUpdate) RemoveAgentIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.RemoveAgentIDs(ids...)
	return ru
}

// RemoveAgents removes "agents" edges to Agent entities.
func (ru *RepositoryUpdate) RemoveAgents(a ...*Agent) *RepositoryUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveAgentIDs(ids...)
}

// ClearForks clears all "forks" edges to the Fork entity.
func (ru *RepositoryUpdate) ClearForks() *RepositoryUpdate {
	ru.mutation.ClearForks()
	return ru
}

// RemoveForkIDs removes the "forks" edge to Fork entities by IDs.
func (ru *RepositoryUpdate) RemoveForkIDs(ids ...string) *RepositoryUpdate {
	ru.mutation.RemoveForkIDs(ids...)
	return ru
}

// RemoveForks removes "forks" edges to Fork entities.
func (ru *RepositoryUpdate) RemoveForks(f ...*Fork) *RepositoryUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ru.RemoveForkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RepositoryUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RepositoryUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RepositoryUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RepositoryUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := repository.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RepositoryUpdate) check() error {
	if v, ok := ru.mutation.GetType(); ok {
		if err := repository.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Repository.type": %w`, err)}
		}
	}
	if v, ok := ru.mutation.SyncStatus(); ok {
		if err := repository.SyncStatusValidator(v); err != nil {
			return &ValidationError{Name: "sync_status", err: fmt.Errorf(`ent: validator failed for field "Repository.sync_status": %w`, err)}
		}
	}
	return nil
}

func (ru *RepositoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.URL(); ok {
		_spec.SetField(repository.FieldURL, field.TypeString, value)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(repository.FieldType, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.IsActive(); ok {
		_spec.SetField(repository.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ru.mutation.DefaultBranch(); ok {
		_spec.SetField(repository.FieldDefaultBranch, field.TypeString, value)
	}
	if value, ok := ru.mutation.LastSync(); ok {
		_spec.SetField(repository.FieldLastSync, field.TypeTime, value)
	}
	if ru.mutation.LastSyncCleared() {
		_spec.ClearField(repository.FieldLastSync, field.TypeTime)
	}
	if value, ok := ru.mutation.SyncStatus(); ok {
		_spec.SetField(repository.FieldSyncStatus, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.Manifest(); ok {
		_spec.SetField(repository.FieldManifest, field.TypeString, value)
	}
	if ru.mutation.ManifestCleared() {
		_spec.ClearField(repository.FieldManifest, field.TypeString)
	}
	if value, ok := ru.mutation.ManifestHash(); ok {
		_spec.SetField(repository.FieldManifestHash, field.TypeString, value)
	}
	if ru.mutation.ManifestHashCleared() {
		_spec.ClearField(repository.FieldManifestHash, field.TypeString)
	}
	if value, ok := ru.mutation.HasWriteAccess(); ok {
		_spec.SetField(repository.FieldHasWriteAccess, field.TypeBool, value)
	}
	if value, ok := ru.mutation.AccessToken(); ok {
		_spec.SetField(repository.FieldAccessToken, field.TypeString, value)
	}
	if ru.mutation.AccessTokenCleared() {
		_spec.ClearField(repository.FieldAccessToken, field.TypeString)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ComponentsTable,
			Columns: []string{repository.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !ru.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ComponentsTable,
			Columns: []string{repository.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ComponentsTable,
			Columns: []string{repository.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ToolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ToolsTable,
			Columns: []string{repository.ToolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedToolsIDs(); len(nodes) > 0 && !ru.mutation.ToolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ToolsTable,
			Columns: []string{repository.ToolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ToolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ToolsTable,
			Columns: []string{repository.ToolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PromptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PromptsTable,
			Columns: []string{repository.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedPromptsIDs(); len(nodes) > 0 && !ru.mutation.PromptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PromptsTable,
			Columns: []string{repository.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PromptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PromptsTable,
			Columns: []string{repository.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.AgentsTable,
			Columns: []string{repository.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedAgentsIDs(); len(nodes) > 0 && !ru.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.AgentsTable,
			Columns: []string{repository.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AgentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.AgentsTable,
			Columns: []string{repository.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ForksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ForksTable,
			Columns: []string{repository.ForksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fork.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedForksIDs(); len(nodes) > 0 && !ru.mutation.ForksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ForksTable,
			Columns: []string{repository.ForksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fork.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ForksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ForksTable,
			Columns: []string{repository.ForksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fork.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RepositoryUpdateOne is the builder for updating a single Repository entity.
type RepositoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepositoryMutation
}

// SetName sets the "name" field.
func (ruo *RepositoryUpdateOne) SetName(s string) *RepositoryUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableName(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetURL sets the "url" field.
func (ruo *RepositoryUpdateOne) SetURL(s string) *RepositoryUpdateOne {
	ruo.mutation.SetURL(s)
	return ruo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableURL(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetURL(*s)
	}
	return ruo
}

// SetType sets the "type" field.
func (ruo *RepositoryUpdateOne) SetType(r repository.Type) *RepositoryUpdateOne {
	ruo.mutation.SetType(r)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableType(r *repository.Type) *RepositoryUpdateOne {
	if r != nil {
		ruo.SetType(*r)
	}
	return ruo
}

// SetIsActive sets the "is_active" field.
func (ruo *RepositoryUpdateOne) SetIsActive(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetIsActive(b)
	return ruo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableIsActive(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetIsActive(*b)
	}
	return ruo
}

// SetDefaultBranch sets the "default_branch" field.
func (ruo *RepositoryUpdateOne) SetDefaultBranch(s string) *RepositoryUpdateOne {
	ruo.mutation.SetDefaultBranch(s)
	return ruo
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableDefaultBranch(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetDefaultBranch(*s)
	}
	return ruo
}

// SetLastSync sets the "last_sync" field.
func (ruo *RepositoryUpdateOne) SetLastSync(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetLastSync(t)
	return ruo
}

// SetNillableLastSync sets the "last_sync" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableLastSync(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetLastSync(*t)
	}
	return ruo
}

// ClearLastSync clears the value of the "last_sync" field.
func (ruo *RepositoryUpdateOne) ClearLastSync() *RepositoryUpdateOne {
	ruo.mutation.ClearLastSync()
	return ruo
}

// SetSyncStatus sets the "sync_status" field.
func (ruo *RepositoryUpdateOne) SetSyncStatus(rs repository.SyncStatus) *RepositoryUpdateOne {
	ruo.mutation.SetSyncStatus(rs)
	return ruo
}

// SetNillableSyncStatus sets the "sync_status" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableSyncStatus(rs *repository.SyncStatus) *RepositoryUpdateOne {
	if rs != nil {
		ruo.SetSyncStatus(*rs)
	}
	return ruo
}

// SetManifest sets the "manifest" field.
func (ruo *RepositoryUpdateOne) SetManifest(s string) *RepositoryUpdateOne {
	ruo.mutation.SetManifest(s)
	return ruo
}

// SetNillableManifest sets the "manifest" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableManifest(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetManifest(*s)
	}
	return ruo
}

// ClearManifest clears the value of the "manifest" field.
func (ruo *RepositoryUpdateOne) ClearManifest() *RepositoryUpdateOne {
	ruo.mutation.ClearManifest()
	return ruo
}

// SetManifestHash sets the "manifest_hash" field.
func (ruo *RepositoryUpdateOne) SetManifestHash(s string) *RepositoryUpdateOne {
	ruo.mutation.SetManifestHash(s)
	return ruo
}

// SetNillableManifestHash sets the "manifest_hash" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableManifestHash(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetManifestHash(*s)
	}
	return ruo
}

// ClearManifestHash clears the value of the "manifest_hash" field.
func (ruo *RepositoryUpdateOne) ClearManifestHash() *RepositoryUpdateOne {
	ruo.mutation.ClearManifestHash()
	return ruo
}

// SetHasWriteAccess sets the "has_write_access" field.
func (ruo *RepositoryUpdateOne) SetHasWriteAccess(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetHasWriteAccess(b)
	return ruo
}

// SetNillableHasWriteAccess sets the "has_write_access" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableHasWriteAccess(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetHasWriteAccess(*b)
	}
	return ruo
}

// SetAccessToken sets the "access_token" field.
func (ruo *RepositoryUpdateOne) SetAccessToken(s string) *RepositoryUpdateOne {
	ruo.mutation.SetAccessToken(s)
	return ruo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableAccessToken(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetAccessToken(*s)
	}
	return ruo
}

// ClearAccessToken clears the value of the "access_token" field.
func (ruo *RepositoryUpdateOne) ClearAccessToken() *RepositoryUpdateOne {
	ruo.mutation.ClearAccessToken()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RepositoryUpdateOne) SetUpdatedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// AddComponentIDs adds the "components" edge to the Component entity by IDs.
func (ruo *RepositoryUpdateOne) AddComponentIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.AddComponentIDs(ids...)
	return ruo
}

// AddComponents adds the "components" edges to the Component entity.
func (ruo *RepositoryUpdateOne) AddComponents(c ...*Component) *RepositoryUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddComponentIDs(ids...)
}

// AddToolIDs adds the "tools" edge to the Tool entity by IDs.
func (ruo *RepositoryUpdateOne) AddToolIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.AddToolIDs(ids...)
	return ruo
}

// AddTools adds the "tools" edges to the Tool entity.
func (ruo *RepositoryUpdateOne) AddTools(t ...*Tool) *RepositoryUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.AddToolIDs(ids...)
}

// AddPromptIDs adds the "prompts" edge to the Prompt entity by IDs.
func (ruo *RepositoryUpdateOne) AddPromptIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.AddPromptIDs(ids...)
	return ruo
}

// AddPrompts adds the "prompts" edges to the Prompt entity.
func (ruo *RepositoryUpdateOne) AddPrompts(p ...*Prompt) *RepositoryUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddPromptIDs(ids...)
}

// AddAgentIDs adds the "agents" edge to the Agent entity by IDs.
func (ruo *RepositoryUpdateOne) AddAgentIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.AddAgentIDs(ids...)
	return ruo
}

// AddAgents adds the "agents" edges to the Agent entity.
func (ruo *RepositoryUpdateOne) AddAgents(a ...*Agent) *RepositoryUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddAgentIDs(ids...)
}

// AddForkIDs adds the "forks" edge to the Fork entity by IDs.
func (ruo *RepositoryUpdateOne) AddForkIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.AddForkIDs(ids...)
	return ruo
}

// AddForks adds the "forks" edges to the Fork entity.
func (ruo *RepositoryUpdateOne) AddForks(f ...*Fork) *RepositoryUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ruo.AddForkIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ruo *RepositoryUpdateOne) Mutation() *RepositoryMutation {
	return ruo.mutation
}

// ClearComponents clears all "components" edges to the Component entity.
func (ruo *RepositoryUpdateOne) ClearComponents() *RepositoryUpdateOne {
	ruo.mutation.ClearComponents()
	return ruo
}

// RemoveComponentIDs removes the "components" edge to Component entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveComponentIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.RemoveComponentIDs(ids...)
	return ruo
}

// RemoveComponents removes "components" edges to Component entities.
func (ruo *RepositoryUpdateOne) RemoveComponents(c ...*Component) *RepositoryUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveComponentIDs(ids...)
}

// ClearTools clears all "tools" edges to the Tool entity.
func (ruo *RepositoryUpdateOne) ClearTools() *RepositoryUpdateOne {
	ruo.mutation.ClearTools()
	return ruo
}

// RemoveToolIDs removes the "tools" edge to Tool entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveToolIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.RemoveToolIDs(ids...)
	return ruo
}

// RemoveTools removes "tools" edges to Tool entities.
func (ruo *RepositoryUpdateOne) RemoveTools(t ...*Tool) *RepositoryUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.RemoveToolIDs(ids...)
}

// ClearPrompts clears all "prompts" edges to the Prompt entity.
func (ruo *RepositoryUpdateOne) ClearPrompts() *RepositoryUpdateOne {
	ruo.mutation.ClearPrompts()
	return ruo
}

// RemovePromptIDs removes the "prompts" edge to Prompt entities by IDs.
func (ruo *RepositoryUpdateOne) RemovePromptIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.RemovePromptIDs(ids...)
	return ruo
}

// RemovePrompts removes "prompts" edges to Prompt entities.
func (ruo *RepositoryUpdateOne) RemovePrompts(p ...*Prompt) *RepositoryUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemovePromptIDs(ids...)
}

// ClearAgents clears all "agents" edges to the Agent entity.
func (ruo *RepositoryUpdateOne) ClearAgents() *RepositoryUpdateOne {
	ruo.mutation.ClearAgents()
	return ruo
}

// RemoveAgentIDs removes the "agents" edge to Agent entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveAgentIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.RemoveAgentIDs(ids...)
	return ruo
}

// RemoveAgents removes "agents" edges to Agent entities.
func (ruo *RepositoryUpdateOne) RemoveAgents(a ...*Agent) *RepositoryUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveAgentIDs(ids...)
}

// ClearForks clears all "forks" edges to the Fork entity.
func (ruo *RepositoryUpdateOne) ClearForks() *RepositoryUpdateOne {
	ruo.mutation.ClearForks()
	return ruo
}

// RemoveForkIDs removes the "forks" edge to Fork entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveForkIDs(ids ...string) *RepositoryUpdateOne {
	ruo.mutation.RemoveForkIDs(ids...)
	return ruo
}

// RemoveForks removes "forks" edges to Fork entities.
func (ruo *RepositoryUpdateOne) RemoveForks(f ...*Fork) *RepositoryUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ruo.RemoveForkIDs(ids...)
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ruo *RepositoryUpdateOne) Where(ps ...predicate.Repository) *RepositoryUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RepositoryUpdateOne) Select(field string, fields ...string) *RepositoryUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Repository entity.
func (ruo *RepositoryUpdateOne) Save(ctx context.Context) (*Repository, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) SaveX(ctx context.Context) *Repository {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RepositoryUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := repository.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RepositoryUpdateOne) check() error {
	if v, ok := ruo.mutation.GetType(); ok {
		if err := repository.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Repository.type": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.SyncStatus(); ok {
		if err := repository.SyncStatusValidator(v); err != nil {
			return &ValidationError{Name: "sync_status", err: fmt.Errorf(`ent: validator failed for field "Repository.sync_status": %w`, err)}
		}
	}
	return nil
}

func (ruo *RepositoryUpdateOne) sqlSave(ctx context.Context) (_node *Repository, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Repository.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repository.FieldID)
		for _, f := range fields {
			if !repository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.URL(); ok {
		_spec.SetField(repository.FieldURL, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(repository.FieldType, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.IsActive(); ok {
		_spec.SetField(repository.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.DefaultBranch(); ok {
		_spec.SetField(repository.FieldDefaultBranch, field.TypeString, value)
	}
	if value, ok := ruo.mutation.LastSync(); ok {
		_spec.SetField(repository.FieldLastSync, field.TypeTime, value)
	}
	if ruo.mutation.LastSyncCleared() {
		_spec.ClearField(repository.FieldLastSync, field.TypeTime)
	}
	if value, ok := ruo.mutation.SyncStatus(); ok {
		_spec.SetField(repository.FieldSyncStatus, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.Manifest(); ok {
		_spec.SetField(repository.FieldManifest, field.TypeString, value)
	}
	if ruo.mutation.ManifestCleared() {
		_spec.ClearField(repository.FieldManifest, field.TypeString)
	}
	if value, ok := ruo.mutation.ManifestHash(); ok {
		_spec.SetField(repository.FieldManifestHash, field.TypeString, value)
	}
	if ruo.mutation.ManifestHashCleared() {
		_spec.ClearField(repository.FieldManifestHash, field.TypeString)
	}
	if value, ok := ruo.mutation.HasWriteAccess(); ok {
		_spec.SetField(repository.FieldHasWriteAccess, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.AccessToken(); ok {
		_spec.SetField(repository.FieldAccessToken, field.TypeString, value)
	}
	if ruo.mutation.AccessTokenCleared() {
		_spec.ClearField(repository.FieldAccessToken, field.TypeString)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ComponentsTable,
			Columns: []string{repository.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !ruo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ComponentsTable,
			Columns: []string{repository.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ComponentsTable,
			Columns: []string{repository.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(component.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ToolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ToolsTable,
			Columns: []string{repository.ToolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedToolsIDs(); len(nodes) > 0 && !ruo.mutation.ToolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ToolsTable,
			Columns: []string{repository.ToolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ToolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ToolsTable,
			Columns: []string{repository.ToolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tool.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PromptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PromptsTable,
			Columns: []string{repository.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedPromptsIDs(); len(nodes) > 0 && !ruo.mutation.PromptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PromptsTable,
			Columns: []string{repository.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PromptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PromptsTable,
			Columns: []string{repository.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.AgentsTable,
			Columns: []string{repository.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedAgentsIDs(); len(nodes) > 0 && !ruo.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.AgentsTable,
			Columns: []string{repository.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AgentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.AgentsTable,
			Columns: []string{repository.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ForksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ForksTable,
			Columns: []string{repository.ForksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fork.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedForksIDs(); len(nodes) > 0 && !ruo.mutation.ForksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ForksTable,
			Columns: []string{repository.ForksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fork.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ForksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ForksTable,
			Columns: []string{repository.ForksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fork.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Repository{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
