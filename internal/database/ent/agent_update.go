// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/agent"
	"github.com/denkhaus/agentforge/internal/database/ent/agentdependency"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
)

// AgentUpdate is the builder for updating Agent entities.
type AgentUpdate struct {
	config
	hooks    []Hook
	mutation *AgentMutation
}

// Where appends a list predicates to the AgentUpdate builder.
func (au *AgentUpdate) Where(ps ...predicate.Agent) *AgentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AgentUpdate) SetName(s string) *AgentUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AgentUpdate) SetNillableName(s *string) *AgentUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetNamespace sets the "namespace" field.
func (au *AgentUpdate) SetNamespace(s string) *AgentUpdate {
	au.mutation.SetNamespace(s)
	return au
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (au *AgentUpdate) SetNillableNamespace(s *string) *AgentUpdate {
	if s != nil {
		au.SetNamespace(*s)
	}
	return au
}

// SetVersion sets the "version" field.
func (au *AgentUpdate) SetVersion(s string) *AgentUpdate {
	au.mutation.SetVersion(s)
	return au
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (au *AgentUpdate) SetNillableVersion(s *string) *AgentUpdate {
	if s != nil {
		au.SetVersion(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AgentUpdate) SetDescription(s string) *AgentUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDescription(s *string) *AgentUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// SetAuthor sets the "author" field.
func (au *AgentUpdate) SetAuthor(s string) *AgentUpdate {
	au.mutation.SetAuthor(s)
	return au
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (au *AgentUpdate) SetNillableAuthor(s *string) *AgentUpdate {
	if s != nil {
		au.SetAuthor(*s)
	}
	return au
}

// SetLicense sets the "license" field.
func (au *AgentUpdate) SetLicense(s string) *AgentUpdate {
	au.mutation.SetLicense(s)
	return au
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (au *AgentUpdate) SetNillableLicense(s *string) *AgentUpdate {
	if s != nil {
		au.SetLicense(*s)
	}
	return au
}

// SetHomepage sets the "homepage" field.
func (au *AgentUpdate) SetHomepage(s string) *AgentUpdate {
	au.mutation.SetHomepage(s)
	return au
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (au *AgentUpdate) SetNillableHomepage(s *string) *AgentUpdate {
	if s != nil {
		au.SetHomepage(*s)
	}
	return au
}

// ClearHomepage clears the value of the "homepage" field.
func (au *AgentUpdate) ClearHomepage() *AgentUpdate {
	au.mutation.ClearHomepage()
	return au
}

// SetDocumentation sets the "documentation" field.
func (au *AgentUpdate) SetDocumentation(s string) *AgentUpdate {
	au.mutation.SetDocumentation(s)
	return au
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDocumentation(s *string) *AgentUpdate {
	if s != nil {
		au.SetDocumentation(*s)
	}
	return au
}

// ClearDocumentation clears the value of the "documentation" field.
func (au *AgentUpdate) ClearDocumentation() *AgentUpdate {
	au.mutation.ClearDocumentation()
	return au
}

// SetTags sets the "tags" field.
func (au *AgentUpdate) SetTags(s []string) *AgentUpdate {
	au.mutation.SetTags(s)
	return au
}

// AppendTags appends s to the "tags" field.
func (au *AgentUpdate) AppendTags(s []string) *AgentUpdate {
	au.mutation.AppendTags(s)
	return au
}

// ClearTags clears the value of the "tags" field.
func (au *AgentUpdate) ClearTags() *AgentUpdate {
	au.mutation.ClearTags()
	return au
}

// SetCategories sets the "categories" field.
func (au *AgentUpdate) SetCategories(s []string) *AgentUpdate {
	au.mutation.SetCategories(s)
	return au
}

// AppendCategories appends s to the "categories" field.
func (au *AgentUpdate) AppendCategories(s []string) *AgentUpdate {
	au.mutation.AppendCategories(s)
	return au
}

// ClearCategories clears the value of the "categories" field.
func (au *AgentUpdate) ClearCategories() *AgentUpdate {
	au.mutation.ClearCategories()
	return au
}

// SetKeywords sets the "keywords" field.
func (au *AgentUpdate) SetKeywords(s []string) *AgentUpdate {
	au.mutation.SetKeywords(s)
	return au
}

// AppendKeywords appends s to the "keywords" field.
func (au *AgentUpdate) AppendKeywords(s []string) *AgentUpdate {
	au.mutation.AppendKeywords(s)
	return au
}

// ClearKeywords clears the value of the "keywords" field.
func (au *AgentUpdate) ClearKeywords() *AgentUpdate {
	au.mutation.ClearKeywords()
	return au
}

// SetStability sets the "stability" field.
func (au *AgentUpdate) SetStability(a agent.Stability) *AgentUpdate {
	au.mutation.SetStability(a)
	return au
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (au *AgentUpdate) SetNillableStability(a *agent.Stability) *AgentUpdate {
	if a != nil {
		au.SetStability(*a)
	}
	return au
}

// SetMaturity sets the "maturity" field.
func (au *AgentUpdate) SetMaturity(a agent.Maturity) *AgentUpdate {
	au.mutation.SetMaturity(a)
	return au
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (au *AgentUpdate) SetNillableMaturity(a *agent.Maturity) *AgentUpdate {
	if a != nil {
		au.SetMaturity(*a)
	}
	return au
}

// SetForgeVersion sets the "forge_version" field.
func (au *AgentUpdate) SetForgeVersion(s string) *AgentUpdate {
	au.mutation.SetForgeVersion(s)
	return au
}

// SetNillableForgeVersion sets the "forge_version" field if the given value is not nil.
func (au *AgentUpdate) SetNillableForgeVersion(s *string) *AgentUpdate {
	if s != nil {
		au.SetForgeVersion(*s)
	}
	return au
}

// SetPlatforms sets the "platforms" field.
func (au *AgentUpdate) SetPlatforms(s []string) *AgentUpdate {
	au.mutation.SetPlatforms(s)
	return au
}

// AppendPlatforms appends s to the "platforms" field.
func (au *AgentUpdate) AppendPlatforms(s []string) *AgentUpdate {
	au.mutation.AppendPlatforms(s)
	return au
}

// ClearPlatforms clears the value of the "platforms" field.
func (au *AgentUpdate) ClearPlatforms() *AgentUpdate {
	au.mutation.ClearPlatforms()
	return au
}

// SetSpec sets the "spec" field.
func (au *AgentUpdate) SetSpec(s string) *AgentUpdate {
	au.mutation.SetSpec(s)
	return au
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSpec(s *string) *AgentUpdate {
	if s != nil {
		au.SetSpec(*s)
	}
	return au
}

// SetSpecHash sets the "spec_hash" field.
func (au *AgentUpdate) SetSpecHash(s string) *AgentUpdate {
	au.mutation.SetSpecHash(s)
	return au
}

// SetNillableSpecHash sets the "spec_hash" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSpecHash(s *string) *AgentUpdate {
	if s != nil {
		au.SetSpecHash(*s)
	}
	return au
}

// SetIsInstalled sets the "is_installed" field.
func (au *AgentUpdate) SetIsInstalled(b bool) *AgentUpdate {
	au.mutation.SetIsInstalled(b)
	return au
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (au *AgentUpdate) SetNillableIsInstalled(b *bool) *AgentUpdate {
	if b != nil {
		au.SetIsInstalled(*b)
	}
	return au
}

// SetInstallPath sets the "install_path" field.
func (au *AgentUpdate) SetInstallPath(s string) *AgentUpdate {
	au.mutation.SetInstallPath(s)
	return au
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (au *AgentUpdate) SetNillableInstallPath(s *string) *AgentUpdate {
	if s != nil {
		au.SetInstallPath(*s)
	}
	return au
}

// ClearInstallPath clears the value of the "install_path" field.
func (au *AgentUpdate) ClearInstallPath() *AgentUpdate {
	au.mutation.ClearInstallPath()
	return au
}

// SetInstalledAt sets the "installed_at" field.
func (au *AgentUpdate) SetInstalledAt(t time.Time) *AgentUpdate {
	au.mutation.SetInstalledAt(t)
	return au
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (au *AgentUpdate) SetNillableInstalledAt(t *time.Time) *AgentUpdate {
	if t != nil {
		au.SetInstalledAt(*t)
	}
	return au
}

// ClearInstalledAt clears the value of the "installed_at" field.
func (au *AgentUpdate) ClearInstalledAt() *AgentUpdate {
	au.mutation.ClearInstalledAt()
	return au
}

// SetCommitHash sets the "commit_hash" field.
func (au *AgentUpdate) SetCommitHash(s string) *AgentUpdate {
	au.mutation.SetCommitHash(s)
	return au
}

// SetNillableCommitHash sets the "commit_hash" field if the given value is not nil.
func (au *AgentUpdate) SetNillableCommitHash(s *string) *AgentUpdate {
	if s != nil {
		au.SetCommitHash(*s)
	}
	return au
}

// SetBranch sets the "branch" field.
func (au *AgentUpdate) SetBranch(s string) *AgentUpdate {
	au.mutation.SetBranch(s)
	return au
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (au *AgentUpdate) SetNillableBranch(s *string) *AgentUpdate {
	if s != nil {
		au.SetBranch(*s)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AgentUpdate) SetUpdatedAt(t time.Time) *AgentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetConfigPath sets the "config_path" field.
func (au *AgentUpdate) SetConfigPath(s string) *AgentUpdate {
	au.mutation.SetConfigPath(s)
	return au
}

// SetNillableConfigPath sets the "config_path" field if the given value is not nil.
func (au *AgentUpdate) SetNillableConfigPath(s *string) *AgentUpdate {
	if s != nil {
		au.SetConfigPath(*s)
	}
	return au
}

// ClearConfigPath clears the value of the "config_path" field.
func (au *AgentUpdate) ClearConfigPath() *AgentUpdate {
	au.mutation.ClearConfigPath()
	return au
}

// SetAgentConfig sets the "agent_config" field.
func (au *AgentUpdate) SetAgentConfig(m map[string]interface{}) *AgentUpdate {
	au.mutation.SetAgentConfig(m)
	return au
}

// ClearAgentConfig clears the value of the "agent_config" field.
func (au *AgentUpdate) ClearAgentConfig() *AgentUpdate {
	au.mutation.ClearAgentConfig()
	return au
}

// SetLlmProvider sets the "llm_provider" field.
func (au *AgentUpdate) SetLlmProvider(s string) *AgentUpdate {
	au.mutation.SetLlmProvider(s)
	return au
}

// SetNillableLlmProvider sets the "llm_provider" field if the given value is not nil.
func (au *AgentUpdate) SetNillableLlmProvider(s *string) *AgentUpdate {
	if s != nil {
		au.SetLlmProvider(*s)
	}
	return au
}

// ClearLlmProvider clears the value of the "llm_provider" field.
func (au *AgentUpdate) ClearLlmProvider() *AgentUpdate {
	au.mutation.ClearLlmProvider()
	return au
}

// SetSystemPromptID sets the "system_prompt_id" field.
func (au *AgentUpdate) SetSystemPromptID(s string) *AgentUpdate {
	au.mutation.SetSystemPromptID(s)
	return au
}

// SetNillableSystemPromptID sets the "system_prompt_id" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSystemPromptID(s *string) *AgentUpdate {
	if s != nil {
		au.SetSystemPromptID(*s)
	}
	return au
}

// ClearSystemPromptID clears the value of the "system_prompt_id" field.
func (au *AgentUpdate) ClearSystemPromptID() *AgentUpdate {
	au.mutation.ClearSystemPromptID()
	return au
}

// SetToolDependencies sets the "tool_dependencies" field.
func (au *AgentUpdate) SetToolDependencies(s []string) *AgentUpdate {
	au.mutation.SetToolDependencies(s)
	return au
}

// AppendToolDependencies appends s to the "tool_dependencies" field.
func (au *AgentUpdate) AppendToolDependencies(s []string) *AgentUpdate {
	au.mutation.AppendToolDependencies(s)
	return au
}

// ClearToolDependencies clears the value of the "tool_dependencies" field.
func (au *AgentUpdate) ClearToolDependencies() *AgentUpdate {
	au.mutation.ClearToolDependencies()
	return au
}

// SetPromptDependencies sets the "prompt_dependencies" field.
func (au *AgentUpdate) SetPromptDependencies(s []string) *AgentUpdate {
	au.mutation.SetPromptDependencies(s)
	return au
}

// AppendPromptDependencies appends s to the "prompt_dependencies" field.
func (au *AgentUpdate) AppendPromptDependencies(s []string) *AgentUpdate {
	au.mutation.AppendPromptDependencies(s)
	return au
}

// ClearPromptDependencies clears the value of the "prompt_dependencies" field.
func (au *AgentUpdate) ClearPromptDependencies() *AgentUpdate {
	au.mutation.ClearPromptDependencies()
	return au
}

// SetAgentDependencies sets the "agent_dependencies" field.
func (au *AgentUpdate) SetAgentDependencies(s []string) *AgentUpdate {
	au.mutation.SetAgentDependencies(s)
	return au
}

// AppendAgentDependencies appends s to the "agent_dependencies" field.
func (au *AgentUpdate) AppendAgentDependencies(s []string) *AgentUpdate {
	au.mutation.AppendAgentDependencies(s)
	return au
}

// ClearAgentDependencies clears the value of the "agent_dependencies" field.
func (au *AgentUpdate) ClearAgentDependencies() *AgentUpdate {
	au.mutation.ClearAgentDependencies()
	return au
}

// SetAgentType sets the "agent_type" field.
func (au *AgentUpdate) SetAgentType(at agent.AgentType) *AgentUpdate {
	au.mutation.SetAgentType(at)
	return au
}

// SetNillableAgentType sets the "agent_type" field if the given value is not nil.
func (au *AgentUpdate) SetNillableAgentType(at *agent.AgentType) *AgentUpdate {
	if at != nil {
		au.SetAgentType(*at)
	}
	return au
}

// SetCapabilities sets the "capabilities" field.
func (au *AgentUpdate) SetCapabilities(s []string) *AgentUpdate {
	au.mutation.SetCapabilities(s)
	return au
}

// AppendCapabilities appends s to the "capabilities" field.
func (au *AgentUpdate) AppendCapabilities(s []string) *AgentUpdate {
	au.mutation.AppendCapabilities(s)
	return au
}

// ClearCapabilities clears the value of the "capabilities" field.
func (au *AgentUpdate) ClearCapabilities() *AgentUpdate {
	au.mutation.ClearCapabilities()
	return au
}

// SetSupportedLanguages sets the "supported_languages" field.
func (au *AgentUpdate) SetSupportedLanguages(s []string) *AgentUpdate {
	au.mutation.SetSupportedLanguages(s)
	return au
}

// AppendSupportedLanguages appends s to the "supported_languages" field.
func (au *AgentUpdate) AppendSupportedLanguages(s []string) *AgentUpdate {
	au.mutation.AppendSupportedLanguages(s)
	return au
}

// ClearSupportedLanguages clears the value of the "supported_languages" field.
func (au *AgentUpdate) ClearSupportedLanguages() *AgentUpdate {
	au.mutation.ClearSupportedLanguages()
	return au
}

// SetSupportsMemory sets the "supports_memory" field.
func (au *AgentUpdate) SetSupportsMemory(b bool) *AgentUpdate {
	au.mutation.SetSupportsMemory(b)
	return au
}

// SetNillableSupportsMemory sets the "supports_memory" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSupportsMemory(b *bool) *AgentUpdate {
	if b != nil {
		au.SetSupportsMemory(*b)
	}
	return au
}

// SetSupportsTools sets the "supports_tools" field.
func (au *AgentUpdate) SetSupportsTools(b bool) *AgentUpdate {
	au.mutation.SetSupportsTools(b)
	return au
}

// SetNillableSupportsTools sets the "supports_tools" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSupportsTools(b *bool) *AgentUpdate {
	if b != nil {
		au.SetSupportsTools(*b)
	}
	return au
}

// SetSupportsMultimodal sets the "supports_multimodal" field.
func (au *AgentUpdate) SetSupportsMultimodal(b bool) *AgentUpdate {
	au.mutation.SetSupportsMultimodal(b)
	return au
}

// SetNillableSupportsMultimodal sets the "supports_multimodal" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSupportsMultimodal(b *bool) *AgentUpdate {
	if b != nil {
		au.SetSupportsMultimodal(*b)
	}
	return au
}

// SetModelPreferences sets the "model_preferences" field.
func (au *AgentUpdate) SetModelPreferences(s []string) *AgentUpdate {
	au.mutation.SetModelPreferences(s)
	return au
}

// AppendModelPreferences appends s to the "model_preferences" field.
func (au *AgentUpdate) AppendModelPreferences(s []string) *AgentUpdate {
	au.mutation.AppendModelPreferences(s)
	return au
}

// ClearModelPreferences clears the value of the "model_preferences" field.
func (au *AgentUpdate) ClearModelPreferences() *AgentUpdate {
	au.mutation.ClearModelPreferences()
	return au
}

// SetDefaultTemperature sets the "default_temperature" field.
func (au *AgentUpdate) SetDefaultTemperature(f float64) *AgentUpdate {
	au.mutation.ResetDefaultTemperature()
	au.mutation.SetDefaultTemperature(f)
	return au
}

// SetNillableDefaultTemperature sets the "default_temperature" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDefaultTemperature(f *float64) *AgentUpdate {
	if f != nil {
		au.SetDefaultTemperature(*f)
	}
	return au
}

// AddDefaultTemperature adds f to the "default_temperature" field.
func (au *AgentUpdate) AddDefaultTemperature(f float64) *AgentUpdate {
	au.mutation.AddDefaultTemperature(f)
	return au
}

// ClearDefaultTemperature clears the value of the "default_temperature" field.
func (au *AgentUpdate) ClearDefaultTemperature() *AgentUpdate {
	au.mutation.ClearDefaultTemperature()
	return au
}

// SetDefaultMaxTokens sets the "default_max_tokens" field.
func (au *AgentUpdate) SetDefaultMaxTokens(i int) *AgentUpdate {
	au.mutation.ResetDefaultMaxTokens()
	au.mutation.SetDefaultMaxTokens(i)
	return au
}

// SetNillableDefaultMaxTokens sets the "default_max_tokens" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDefaultMaxTokens(i *int) *AgentUpdate {
	if i != nil {
		au.SetDefaultMaxTokens(*i)
	}
	return au
}

// AddDefaultMaxTokens adds i to the "default_max_tokens" field.
func (au *AgentUpdate) AddDefaultMaxTokens(i int) *AgentUpdate {
	au.mutation.AddDefaultMaxTokens(i)
	return au
}

// ClearDefaultMaxTokens clears the value of the "default_max_tokens" field.
func (au *AgentUpdate) ClearDefaultMaxTokens() *AgentUpdate {
	au.mutation.ClearDefaultMaxTokens()
	return au
}

// SetSessionTimeoutMinutes sets the "session_timeout_minutes" field.
func (au *AgentUpdate) SetSessionTimeoutMinutes(i int) *AgentUpdate {
	au.mutation.ResetSessionTimeoutMinutes()
	au.mutation.SetSessionTimeoutMinutes(i)
	return au
}

// SetNillableSessionTimeoutMinutes sets the "session_timeout_minutes" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSessionTimeoutMinutes(i *int) *AgentUpdate {
	if i != nil {
		au.SetSessionTimeoutMinutes(*i)
	}
	return au
}

// AddSessionTimeoutMinutes adds i to the "session_timeout_minutes" field.
func (au *AgentUpdate) AddSessionTimeoutMinutes(i int) *AgentUpdate {
	au.mutation.AddSessionTimeoutMinutes(i)
	return au
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (au *AgentUpdate) SetRepositoryID(id string) *AgentUpdate {
	au.mutation.SetRepositoryID(id)
	return au
}

// SetRepository sets the "repository" edge to the Repository entity.
func (au *AgentUpdate) SetRepository(r *Repository) *AgentUpdate {
	return au.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the AgentDependency entity by IDs.
func (au *AgentUpdate) AddDependencyIDs(ids ...string) *AgentUpdate {
	au.mutation.AddDependencyIDs(ids...)
	return au
}

// AddDependencies adds the "dependencies" edges to the AgentDependency entity.
func (au *AgentUpdate) AddDependencies(a ...*AgentDependency) *AgentUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddDependencyIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (au *AgentUpdate) Mutation() *AgentMutation {
	return au.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (au *AgentUpdate) ClearRepository() *AgentUpdate {
	au.mutation.ClearRepository()
	return au
}

// ClearDependencies clears all "dependencies" edges to the AgentDependency entity.
func (au *AgentUpdate) ClearDependencies() *AgentUpdate {
	au.mutation.ClearDependencies()
	return au
}

// RemoveDependencyIDs removes the "dependencies" edge to AgentDependency entities by IDs.
func (au *AgentUpdate) RemoveDependencyIDs(ids ...string) *AgentUpdate {
	au.mutation.RemoveDependencyIDs(ids...)
	return au
}

// RemoveDependencies removes "dependencies" edges to AgentDependency entities.
func (au *AgentUpdate) RemoveDependencies(a ...*AgentDependency) *AgentUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveDependencyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AgentUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AgentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AgentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AgentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AgentUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := agent.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AgentUpdate) check() error {
	if v, ok := au.mutation.Stability(); ok {
		if err := agent.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Agent.stability": %w`, err)}
		}
	}
	if v, ok := au.mutation.Maturity(); ok {
		if err := agent.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Agent.maturity": %w`, err)}
		}
	}
	if v, ok := au.mutation.AgentType(); ok {
		if err := agent.AgentTypeValidator(v); err != nil {
			return &ValidationError{Name: "agent_type", err: fmt.Errorf(`ent: validator failed for field "Agent.agent_type": %w`, err)}
		}
	}
	if au.mutation.RepositoryCleared() && len(au.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Agent.repository"`)
	}
	return nil
}

func (au *AgentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(agent.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Namespace(); ok {
		_spec.SetField(agent.FieldNamespace, field.TypeString, value)
	}
	if value, ok := au.mutation.Version(); ok {
		_spec.SetField(agent.FieldVersion, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(agent.FieldDescription, field.TypeString, value)
	}
	if value, ok := au.mutation.Author(); ok {
		_spec.SetField(agent.FieldAuthor, field.TypeString, value)
	}
	if value, ok := au.mutation.License(); ok {
		_spec.SetField(agent.FieldLicense, field.TypeString, value)
	}
	if value, ok := au.mutation.Homepage(); ok {
		_spec.SetField(agent.FieldHomepage, field.TypeString, value)
	}
	if au.mutation.HomepageCleared() {
		_spec.ClearField(agent.FieldHomepage, field.TypeString)
	}
	if value, ok := au.mutation.Documentation(); ok {
		_spec.SetField(agent.FieldDocumentation, field.TypeString, value)
	}
	if au.mutation.DocumentationCleared() {
		_spec.ClearField(agent.FieldDocumentation, field.TypeString)
	}
	if value, ok := au.mutation.Tags(); ok {
		_spec.SetField(agent.FieldTags, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldTags, value)
		})
	}
	if au.mutation.TagsCleared() {
		_spec.ClearField(agent.FieldTags, field.TypeJSON)
	}
	if value, ok := au.mutation.Categories(); ok {
		_spec.SetField(agent.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldCategories, value)
		})
	}
	if au.mutation.CategoriesCleared() {
		_spec.ClearField(agent.FieldCategories, field.TypeJSON)
	}
	if value, ok := au.mutation.Keywords(); ok {
		_spec.SetField(agent.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldKeywords, value)
		})
	}
	if au.mutation.KeywordsCleared() {
		_spec.ClearField(agent.FieldKeywords, field.TypeJSON)
	}
	if value, ok := au.mutation.Stability(); ok {
		_spec.SetField(agent.FieldStability, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Maturity(); ok {
		_spec.SetField(agent.FieldMaturity, field.TypeEnum, value)
	}
	if value, ok := au.mutation.ForgeVersion(); ok {
		_spec.SetField(agent.FieldForgeVersion, field.TypeString, value)
	}
	if value, ok := au.mutation.Platforms(); ok {
		_spec.SetField(agent.FieldPlatforms, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedPlatforms(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldPlatforms, value)
		})
	}
	if au.mutation.PlatformsCleared() {
		_spec.ClearField(agent.FieldPlatforms, field.TypeJSON)
	}
	if value, ok := au.mutation.Spec(); ok {
		_spec.SetField(agent.FieldSpec, field.TypeString, value)
	}
	if value, ok := au.mutation.SpecHash(); ok {
		_spec.SetField(agent.FieldSpecHash, field.TypeString, value)
	}
	if value, ok := au.mutation.IsInstalled(); ok {
		_spec.SetField(agent.FieldIsInstalled, field.TypeBool, value)
	}
	if value, ok := au.mutation.InstallPath(); ok {
		_spec.SetField(agent.FieldInstallPath, field.TypeString, value)
	}
	if au.mutation.InstallPathCleared() {
		_spec.ClearField(agent.FieldInstallPath, field.TypeString)
	}
	if value, ok := au.mutation.InstalledAt(); ok {
		_spec.SetField(agent.FieldInstalledAt, field.TypeTime, value)
	}
	if au.mutation.InstalledAtCleared() {
		_spec.ClearField(agent.FieldInstalledAt, field.TypeTime)
	}
	if value, ok := au.mutation.CommitHash(); ok {
		_spec.SetField(agent.FieldCommitHash, field.TypeString, value)
	}
	if value, ok := au.mutation.Branch(); ok {
		_spec.SetField(agent.FieldBranch, field.TypeString, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.ConfigPath(); ok {
		_spec.SetField(agent.FieldConfigPath, field.TypeString, value)
	}
	if au.mutation.ConfigPathCleared() {
		_spec.ClearField(agent.FieldConfigPath, field.TypeString)
	}
	if value, ok := au.mutation.AgentConfig(); ok {
		_spec.SetField(agent.FieldAgentConfig, field.TypeJSON, value)
	}
	if au.mutation.AgentConfigCleared() {
		_spec.ClearField(agent.FieldAgentConfig, field.TypeJSON)
	}
	if value, ok := au.mutation.LlmProvider(); ok {
		_spec.SetField(agent.FieldLlmProvider, field.TypeString, value)
	}
	if au.mutation.LlmProviderCleared() {
		_spec.ClearField(agent.FieldLlmProvider, field.TypeString)
	}
	if value, ok := au.mutation.SystemPromptID(); ok {
		_spec.SetField(agent.FieldSystemPromptID, field.TypeString, value)
	}
	if au.mutation.SystemPromptIDCleared() {
		_spec.ClearField(agent.FieldSystemPromptID, field.TypeString)
	}
	if value, ok := au.mutation.ToolDependencies(); ok {
		_spec.SetField(agent.FieldToolDependencies, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedToolDependencies(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldToolDependencies, value)
		})
	}
	if au.mutation.ToolDependenciesCleared() {
		_spec.ClearField(agent.FieldToolDependencies, field.TypeJSON)
	}
	if value, ok := au.mutation.PromptDependencies(); ok {
		_spec.SetField(agent.FieldPromptDependencies, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedPromptDependencies(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldPromptDependencies, value)
		})
	}
	if au.mutation.PromptDependenciesCleared() {
		_spec.ClearField(agent.FieldPromptDependencies, field.TypeJSON)
	}
	if value, ok := au.mutation.AgentDependencies(); ok {
		_spec.SetField(agent.FieldAgentDependencies, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedAgentDependencies(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldAgentDependencies, value)
		})
	}
	if au.mutation.AgentDependenciesCleared() {
		_spec.ClearField(agent.FieldAgentDependencies, field.TypeJSON)
	}
	if value, ok := au.mutation.AgentType(); ok {
		_spec.SetField(agent.FieldAgentType, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Capabilities(); ok {
		_spec.SetField(agent.FieldCapabilities, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedCapabilities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldCapabilities, value)
		})
	}
	if au.mutation.CapabilitiesCleared() {
		_spec.ClearField(agent.FieldCapabilities, field.TypeJSON)
	}
	if value, ok := au.mutation.SupportedLanguages(); ok {
		_spec.SetField(agent.FieldSupportedLanguages, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedSupportedLanguages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldSupportedLanguages, value)
		})
	}
	if au.mutation.SupportedLanguagesCleared() {
		_spec.ClearField(agent.FieldSupportedLanguages, field.TypeJSON)
	}
	if value, ok := au.mutation.SupportsMemory(); ok {
		_spec.SetField(agent.FieldSupportsMemory, field.TypeBool, value)
	}
	if value, ok := au.mutation.SupportsTools(); ok {
		_spec.SetField(agent.FieldSupportsTools, field.TypeBool, value)
	}
	if value, ok := au.mutation.SupportsMultimodal(); ok {
		_spec.SetField(agent.FieldSupportsMultimodal, field.TypeBool, value)
	}
	if value, ok := au.mutation.ModelPreferences(); ok {
		_spec.SetField(agent.FieldModelPreferences, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedModelPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldModelPreferences, value)
		})
	}
	if au.mutation.ModelPreferencesCleared() {
		_spec.ClearField(agent.FieldModelPreferences, field.TypeJSON)
	}
	if value, ok := au.mutation.DefaultTemperature(); ok {
		_spec.SetField(agent.FieldDefaultTemperature, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedDefaultTemperature(); ok {
		_spec.AddField(agent.FieldDefaultTemperature, field.TypeFloat64, value)
	}
	if au.mutation.DefaultTemperatureCleared() {
		_spec.ClearField(agent.FieldDefaultTemperature, field.TypeFloat64)
	}
	if value, ok := au.mutation.DefaultMaxTokens(); ok {
		_spec.SetField(agent.FieldDefaultMaxTokens, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedDefaultMaxTokens(); ok {
		_spec.AddField(agent.FieldDefaultMaxTokens, field.TypeInt, value)
	}
	if au.mutation.DefaultMaxTokensCleared() {
		_spec.ClearField(agent.FieldDefaultMaxTokens, field.TypeInt)
	}
	if value, ok := au.mutation.SessionTimeoutMinutes(); ok {
		_spec.SetField(agent.FieldSessionTimeoutMinutes, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedSessionTimeoutMinutes(); ok {
		_spec.AddField(agent.FieldSessionTimeoutMinutes, field.TypeInt, value)
	}
	if au.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.RepositoryTable,
			Columns: []string{agent.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.RepositoryTable,
			Columns: []string{agent.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DependenciesTable,
			Columns: []string{agent.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentdependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !au.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DependenciesTable,
			Columns: []string{agent.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DependenciesTable,
			Columns: []string{agent.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AgentUpdateOne is the builder for updating a single Agent entity.
type AgentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentMutation
}

// SetName sets the "name" field.
func (auo *AgentUpdateOne) SetName(s string) *AgentUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableName(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetNamespace sets the "namespace" field.
func (auo *AgentUpdateOne) SetNamespace(s string) *AgentUpdateOne {
	auo.mutation.SetNamespace(s)
	return auo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableNamespace(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetNamespace(*s)
	}
	return auo
}

// SetVersion sets the "version" field.
func (auo *AgentUpdateOne) SetVersion(s string) *AgentUpdateOne {
	auo.mutation.SetVersion(s)
	return auo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableVersion(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetVersion(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AgentUpdateOne) SetDescription(s string) *AgentUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDescription(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// SetAuthor sets the "author" field.
func (auo *AgentUpdateOne) SetAuthor(s string) *AgentUpdateOne {
	auo.mutation.SetAuthor(s)
	return auo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableAuthor(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetAuthor(*s)
	}
	return auo
}

// SetLicense sets the "license" field.
func (auo *AgentUpdateOne) SetLicense(s string) *AgentUpdateOne {
	auo.mutation.SetLicense(s)
	return auo
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableLicense(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetLicense(*s)
	}
	return auo
}

// SetHomepage sets the "homepage" field.
func (auo *AgentUpdateOne) SetHomepage(s string) *AgentUpdateOne {
	auo.mutation.SetHomepage(s)
	return auo
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableHomepage(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetHomepage(*s)
	}
	return auo
}

// ClearHomepage clears the value of the "homepage" field.
func (auo *AgentUpdateOne) ClearHomepage() *AgentUpdateOne {
	auo.mutation.ClearHomepage()
	return auo
}

// SetDocumentation sets the "documentation" field.
func (auo *AgentUpdateOne) SetDocumentation(s string) *AgentUpdateOne {
	auo.mutation.SetDocumentation(s)
	return auo
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDocumentation(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetDocumentation(*s)
	}
	return auo
}

// ClearDocumentation clears the value of the "documentation" field.
func (auo *AgentUpdateOne) ClearDocumentation() *AgentUpdateOne {
	auo.mutation.ClearDocumentation()
	return auo
}

// SetTags sets the "tags" field.
func (auo *AgentUpdateOne) SetTags(s []string) *AgentUpdateOne {
	auo.mutation.SetTags(s)
	return auo
}

// AppendTags appends s to the "tags" field.
func (auo *AgentUpdateOne) AppendTags(s []string) *AgentUpdateOne {
	auo.mutation.AppendTags(s)
	return auo
}

// ClearTags clears the value of the "tags" field.
func (auo *AgentUpdateOne) ClearTags() *AgentUpdateOne {
	auo.mutation.ClearTags()
	return auo
}

// SetCategories sets the "categories" field.
func (auo *AgentUpdateOne) SetCategories(s []string) *AgentUpdateOne {
	auo.mutation.SetCategories(s)
	return auo
}

// AppendCategories appends s to the "categories" field.
func (auo *AgentUpdateOne) AppendCategories(s []string) *AgentUpdateOne {
	auo.mutation.AppendCategories(s)
	return auo
}

// ClearCategories clears the value of the "categories" field.
func (auo *AgentUpdateOne) ClearCategories() *AgentUpdateOne {
	auo.mutation.ClearCategories()
	return auo
}

// SetKeywords sets the "keywords" field.
func (auo *AgentUpdateOne) SetKeywords(s []string) *AgentUpdateOne {
	auo.mutation.SetKeywords(s)
	return auo
}

// AppendKeywords appends s to the "keywords" field.
func (auo *AgentUpdateOne) AppendKeywords(s []string) *AgentUpdateOne {
	auo.mutation.AppendKeywords(s)
	return auo
}

// ClearKeywords clears the value of the "keywords" field.
func (auo *AgentUpdateOne) ClearKeywords() *AgentUpdateOne {
	auo.mutation.ClearKeywords()
	return auo
}

// SetStability sets the "stability" field.
func (auo *AgentUpdateOne) SetStability(a agent.Stability) *AgentUpdateOne {
	auo.mutation.SetStability(a)
	return auo
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableStability(a *agent.Stability) *AgentUpdateOne {
	if a != nil {
		auo.SetStability(*a)
	}
	return auo
}

// SetMaturity sets the "maturity" field.
func (auo *AgentUpdateOne) SetMaturity(a agent.Maturity) *AgentUpdateOne {
	auo.mutation.SetMaturity(a)
	return auo
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableMaturity(a *agent.Maturity) *AgentUpdateOne {
	if a != nil {
		auo.SetMaturity(*a)
	}
	return auo
}

// SetForgeVersion sets the "forge_version" field.
func (auo *AgentUpdateOne) SetForgeVersion(s string) *AgentUpdateOne {
	auo.mutation.SetForgeVersion(s)
	return auo
}

// SetNillableForgeVersion sets the "forge_version" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableForgeVersion(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetForgeVersion(*s)
	}
	return auo
}

// SetPlatforms sets the "platforms" field.
func (auo *AgentUpdateOne) SetPlatforms(s []string) *AgentUpdateOne {
	auo.mutation.SetPlatforms(s)
	return auo
}

// AppendPlatforms appends s to the "platforms" field.
func (auo *AgentUpdateOne) AppendPlatforms(s []string) *AgentUpdateOne {
	auo.mutation.AppendPlatforms(s)
	return auo
}

// ClearPlatforms clears the value of the "platforms" field.
func (auo *AgentUpdateOne) ClearPlatforms() *AgentUpdateOne {
	auo.mutation.ClearPlatforms()
	return auo
}

// SetSpec sets the "spec" field.
func (auo *AgentUpdateOne) SetSpec(s string) *AgentUpdateOne {
	auo.mutation.SetSpec(s)
	return auo
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSpec(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetSpec(*s)
	}
	return auo
}

// SetSpecHash sets the "spec_hash" field.
func (auo *AgentUpdateOne) SetSpecHash(s string) *AgentUpdateOne {
	auo.mutation.SetSpecHash(s)
	return auo
}

// SetNillableSpecHash sets the "spec_hash" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSpecHash(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetSpecHash(*s)
	}
	return auo
}

// SetIsInstalled sets the "is_installed" field.
func (auo *AgentUpdateOne) SetIsInstalled(b bool) *AgentUpdateOne {
	auo.mutation.SetIsInstalled(b)
	return auo
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableIsInstalled(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetIsInstalled(*b)
	}
	return auo
}

// SetInstallPath sets the "install_path" field.
func (auo *AgentUpdateOne) SetInstallPath(s string) *AgentUpdateOne {
	auo.mutation.SetInstallPath(s)
	return auo
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableInstallPath(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetInstallPath(*s)
	}
	return auo
}

// ClearInstallPath clears the value of the "install_path" field.
func (auo *AgentUpdateOne) ClearInstallPath() *AgentUpdateOne {
	auo.mutation.ClearInstallPath()
	return auo
}

// SetInstalledAt sets the "installed_at" field.
func (auo *AgentUpdateOne) SetInstalledAt(t time.Time) *AgentUpdateOne {
	auo.mutation.SetInstalledAt(t)
	return auo
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableInstalledAt(t *time.Time) *AgentUpdateOne {
	if t != nil {
		auo.SetInstalledAt(*t)
	}
	return auo
}

// ClearInstalledAt clears the value of the "installed_at" field.
func (auo *AgentUpdateOne) ClearInstalledAt() *AgentUpdateOne {
	auo.mutation.ClearInstalledAt()
	return auo
}

// SetCommitHash sets the "commit_hash" field.
func (auo *AgentUpdateOne) SetCommitHash(s string) *AgentUpdateOne {
	auo.mutation.SetCommitHash(s)
	return auo
}

// SetNillableCommitHash sets the "commit_hash" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableCommitHash(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetCommitHash(*s)
	}
	return auo
}

// SetBranch sets the "branch" field.
func (auo *AgentUpdateOne) SetBranch(s string) *AgentUpdateOne {
	auo.mutation.SetBranch(s)
	return auo
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableBranch(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetBranch(*s)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AgentUpdateOne) SetUpdatedAt(t time.Time) *AgentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetConfigPath sets the "config_path" field.
func (auo *AgentUpdateOne) SetConfigPath(s string) *AgentUpdateOne {
	auo.mutation.SetConfigPath(s)
	return auo
}

// SetNillableConfigPath sets the "config_path" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableConfigPath(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetConfigPath(*s)
	}
	return auo
}

// ClearConfigPath clears the value of the "config_path" field.
func (auo *AgentUpdateOne) ClearConfigPath() *AgentUpdateOne {
	auo.mutation.ClearConfigPath()
	return auo
}

// SetAgentConfig sets the "agent_config" field.
func (auo *AgentUpdateOne) SetAgentConfig(m map[string]interface{}) *AgentUpdateOne {
	auo.mutation.SetAgentConfig(m)
	return auo
}

// ClearAgentConfig clears the value of the "agent_config" field.
func (auo *AgentUpdateOne) ClearAgentConfig() *AgentUpdateOne {
	auo.mutation.ClearAgentConfig()
	return auo
}

// SetLlmProvider sets the "llm_provider" field.
func (auo *AgentUpdateOne) SetLlmProvider(s string) *AgentUpdateOne {
	auo.mutation.SetLlmProvider(s)
	return auo
}

// SetNillableLlmProvider sets the "llm_provider" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableLlmProvider(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetLlmProvider(*s)
	}
	return auo
}

// ClearLlmProvider clears the value of the "llm_provider" field.
func (auo *AgentUpdateOne) ClearLlmProvider() *AgentUpdateOne {
	auo.mutation.ClearLlmProvider()
	return auo
}

// SetSystemPromptID sets the "system_prompt_id" field.
func (auo *AgentUpdateOne) SetSystemPromptID(s string) *AgentUpdateOne {
	auo.mutation.SetSystemPromptID(s)
	return auo
}

// SetNillableSystemPromptID sets the "system_prompt_id" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSystemPromptID(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetSystemPromptID(*s)
	}
	return auo
}

// ClearSystemPromptID clears the value of the "system_prompt_id" field.
func (auo *AgentUpdateOne) ClearSystemPromptID() *AgentUpdateOne {
	auo.mutation.ClearSystemPromptID()
	return auo
}

// SetToolDependencies sets the "tool_dependencies" field.
func (auo *AgentUpdateOne) SetToolDependencies(s []string) *AgentUpdateOne {
	auo.mutation.SetToolDependencies(s)
	return auo
}

// AppendToolDependencies appends s to the "tool_dependencies" field.
func (auo *AgentUpdateOne) AppendToolDependencies(s []string) *AgentUpdateOne {
	auo.mutation.AppendToolDependencies(s)
	return auo
}

// ClearToolDependencies clears the value of the "tool_dependencies" field.
func (auo *AgentUpdateOne) ClearToolDependencies() *AgentUpdateOne {
	auo.mutation.ClearToolDependencies()
	return auo
}

// SetPromptDependencies sets the "prompt_dependencies" field.
func (auo *AgentUpdateOne) SetPromptDependencies(s []string) *AgentUpdateOne {
	auo.mutation.SetPromptDependencies(s)
	return auo
}

// AppendPromptDependencies appends s to the "prompt_dependencies" field.
func (auo *AgentUpdateOne) AppendPromptDependencies(s []string) *AgentUpdateOne {
	auo.mutation.AppendPromptDependencies(s)
	return auo
}

// ClearPromptDependencies clears the value of the "prompt_dependencies" field.
func (auo *AgentUpdateOne) ClearPromptDependencies() *AgentUpdateOne {
	auo.mutation.ClearPromptDependencies()
	return auo
}

// SetAgentDependencies sets the "agent_dependencies" field.
func (auo *AgentUpdateOne) SetAgentDependencies(s []string) *AgentUpdateOne {
	auo.mutation.SetAgentDependencies(s)
	return auo
}

// AppendAgentDependencies appends s to the "agent_dependencies" field.
func (auo *AgentUpdateOne) AppendAgentDependencies(s []string) *AgentUpdateOne {
	auo.mutation.AppendAgentDependencies(s)
	return auo
}

// ClearAgentDependencies clears the value of the "agent_dependencies" field.
func (auo *AgentUpdateOne) ClearAgentDependencies() *AgentUpdateOne {
	auo.mutation.ClearAgentDependencies()
	return auo
}

// SetAgentType sets the "agent_type" field.
func (auo *AgentUpdateOne) SetAgentType(at agent.AgentType) *AgentUpdateOne {
	auo.mutation.SetAgentType(at)
	return auo
}

// SetNillableAgentType sets the "agent_type" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableAgentType(at *agent.AgentType) *AgentUpdateOne {
	if at != nil {
		auo.SetAgentType(*at)
	}
	return auo
}

// SetCapabilities sets the "capabilities" field.
func (auo *AgentUpdateOne) SetCapabilities(s []string) *AgentUpdateOne {
	auo.mutation.SetCapabilities(s)
	return auo
}

// AppendCapabilities appends s to the "capabilities" field.
func (auo *AgentUpdateOne) AppendCapabilities(s []string) *AgentUpdateOne {
	auo.mutation.AppendCapabilities(s)
	return auo
}

// ClearCapabilities clears the value of the "capabilities" field.
func (auo *AgentUpdateOne) ClearCapabilities() *AgentUpdateOne {
	auo.mutation.ClearCapabilities()
	return auo
}

// SetSupportedLanguages sets the "supported_languages" field.
func (auo *AgentUpdateOne) SetSupportedLanguages(s []string) *AgentUpdateOne {
	auo.mutation.SetSupportedLanguages(s)
	return auo
}

// AppendSupportedLanguages appends s to the "supported_languages" field.
func (auo *AgentUpdateOne) AppendSupportedLanguages(s []string) *AgentUpdateOne {
	auo.mutation.AppendSupportedLanguages(s)
	return auo
}

// ClearSupportedLanguages clears the value of the "supported_languages" field.
func (auo *AgentUpdateOne) ClearSupportedLanguages() *AgentUpdateOne {
	auo.mutation.ClearSupportedLanguages()
	return auo
}

// SetSupportsMemory sets the "supports_memory" field.
func (auo *AgentUpdateOne) SetSupportsMemory(b bool) *AgentUpdateOne {
	auo.mutation.SetSupportsMemory(b)
	return auo
}

// SetNillableSupportsMemory sets the "supports_memory" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSupportsMemory(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetSupportsMemory(*b)
	}
	return auo
}

// SetSupportsTools sets the "supports_tools" field.
func (auo *AgentUpdateOne) SetSupportsTools(b bool) *AgentUpdateOne {
	auo.mutation.SetSupportsTools(b)
	return auo
}

// SetNillableSupportsTools sets the "supports_tools" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSupportsTools(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetSupportsTools(*b)
	}
	return auo
}

// SetSupportsMultimodal sets the "supports_multimodal" field.
func (auo *AgentUpdateOne) SetSupportsMultimodal(b bool) *AgentUpdateOne {
	auo.mutation.SetSupportsMultimodal(b)
	return auo
}

// SetNillableSupportsMultimodal sets the "supports_multimodal" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSupportsMultimodal(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetSupportsMultimodal(*b)
	}
	return auo
}

// SetModelPreferences sets the "model_preferences" field.
func (auo *AgentUpdateOne) SetModelPreferences(s []string) *AgentUpdateOne {
	auo.mutation.SetModelPreferences(s)
	return auo
}

// AppendModelPreferences appends s to the "model_preferences" field.
func (auo *AgentUpdateOne) AppendModelPreferences(s []string) *AgentUpdateOne {
	auo.mutation.AppendModelPreferences(s)
	return auo
}

// ClearModelPreferences clears the value of the "model_preferences" field.
func (auo *AgentUpdateOne) ClearModelPreferences() *AgentUpdateOne {
	auo.mutation.ClearModelPreferences()
	return auo
}

// SetDefaultTemperature sets the "default_temperature" field.
func (auo *AgentUpdateOne) SetDefaultTemperature(f float64) *AgentUpdateOne {
	auo.mutation.ResetDefaultTemperature()
	auo.mutation.SetDefaultTemperature(f)
	return auo
}

// SetNillableDefaultTemperature sets the "default_temperature" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDefaultTemperature(f *float64) *AgentUpdateOne {
	if f != nil {
		auo.SetDefaultTemperature(*f)
	}
	return auo
}

// AddDefaultTemperature adds f to the "default_temperature" field.
func (auo *AgentUpdateOne) AddDefaultTemperature(f float64) *AgentUpdateOne {
	auo.mutation.AddDefaultTemperature(f)
	return auo
}

// ClearDefaultTemperature clears the value of the "default_temperature" field.
func (auo *AgentUpdateOne) ClearDefaultTemperature() *AgentUpdateOne {
	auo.mutation.ClearDefaultTemperature()
	return auo
}

// SetDefaultMaxTokens sets the "default_max_tokens" field.
func (auo *AgentUpdateOne) SetDefaultMaxTokens(i int) *AgentUpdateOne {
	auo.mutation.ResetDefaultMaxTokens()
	auo.mutation.SetDefaultMaxTokens(i)
	return auo
}

// SetNillableDefaultMaxTokens sets the "default_max_tokens" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDefaultMaxTokens(i *int) *AgentUpdateOne {
	if i != nil {
		auo.SetDefaultMaxTokens(*i)
	}
	return auo
}

// AddDefaultMaxTokens adds i to the "default_max_tokens" field.
func (auo *AgentUpdateOne) AddDefaultMaxTokens(i int) *AgentUpdateOne {
	auo.mutation.AddDefaultMaxTokens(i)
	return auo
}

// ClearDefaultMaxTokens clears the value of the "default_max_tokens" field.
func (auo *AgentUpdateOne) ClearDefaultMaxTokens() *AgentUpdateOne {
	auo.mutation.ClearDefaultMaxTokens()
	return auo
}

// SetSessionTimeoutMinutes sets the "session_timeout_minutes" field.
func (auo *AgentUpdateOne) SetSessionTimeoutMinutes(i int) *AgentUpdateOne {
	auo.mutation.ResetSessionTimeoutMinutes()
	auo.mutation.SetSessionTimeoutMinutes(i)
	return auo
}

// SetNillableSessionTimeoutMinutes sets the "session_timeout_minutes" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSessionTimeoutMinutes(i *int) *AgentUpdateOne {
	if i != nil {
		auo.SetSessionTimeoutMinutes(*i)
	}
	return auo
}

// AddSessionTimeoutMinutes adds i to the "session_timeout_minutes" field.
func (auo *AgentUpdateOne) AddSessionTimeoutMinutes(i int) *AgentUpdateOne {
	auo.mutation.AddSessionTimeoutMinutes(i)
	return auo
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (auo *AgentUpdateOne) SetRepositoryID(id string) *AgentUpdateOne {
	auo.mutation.SetRepositoryID(id)
	return auo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (auo *AgentUpdateOne) SetRepository(r *Repository) *AgentUpdateOne {
	return auo.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the AgentDependency entity by IDs.
func (auo *AgentUpdateOne) AddDependencyIDs(ids ...string) *AgentUpdateOne {
	auo.mutation.AddDependencyIDs(ids...)
	return auo
}

// AddDependencies adds the "dependencies" edges to the AgentDependency entity.
func (auo *AgentUpdateOne) AddDependencies(a ...*AgentDependency) *AgentUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddDependencyIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (auo *AgentUpdateOne) Mutation() *AgentMutation {
	return auo.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (auo *AgentUpdateOne) ClearRepository() *AgentUpdateOne {
	auo.mutation.ClearRepository()
	return auo
}

// ClearDependencies clears all "dependencies" edges to the AgentDependency entity.
func (auo *AgentUpdateOne) ClearDependencies() *AgentUpdateOne {
	auo.mutation.ClearDependencies()
	return auo
}

// RemoveDependencyIDs removes the "dependencies" edge to AgentDependency entities by IDs.
func (auo *AgentUpdateOne) RemoveDependencyIDs(ids ...string) *AgentUpdateOne {
	auo.mutation.RemoveDependencyIDs(ids...)
	return auo
}

// RemoveDependencies removes "dependencies" edges to AgentDependency entities.
func (auo *AgentUpdateOne) RemoveDependencies(a ...*AgentDependency) *AgentUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveDependencyIDs(ids...)
}

// Where appends a list predicates to the AgentUpdate builder.
func (auo *AgentUpdateOne) Where(ps ...predicate.Agent) *AgentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AgentUpdateOne) Select(field string, fields ...string) *AgentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Agent entity.
func (auo *AgentUpdateOne) Save(ctx context.Context) (*Agent, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AgentUpdateOne) SaveX(ctx context.Context) *Agent {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AgentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AgentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AgentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := agent.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AgentUpdateOne) check() error {
	if v, ok := auo.mutation.Stability(); ok {
		if err := agent.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Agent.stability": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Maturity(); ok {
		if err := agent.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Agent.maturity": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AgentType(); ok {
		if err := agent.AgentTypeValidator(v); err != nil {
			return &ValidationError{Name: "agent_type", err: fmt.Errorf(`ent: validator failed for field "Agent.agent_type": %w`, err)}
		}
	}
	if auo.mutation.RepositoryCleared() && len(auo.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Agent.repository"`)
	}
	return nil
}

func (auo *AgentUpdateOne) sqlSave(ctx context.Context) (_node *Agent, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for _, f := range fields {
			if !agent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(agent.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Namespace(); ok {
		_spec.SetField(agent.FieldNamespace, field.TypeString, value)
	}
	if value, ok := auo.mutation.Version(); ok {
		_spec.SetField(agent.FieldVersion, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(agent.FieldDescription, field.TypeString, value)
	}
	if value, ok := auo.mutation.Author(); ok {
		_spec.SetField(agent.FieldAuthor, field.TypeString, value)
	}
	if value, ok := auo.mutation.License(); ok {
		_spec.SetField(agent.FieldLicense, field.TypeString, value)
	}
	if value, ok := auo.mutation.Homepage(); ok {
		_spec.SetField(agent.FieldHomepage, field.TypeString, value)
	}
	if auo.mutation.HomepageCleared() {
		_spec.ClearField(agent.FieldHomepage, field.TypeString)
	}
	if value, ok := auo.mutation.Documentation(); ok {
		_spec.SetField(agent.FieldDocumentation, field.TypeString, value)
	}
	if auo.mutation.DocumentationCleared() {
		_spec.ClearField(agent.FieldDocumentation, field.TypeString)
	}
	if value, ok := auo.mutation.Tags(); ok {
		_spec.SetField(agent.FieldTags, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldTags, value)
		})
	}
	if auo.mutation.TagsCleared() {
		_spec.ClearField(agent.FieldTags, field.TypeJSON)
	}
	if value, ok := auo.mutation.Categories(); ok {
		_spec.SetField(agent.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldCategories, value)
		})
	}
	if auo.mutation.CategoriesCleared() {
		_spec.ClearField(agent.FieldCategories, field.TypeJSON)
	}
	if value, ok := auo.mutation.Keywords(); ok {
		_spec.SetField(agent.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldKeywords, value)
		})
	}
	if auo.mutation.KeywordsCleared() {
		_spec.ClearField(agent.FieldKeywords, field.TypeJSON)
	}
	if value, ok := auo.mutation.Stability(); ok {
		_spec.SetField(agent.FieldStability, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Maturity(); ok {
		_spec.SetField(agent.FieldMaturity, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.ForgeVersion(); ok {
		_spec.SetField(agent.FieldForgeVersion, field.TypeString, value)
	}
	if value, ok := auo.mutation.Platforms(); ok {
		_spec.SetField(agent.FieldPlatforms, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedPlatforms(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldPlatforms, value)
		})
	}
	if auo.mutation.PlatformsCleared() {
		_spec.ClearField(agent.FieldPlatforms, field.TypeJSON)
	}
	if value, ok := auo.mutation.Spec(); ok {
		_spec.SetField(agent.FieldSpec, field.TypeString, value)
	}
	if value, ok := auo.mutation.SpecHash(); ok {
		_spec.SetField(agent.FieldSpecHash, field.TypeString, value)
	}
	if value, ok := auo.mutation.IsInstalled(); ok {
		_spec.SetField(agent.FieldIsInstalled, field.TypeBool, value)
	}
	if value, ok := auo.mutation.InstallPath(); ok {
		_spec.SetField(agent.FieldInstallPath, field.TypeString, value)
	}
	if auo.mutation.InstallPathCleared() {
		_spec.ClearField(agent.FieldInstallPath, field.TypeString)
	}
	if value, ok := auo.mutation.InstalledAt(); ok {
		_spec.SetField(agent.FieldInstalledAt, field.TypeTime, value)
	}
	if auo.mutation.InstalledAtCleared() {
		_spec.ClearField(agent.FieldInstalledAt, field.TypeTime)
	}
	if value, ok := auo.mutation.CommitHash(); ok {
		_spec.SetField(agent.FieldCommitHash, field.TypeString, value)
	}
	if value, ok := auo.mutation.Branch(); ok {
		_spec.SetField(agent.FieldBranch, field.TypeString, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.ConfigPath(); ok {
		_spec.SetField(agent.FieldConfigPath, field.TypeString, value)
	}
	if auo.mutation.ConfigPathCleared() {
		_spec.ClearField(agent.FieldConfigPath, field.TypeString)
	}
	if value, ok := auo.mutation.AgentConfig(); ok {
		_spec.SetField(agent.FieldAgentConfig, field.TypeJSON, value)
	}
	if auo.mutation.AgentConfigCleared() {
		_spec.ClearField(agent.FieldAgentConfig, field.TypeJSON)
	}
	if value, ok := auo.mutation.LlmProvider(); ok {
		_spec.SetField(agent.FieldLlmProvider, field.TypeString, value)
	}
	if auo.mutation.LlmProviderCleared() {
		_spec.ClearField(agent.FieldLlmProvider, field.TypeString)
	}
	if value, ok := auo.mutation.SystemPromptID(); ok {
		_spec.SetField(agent.FieldSystemPromptID, field.TypeString, value)
	}
	if auo.mutation.SystemPromptIDCleared() {
		_spec.ClearField(agent.FieldSystemPromptID, field.TypeString)
	}
	if value, ok := auo.mutation.ToolDependencies(); ok {
		_spec.SetField(agent.FieldToolDependencies, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedToolDependencies(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldToolDependencies, value)
		})
	}
	if auo.mutation.ToolDependenciesCleared() {
		_spec.ClearField(agent.FieldToolDependencies, field.TypeJSON)
	}
	if value, ok := auo.mutation.PromptDependencies(); ok {
		_spec.SetField(agent.FieldPromptDependencies, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedPromptDependencies(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldPromptDependencies, value)
		})
	}
	if auo.mutation.PromptDependenciesCleared() {
		_spec.ClearField(agent.FieldPromptDependencies, field.TypeJSON)
	}
	if value, ok := auo.mutation.AgentDependencies(); ok {
		_spec.SetField(agent.FieldAgentDependencies, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedAgentDependencies(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldAgentDependencies, value)
		})
	}
	if auo.mutation.AgentDependenciesCleared() {
		_spec.ClearField(agent.FieldAgentDependencies, field.TypeJSON)
	}
	if value, ok := auo.mutation.AgentType(); ok {
		_spec.SetField(agent.FieldAgentType, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Capabilities(); ok {
		_spec.SetField(agent.FieldCapabilities, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedCapabilities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldCapabilities, value)
		})
	}
	if auo.mutation.CapabilitiesCleared() {
		_spec.ClearField(agent.FieldCapabilities, field.TypeJSON)
	}
	if value, ok := auo.mutation.SupportedLanguages(); ok {
		_spec.SetField(agent.FieldSupportedLanguages, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedSupportedLanguages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldSupportedLanguages, value)
		})
	}
	if auo.mutation.SupportedLanguagesCleared() {
		_spec.ClearField(agent.FieldSupportedLanguages, field.TypeJSON)
	}
	if value, ok := auo.mutation.SupportsMemory(); ok {
		_spec.SetField(agent.FieldSupportsMemory, field.TypeBool, value)
	}
	if value, ok := auo.mutation.SupportsTools(); ok {
		_spec.SetField(agent.FieldSupportsTools, field.TypeBool, value)
	}
	if value, ok := auo.mutation.SupportsMultimodal(); ok {
		_spec.SetField(agent.FieldSupportsMultimodal, field.TypeBool, value)
	}
	if value, ok := auo.mutation.ModelPreferences(); ok {
		_spec.SetField(agent.FieldModelPreferences, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedModelPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, agent.FieldModelPreferences, value)
		})
	}
	if auo.mutation.ModelPreferencesCleared() {
		_spec.ClearField(agent.FieldModelPreferences, field.TypeJSON)
	}
	if value, ok := auo.mutation.DefaultTemperature(); ok {
		_spec.SetField(agent.FieldDefaultTemperature, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedDefaultTemperature(); ok {
		_spec.AddField(agent.FieldDefaultTemperature, field.TypeFloat64, value)
	}
	if auo.mutation.DefaultTemperatureCleared() {
		_spec.ClearField(agent.FieldDefaultTemperature, field.TypeFloat64)
	}
	if value, ok := auo.mutation.DefaultMaxTokens(); ok {
		_spec.SetField(agent.FieldDefaultMaxTokens, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedDefaultMaxTokens(); ok {
		_spec.AddField(agent.FieldDefaultMaxTokens, field.TypeInt, value)
	}
	if auo.mutation.DefaultMaxTokensCleared() {
		_spec.ClearField(agent.FieldDefaultMaxTokens, field.TypeInt)
	}
	if value, ok := auo.mutation.SessionTimeoutMinutes(); ok {
		_spec.SetField(agent.FieldSessionTimeoutMinutes, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedSessionTimeoutMinutes(); ok {
		_spec.AddField(agent.FieldSessionTimeoutMinutes, field.TypeInt, value)
	}
	if auo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.RepositoryTable,
			Columns: []string{agent.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.RepositoryTable,
			Columns: []string{agent.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DependenciesTable,
			Columns: []string{agent.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentdependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !auo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DependenciesTable,
			Columns: []string{agent.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DependenciesTable,
			Columns: []string{agent.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Agent{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
