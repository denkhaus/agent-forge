// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
)

// Repository is the model entity for the Repository schema.
type Repository struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Type holds the value of the "type" field.
	Type repository.Type `json:"type,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// DefaultBranch holds the value of the "default_branch" field.
	DefaultBranch string `json:"default_branch,omitempty"`
	// LastSync holds the value of the "last_sync" field.
	LastSync *time.Time `json:"last_sync,omitempty"`
	// SyncStatus holds the value of the "sync_status" field.
	SyncStatus repository.SyncStatus `json:"sync_status,omitempty"`
	// Manifest holds the value of the "manifest" field.
	Manifest *string `json:"manifest,omitempty"`
	// ManifestHash holds the value of the "manifest_hash" field.
	ManifestHash *string `json:"manifest_hash,omitempty"`
	// HasWriteAccess holds the value of the "has_write_access" field.
	HasWriteAccess bool `json:"has_write_access,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken *string `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepositoryQuery when eager-loading is set.
	Edges        RepositoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RepositoryEdges holds the relations/edges for other nodes in the graph.
type RepositoryEdges struct {
	// Components holds the value of the components edge.
	Components []*Component `json:"components,omitempty"`
	// Tools holds the value of the tools edge.
	Tools []*Tool `json:"tools,omitempty"`
	// Prompts holds the value of the prompts edge.
	Prompts []*Prompt `json:"prompts,omitempty"`
	// Agents holds the value of the agents edge.
	Agents []*Agent `json:"agents,omitempty"`
	// Forks holds the value of the forks edge.
	Forks []*Fork `json:"forks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ComponentsOrErr returns the Components value or an error if the edge
// was not loaded in eager-loading.
func (e RepositoryEdges) ComponentsOrErr() ([]*Component, error) {
	if e.loadedTypes[0] {
		return e.Components, nil
	}
	return nil, &NotLoadedError{edge: "components"}
}

// ToolsOrErr returns the Tools value or an error if the edge
// was not loaded in eager-loading.
func (e RepositoryEdges) ToolsOrErr() ([]*Tool, error) {
	if e.loadedTypes[1] {
		return e.Tools, nil
	}
	return nil, &NotLoadedError{edge: "tools"}
}

// PromptsOrErr returns the Prompts value or an error if the edge
// was not loaded in eager-loading.
func (e RepositoryEdges) PromptsOrErr() ([]*Prompt, error) {
	if e.loadedTypes[2] {
		return e.Prompts, nil
	}
	return nil, &NotLoadedError{edge: "prompts"}
}

// AgentsOrErr returns the Agents value or an error if the edge
// was not loaded in eager-loading.
func (e RepositoryEdges) AgentsOrErr() ([]*Agent, error) {
	if e.loadedTypes[3] {
		return e.Agents, nil
	}
	return nil, &NotLoadedError{edge: "agents"}
}

// ForksOrErr returns the Forks value or an error if the edge
// was not loaded in eager-loading.
func (e RepositoryEdges) ForksOrErr() ([]*Fork, error) {
	if e.loadedTypes[4] {
		return e.Forks, nil
	}
	return nil, &NotLoadedError{edge: "forks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Repository) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case repository.FieldIsActive, repository.FieldHasWriteAccess:
			values[i] = new(sql.NullBool)
		case repository.FieldID, repository.FieldName, repository.FieldURL, repository.FieldType, repository.FieldDefaultBranch, repository.FieldSyncStatus, repository.FieldManifest, repository.FieldManifestHash, repository.FieldAccessToken:
			values[i] = new(sql.NullString)
		case repository.FieldLastSync, repository.FieldCreatedAt, repository.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Repository fields.
func (r *Repository) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repository.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case repository.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case repository.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				r.URL = value.String
			}
		case repository.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = repository.Type(value.String)
			}
		case repository.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				r.IsActive = value.Bool
			}
		case repository.FieldDefaultBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_branch", values[i])
			} else if value.Valid {
				r.DefaultBranch = value.String
			}
		case repository.FieldLastSync:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_sync", values[i])
			} else if value.Valid {
				r.LastSync = new(time.Time)
				*r.LastSync = value.Time
			}
		case repository.FieldSyncStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sync_status", values[i])
			} else if value.Valid {
				r.SyncStatus = repository.SyncStatus(value.String)
			}
		case repository.FieldManifest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manifest", values[i])
			} else if value.Valid {
				r.Manifest = new(string)
				*r.Manifest = value.String
			}
		case repository.FieldManifestHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manifest_hash", values[i])
			} else if value.Valid {
				r.ManifestHash = new(string)
				*r.ManifestHash = value.String
			}
		case repository.FieldHasWriteAccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_write_access", values[i])
			} else if value.Valid {
				r.HasWriteAccess = value.Bool
			}
		case repository.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				r.AccessToken = new(string)
				*r.AccessToken = value.String
			}
		case repository.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case repository.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Repository.
// This includes values selected through modifiers, order, etc.
func (r *Repository) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryComponents queries the "components" edge of the Repository entity.
func (r *Repository) QueryComponents() *ComponentQuery {
	return NewRepositoryClient(r.config).QueryComponents(r)
}

// QueryTools queries the "tools" edge of the Repository entity.
func (r *Repository) QueryTools() *ToolQuery {
	return NewRepositoryClient(r.config).QueryTools(r)
}

// QueryPrompts queries the "prompts" edge of the Repository entity.
func (r *Repository) QueryPrompts() *PromptQuery {
	return NewRepositoryClient(r.config).QueryPrompts(r)
}

// QueryAgents queries the "agents" edge of the Repository entity.
func (r *Repository) QueryAgents() *AgentQuery {
	return NewRepositoryClient(r.config).QueryAgents(r)
}

// QueryForks queries the "forks" edge of the Repository entity.
func (r *Repository) QueryForks() *ForkQuery {
	return NewRepositoryClient(r.config).QueryForks(r)
}

// Update returns a builder for updating this Repository.
// Note that you need to call Repository.Unwrap() before calling this method if this Repository
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Repository) Update() *RepositoryUpdateOne {
	return NewRepositoryClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Repository entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Repository) Unwrap() *Repository {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Repository is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Repository) String() string {
	var builder strings.Builder
	builder.WriteString("Repository(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(r.URL)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", r.IsActive))
	builder.WriteString(", ")
	builder.WriteString("default_branch=")
	builder.WriteString(r.DefaultBranch)
	builder.WriteString(", ")
	if v := r.LastSync; v != nil {
		builder.WriteString("last_sync=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("sync_status=")
	builder.WriteString(fmt.Sprintf("%v", r.SyncStatus))
	builder.WriteString(", ")
	if v := r.Manifest; v != nil {
		builder.WriteString("manifest=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := r.ManifestHash; v != nil {
		builder.WriteString("manifest_hash=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("has_write_access=")
	builder.WriteString(fmt.Sprintf("%v", r.HasWriteAccess))
	builder.WriteString(", ")
	builder.WriteString("access_token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Repositories is a parsable slice of Repository.
type Repositories []*Repository
