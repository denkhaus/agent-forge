// Code generated by ent, DO NOT EDIT.

package agent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldName, v))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldNamespace, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldVersion, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldDescription, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldAuthor, v))
}

// License applies equality check predicate on the "license" field. It's identical to LicenseEQ.
func License(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldLicense, v))
}

// Homepage applies equality check predicate on the "homepage" field. It's identical to HomepageEQ.
func Homepage(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldHomepage, v))
}

// Documentation applies equality check predicate on the "documentation" field. It's identical to DocumentationEQ.
func Documentation(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldDocumentation, v))
}

// ForgeVersion applies equality check predicate on the "forge_version" field. It's identical to ForgeVersionEQ.
func ForgeVersion(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldForgeVersion, v))
}

// Spec applies equality check predicate on the "spec" field. It's identical to SpecEQ.
func Spec(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSpec, v))
}

// SpecHash applies equality check predicate on the "spec_hash" field. It's identical to SpecHashEQ.
func SpecHash(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSpecHash, v))
}

// IsInstalled applies equality check predicate on the "is_installed" field. It's identical to IsInstalledEQ.
func IsInstalled(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldIsInstalled, v))
}

// InstallPath applies equality check predicate on the "install_path" field. It's identical to InstallPathEQ.
func InstallPath(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldInstallPath, v))
}

// InstalledAt applies equality check predicate on the "installed_at" field. It's identical to InstalledAtEQ.
func InstalledAt(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldInstalledAt, v))
}

// CommitHash applies equality check predicate on the "commit_hash" field. It's identical to CommitHashEQ.
func CommitHash(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldCommitHash, v))
}

// Branch applies equality check predicate on the "branch" field. It's identical to BranchEQ.
func Branch(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldBranch, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdatedAt, v))
}

// ConfigPath applies equality check predicate on the "config_path" field. It's identical to ConfigPathEQ.
func ConfigPath(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldConfigPath, v))
}

// LlmProvider applies equality check predicate on the "llm_provider" field. It's identical to LlmProviderEQ.
func LlmProvider(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldLlmProvider, v))
}

// SystemPromptID applies equality check predicate on the "system_prompt_id" field. It's identical to SystemPromptIDEQ.
func SystemPromptID(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSystemPromptID, v))
}

// SupportsMemory applies equality check predicate on the "supports_memory" field. It's identical to SupportsMemoryEQ.
func SupportsMemory(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSupportsMemory, v))
}

// SupportsTools applies equality check predicate on the "supports_tools" field. It's identical to SupportsToolsEQ.
func SupportsTools(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSupportsTools, v))
}

// SupportsMultimodal applies equality check predicate on the "supports_multimodal" field. It's identical to SupportsMultimodalEQ.
func SupportsMultimodal(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSupportsMultimodal, v))
}

// DefaultTemperature applies equality check predicate on the "default_temperature" field. It's identical to DefaultTemperatureEQ.
func DefaultTemperature(v float64) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldDefaultTemperature, v))
}

// DefaultMaxTokens applies equality check predicate on the "default_max_tokens" field. It's identical to DefaultMaxTokensEQ.
func DefaultMaxTokens(v int) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldDefaultMaxTokens, v))
}

// SessionTimeoutMinutes applies equality check predicate on the "session_timeout_minutes" field. It's identical to SessionTimeoutMinutesEQ.
func SessionTimeoutMinutes(v int) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSessionTimeoutMinutes, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldName, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldNamespace, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldVersion, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldDescription, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldAuthor, v))
}

// LicenseEQ applies the EQ predicate on the "license" field.
func LicenseEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldLicense, v))
}

// LicenseNEQ applies the NEQ predicate on the "license" field.
func LicenseNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldLicense, v))
}

// LicenseIn applies the In predicate on the "license" field.
func LicenseIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldLicense, vs...))
}

// LicenseNotIn applies the NotIn predicate on the "license" field.
func LicenseNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldLicense, vs...))
}

// LicenseGT applies the GT predicate on the "license" field.
func LicenseGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldLicense, v))
}

// LicenseGTE applies the GTE predicate on the "license" field.
func LicenseGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldLicense, v))
}

// LicenseLT applies the LT predicate on the "license" field.
func LicenseLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldLicense, v))
}

// LicenseLTE applies the LTE predicate on the "license" field.
func LicenseLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldLicense, v))
}

// LicenseContains applies the Contains predicate on the "license" field.
func LicenseContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldLicense, v))
}

// LicenseHasPrefix applies the HasPrefix predicate on the "license" field.
func LicenseHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldLicense, v))
}

// LicenseHasSuffix applies the HasSuffix predicate on the "license" field.
func LicenseHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldLicense, v))
}

// LicenseEqualFold applies the EqualFold predicate on the "license" field.
func LicenseEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldLicense, v))
}

// LicenseContainsFold applies the ContainsFold predicate on the "license" field.
func LicenseContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldLicense, v))
}

// HomepageEQ applies the EQ predicate on the "homepage" field.
func HomepageEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldHomepage, v))
}

// HomepageNEQ applies the NEQ predicate on the "homepage" field.
func HomepageNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldHomepage, v))
}

// HomepageIn applies the In predicate on the "homepage" field.
func HomepageIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldHomepage, vs...))
}

// HomepageNotIn applies the NotIn predicate on the "homepage" field.
func HomepageNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldHomepage, vs...))
}

// HomepageGT applies the GT predicate on the "homepage" field.
func HomepageGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldHomepage, v))
}

// HomepageGTE applies the GTE predicate on the "homepage" field.
func HomepageGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldHomepage, v))
}

// HomepageLT applies the LT predicate on the "homepage" field.
func HomepageLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldHomepage, v))
}

// HomepageLTE applies the LTE predicate on the "homepage" field.
func HomepageLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldHomepage, v))
}

// HomepageContains applies the Contains predicate on the "homepage" field.
func HomepageContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldHomepage, v))
}

// HomepageHasPrefix applies the HasPrefix predicate on the "homepage" field.
func HomepageHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldHomepage, v))
}

// HomepageHasSuffix applies the HasSuffix predicate on the "homepage" field.
func HomepageHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldHomepage, v))
}

// HomepageIsNil applies the IsNil predicate on the "homepage" field.
func HomepageIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldHomepage))
}

// HomepageNotNil applies the NotNil predicate on the "homepage" field.
func HomepageNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldHomepage))
}

// HomepageEqualFold applies the EqualFold predicate on the "homepage" field.
func HomepageEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldHomepage, v))
}

// HomepageContainsFold applies the ContainsFold predicate on the "homepage" field.
func HomepageContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldHomepage, v))
}

// DocumentationEQ applies the EQ predicate on the "documentation" field.
func DocumentationEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldDocumentation, v))
}

// DocumentationNEQ applies the NEQ predicate on the "documentation" field.
func DocumentationNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldDocumentation, v))
}

// DocumentationIn applies the In predicate on the "documentation" field.
func DocumentationIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldDocumentation, vs...))
}

// DocumentationNotIn applies the NotIn predicate on the "documentation" field.
func DocumentationNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldDocumentation, vs...))
}

// DocumentationGT applies the GT predicate on the "documentation" field.
func DocumentationGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldDocumentation, v))
}

// DocumentationGTE applies the GTE predicate on the "documentation" field.
func DocumentationGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldDocumentation, v))
}

// DocumentationLT applies the LT predicate on the "documentation" field.
func DocumentationLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldDocumentation, v))
}

// DocumentationLTE applies the LTE predicate on the "documentation" field.
func DocumentationLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldDocumentation, v))
}

// DocumentationContains applies the Contains predicate on the "documentation" field.
func DocumentationContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldDocumentation, v))
}

// DocumentationHasPrefix applies the HasPrefix predicate on the "documentation" field.
func DocumentationHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldDocumentation, v))
}

// DocumentationHasSuffix applies the HasSuffix predicate on the "documentation" field.
func DocumentationHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldDocumentation, v))
}

// DocumentationIsNil applies the IsNil predicate on the "documentation" field.
func DocumentationIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldDocumentation))
}

// DocumentationNotNil applies the NotNil predicate on the "documentation" field.
func DocumentationNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldDocumentation))
}

// DocumentationEqualFold applies the EqualFold predicate on the "documentation" field.
func DocumentationEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldDocumentation, v))
}

// DocumentationContainsFold applies the ContainsFold predicate on the "documentation" field.
func DocumentationContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldDocumentation, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldTags))
}

// CategoriesIsNil applies the IsNil predicate on the "categories" field.
func CategoriesIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldCategories))
}

// CategoriesNotNil applies the NotNil predicate on the "categories" field.
func CategoriesNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldCategories))
}

// KeywordsIsNil applies the IsNil predicate on the "keywords" field.
func KeywordsIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldKeywords))
}

// KeywordsNotNil applies the NotNil predicate on the "keywords" field.
func KeywordsNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldKeywords))
}

// StabilityEQ applies the EQ predicate on the "stability" field.
func StabilityEQ(v Stability) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldStability, v))
}

// StabilityNEQ applies the NEQ predicate on the "stability" field.
func StabilityNEQ(v Stability) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldStability, v))
}

// StabilityIn applies the In predicate on the "stability" field.
func StabilityIn(vs ...Stability) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldStability, vs...))
}

// StabilityNotIn applies the NotIn predicate on the "stability" field.
func StabilityNotIn(vs ...Stability) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldStability, vs...))
}

// MaturityEQ applies the EQ predicate on the "maturity" field.
func MaturityEQ(v Maturity) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldMaturity, v))
}

// MaturityNEQ applies the NEQ predicate on the "maturity" field.
func MaturityNEQ(v Maturity) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldMaturity, v))
}

// MaturityIn applies the In predicate on the "maturity" field.
func MaturityIn(vs ...Maturity) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldMaturity, vs...))
}

// MaturityNotIn applies the NotIn predicate on the "maturity" field.
func MaturityNotIn(vs ...Maturity) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldMaturity, vs...))
}

// ForgeVersionEQ applies the EQ predicate on the "forge_version" field.
func ForgeVersionEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldForgeVersion, v))
}

// ForgeVersionNEQ applies the NEQ predicate on the "forge_version" field.
func ForgeVersionNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldForgeVersion, v))
}

// ForgeVersionIn applies the In predicate on the "forge_version" field.
func ForgeVersionIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldForgeVersion, vs...))
}

// ForgeVersionNotIn applies the NotIn predicate on the "forge_version" field.
func ForgeVersionNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldForgeVersion, vs...))
}

// ForgeVersionGT applies the GT predicate on the "forge_version" field.
func ForgeVersionGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldForgeVersion, v))
}

// ForgeVersionGTE applies the GTE predicate on the "forge_version" field.
func ForgeVersionGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldForgeVersion, v))
}

// ForgeVersionLT applies the LT predicate on the "forge_version" field.
func ForgeVersionLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldForgeVersion, v))
}

// ForgeVersionLTE applies the LTE predicate on the "forge_version" field.
func ForgeVersionLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldForgeVersion, v))
}

// ForgeVersionContains applies the Contains predicate on the "forge_version" field.
func ForgeVersionContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldForgeVersion, v))
}

// ForgeVersionHasPrefix applies the HasPrefix predicate on the "forge_version" field.
func ForgeVersionHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldForgeVersion, v))
}

// ForgeVersionHasSuffix applies the HasSuffix predicate on the "forge_version" field.
func ForgeVersionHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldForgeVersion, v))
}

// ForgeVersionEqualFold applies the EqualFold predicate on the "forge_version" field.
func ForgeVersionEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldForgeVersion, v))
}

// ForgeVersionContainsFold applies the ContainsFold predicate on the "forge_version" field.
func ForgeVersionContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldForgeVersion, v))
}

// PlatformsIsNil applies the IsNil predicate on the "platforms" field.
func PlatformsIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldPlatforms))
}

// PlatformsNotNil applies the NotNil predicate on the "platforms" field.
func PlatformsNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldPlatforms))
}

// SpecEQ applies the EQ predicate on the "spec" field.
func SpecEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSpec, v))
}

// SpecNEQ applies the NEQ predicate on the "spec" field.
func SpecNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldSpec, v))
}

// SpecIn applies the In predicate on the "spec" field.
func SpecIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldSpec, vs...))
}

// SpecNotIn applies the NotIn predicate on the "spec" field.
func SpecNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldSpec, vs...))
}

// SpecGT applies the GT predicate on the "spec" field.
func SpecGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldSpec, v))
}

// SpecGTE applies the GTE predicate on the "spec" field.
func SpecGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldSpec, v))
}

// SpecLT applies the LT predicate on the "spec" field.
func SpecLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldSpec, v))
}

// SpecLTE applies the LTE predicate on the "spec" field.
func SpecLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldSpec, v))
}

// SpecContains applies the Contains predicate on the "spec" field.
func SpecContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldSpec, v))
}

// SpecHasPrefix applies the HasPrefix predicate on the "spec" field.
func SpecHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldSpec, v))
}

// SpecHasSuffix applies the HasSuffix predicate on the "spec" field.
func SpecHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldSpec, v))
}

// SpecEqualFold applies the EqualFold predicate on the "spec" field.
func SpecEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldSpec, v))
}

// SpecContainsFold applies the ContainsFold predicate on the "spec" field.
func SpecContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldSpec, v))
}

// SpecHashEQ applies the EQ predicate on the "spec_hash" field.
func SpecHashEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSpecHash, v))
}

// SpecHashNEQ applies the NEQ predicate on the "spec_hash" field.
func SpecHashNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldSpecHash, v))
}

// SpecHashIn applies the In predicate on the "spec_hash" field.
func SpecHashIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldSpecHash, vs...))
}

// SpecHashNotIn applies the NotIn predicate on the "spec_hash" field.
func SpecHashNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldSpecHash, vs...))
}

// SpecHashGT applies the GT predicate on the "spec_hash" field.
func SpecHashGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldSpecHash, v))
}

// SpecHashGTE applies the GTE predicate on the "spec_hash" field.
func SpecHashGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldSpecHash, v))
}

// SpecHashLT applies the LT predicate on the "spec_hash" field.
func SpecHashLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldSpecHash, v))
}

// SpecHashLTE applies the LTE predicate on the "spec_hash" field.
func SpecHashLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldSpecHash, v))
}

// SpecHashContains applies the Contains predicate on the "spec_hash" field.
func SpecHashContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldSpecHash, v))
}

// SpecHashHasPrefix applies the HasPrefix predicate on the "spec_hash" field.
func SpecHashHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldSpecHash, v))
}

// SpecHashHasSuffix applies the HasSuffix predicate on the "spec_hash" field.
func SpecHashHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldSpecHash, v))
}

// SpecHashEqualFold applies the EqualFold predicate on the "spec_hash" field.
func SpecHashEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldSpecHash, v))
}

// SpecHashContainsFold applies the ContainsFold predicate on the "spec_hash" field.
func SpecHashContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldSpecHash, v))
}

// IsInstalledEQ applies the EQ predicate on the "is_installed" field.
func IsInstalledEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldIsInstalled, v))
}

// IsInstalledNEQ applies the NEQ predicate on the "is_installed" field.
func IsInstalledNEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldIsInstalled, v))
}

// InstallPathEQ applies the EQ predicate on the "install_path" field.
func InstallPathEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldInstallPath, v))
}

// InstallPathNEQ applies the NEQ predicate on the "install_path" field.
func InstallPathNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldInstallPath, v))
}

// InstallPathIn applies the In predicate on the "install_path" field.
func InstallPathIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldInstallPath, vs...))
}

// InstallPathNotIn applies the NotIn predicate on the "install_path" field.
func InstallPathNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldInstallPath, vs...))
}

// InstallPathGT applies the GT predicate on the "install_path" field.
func InstallPathGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldInstallPath, v))
}

// InstallPathGTE applies the GTE predicate on the "install_path" field.
func InstallPathGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldInstallPath, v))
}

// InstallPathLT applies the LT predicate on the "install_path" field.
func InstallPathLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldInstallPath, v))
}

// InstallPathLTE applies the LTE predicate on the "install_path" field.
func InstallPathLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldInstallPath, v))
}

// InstallPathContains applies the Contains predicate on the "install_path" field.
func InstallPathContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldInstallPath, v))
}

// InstallPathHasPrefix applies the HasPrefix predicate on the "install_path" field.
func InstallPathHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldInstallPath, v))
}

// InstallPathHasSuffix applies the HasSuffix predicate on the "install_path" field.
func InstallPathHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldInstallPath, v))
}

// InstallPathIsNil applies the IsNil predicate on the "install_path" field.
func InstallPathIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldInstallPath))
}

// InstallPathNotNil applies the NotNil predicate on the "install_path" field.
func InstallPathNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldInstallPath))
}

// InstallPathEqualFold applies the EqualFold predicate on the "install_path" field.
func InstallPathEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldInstallPath, v))
}

// InstallPathContainsFold applies the ContainsFold predicate on the "install_path" field.
func InstallPathContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldInstallPath, v))
}

// InstalledAtEQ applies the EQ predicate on the "installed_at" field.
func InstalledAtEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldInstalledAt, v))
}

// InstalledAtNEQ applies the NEQ predicate on the "installed_at" field.
func InstalledAtNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldInstalledAt, v))
}

// InstalledAtIn applies the In predicate on the "installed_at" field.
func InstalledAtIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldInstalledAt, vs...))
}

// InstalledAtNotIn applies the NotIn predicate on the "installed_at" field.
func InstalledAtNotIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldInstalledAt, vs...))
}

// InstalledAtGT applies the GT predicate on the "installed_at" field.
func InstalledAtGT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldInstalledAt, v))
}

// InstalledAtGTE applies the GTE predicate on the "installed_at" field.
func InstalledAtGTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldInstalledAt, v))
}

// InstalledAtLT applies the LT predicate on the "installed_at" field.
func InstalledAtLT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldInstalledAt, v))
}

// InstalledAtLTE applies the LTE predicate on the "installed_at" field.
func InstalledAtLTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldInstalledAt, v))
}

// InstalledAtIsNil applies the IsNil predicate on the "installed_at" field.
func InstalledAtIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldInstalledAt))
}

// InstalledAtNotNil applies the NotNil predicate on the "installed_at" field.
func InstalledAtNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldInstalledAt))
}

// CommitHashEQ applies the EQ predicate on the "commit_hash" field.
func CommitHashEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldCommitHash, v))
}

// CommitHashNEQ applies the NEQ predicate on the "commit_hash" field.
func CommitHashNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldCommitHash, v))
}

// CommitHashIn applies the In predicate on the "commit_hash" field.
func CommitHashIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldCommitHash, vs...))
}

// CommitHashNotIn applies the NotIn predicate on the "commit_hash" field.
func CommitHashNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldCommitHash, vs...))
}

// CommitHashGT applies the GT predicate on the "commit_hash" field.
func CommitHashGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldCommitHash, v))
}

// CommitHashGTE applies the GTE predicate on the "commit_hash" field.
func CommitHashGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldCommitHash, v))
}

// CommitHashLT applies the LT predicate on the "commit_hash" field.
func CommitHashLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldCommitHash, v))
}

// CommitHashLTE applies the LTE predicate on the "commit_hash" field.
func CommitHashLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldCommitHash, v))
}

// CommitHashContains applies the Contains predicate on the "commit_hash" field.
func CommitHashContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldCommitHash, v))
}

// CommitHashHasPrefix applies the HasPrefix predicate on the "commit_hash" field.
func CommitHashHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldCommitHash, v))
}

// CommitHashHasSuffix applies the HasSuffix predicate on the "commit_hash" field.
func CommitHashHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldCommitHash, v))
}

// CommitHashEqualFold applies the EqualFold predicate on the "commit_hash" field.
func CommitHashEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldCommitHash, v))
}

// CommitHashContainsFold applies the ContainsFold predicate on the "commit_hash" field.
func CommitHashContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldCommitHash, v))
}

// BranchEQ applies the EQ predicate on the "branch" field.
func BranchEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldBranch, v))
}

// BranchNEQ applies the NEQ predicate on the "branch" field.
func BranchNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldBranch, v))
}

// BranchIn applies the In predicate on the "branch" field.
func BranchIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldBranch, vs...))
}

// BranchNotIn applies the NotIn predicate on the "branch" field.
func BranchNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldBranch, vs...))
}

// BranchGT applies the GT predicate on the "branch" field.
func BranchGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldBranch, v))
}

// BranchGTE applies the GTE predicate on the "branch" field.
func BranchGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldBranch, v))
}

// BranchLT applies the LT predicate on the "branch" field.
func BranchLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldBranch, v))
}

// BranchLTE applies the LTE predicate on the "branch" field.
func BranchLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldBranch, v))
}

// BranchContains applies the Contains predicate on the "branch" field.
func BranchContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldBranch, v))
}

// BranchHasPrefix applies the HasPrefix predicate on the "branch" field.
func BranchHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldBranch, v))
}

// BranchHasSuffix applies the HasSuffix predicate on the "branch" field.
func BranchHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldBranch, v))
}

// BranchEqualFold applies the EqualFold predicate on the "branch" field.
func BranchEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldBranch, v))
}

// BranchContainsFold applies the ContainsFold predicate on the "branch" field.
func BranchContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldBranch, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldUpdatedAt, v))
}

// ConfigPathEQ applies the EQ predicate on the "config_path" field.
func ConfigPathEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldConfigPath, v))
}

// ConfigPathNEQ applies the NEQ predicate on the "config_path" field.
func ConfigPathNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldConfigPath, v))
}

// ConfigPathIn applies the In predicate on the "config_path" field.
func ConfigPathIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldConfigPath, vs...))
}

// ConfigPathNotIn applies the NotIn predicate on the "config_path" field.
func ConfigPathNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldConfigPath, vs...))
}

// ConfigPathGT applies the GT predicate on the "config_path" field.
func ConfigPathGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldConfigPath, v))
}

// ConfigPathGTE applies the GTE predicate on the "config_path" field.
func ConfigPathGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldConfigPath, v))
}

// ConfigPathLT applies the LT predicate on the "config_path" field.
func ConfigPathLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldConfigPath, v))
}

// ConfigPathLTE applies the LTE predicate on the "config_path" field.
func ConfigPathLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldConfigPath, v))
}

// ConfigPathContains applies the Contains predicate on the "config_path" field.
func ConfigPathContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldConfigPath, v))
}

// ConfigPathHasPrefix applies the HasPrefix predicate on the "config_path" field.
func ConfigPathHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldConfigPath, v))
}

// ConfigPathHasSuffix applies the HasSuffix predicate on the "config_path" field.
func ConfigPathHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldConfigPath, v))
}

// ConfigPathIsNil applies the IsNil predicate on the "config_path" field.
func ConfigPathIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldConfigPath))
}

// ConfigPathNotNil applies the NotNil predicate on the "config_path" field.
func ConfigPathNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldConfigPath))
}

// ConfigPathEqualFold applies the EqualFold predicate on the "config_path" field.
func ConfigPathEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldConfigPath, v))
}

// ConfigPathContainsFold applies the ContainsFold predicate on the "config_path" field.
func ConfigPathContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldConfigPath, v))
}

// AgentConfigIsNil applies the IsNil predicate on the "agent_config" field.
func AgentConfigIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldAgentConfig))
}

// AgentConfigNotNil applies the NotNil predicate on the "agent_config" field.
func AgentConfigNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldAgentConfig))
}

// LlmProviderEQ applies the EQ predicate on the "llm_provider" field.
func LlmProviderEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldLlmProvider, v))
}

// LlmProviderNEQ applies the NEQ predicate on the "llm_provider" field.
func LlmProviderNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldLlmProvider, v))
}

// LlmProviderIn applies the In predicate on the "llm_provider" field.
func LlmProviderIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldLlmProvider, vs...))
}

// LlmProviderNotIn applies the NotIn predicate on the "llm_provider" field.
func LlmProviderNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldLlmProvider, vs...))
}

// LlmProviderGT applies the GT predicate on the "llm_provider" field.
func LlmProviderGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldLlmProvider, v))
}

// LlmProviderGTE applies the GTE predicate on the "llm_provider" field.
func LlmProviderGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldLlmProvider, v))
}

// LlmProviderLT applies the LT predicate on the "llm_provider" field.
func LlmProviderLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldLlmProvider, v))
}

// LlmProviderLTE applies the LTE predicate on the "llm_provider" field.
func LlmProviderLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldLlmProvider, v))
}

// LlmProviderContains applies the Contains predicate on the "llm_provider" field.
func LlmProviderContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldLlmProvider, v))
}

// LlmProviderHasPrefix applies the HasPrefix predicate on the "llm_provider" field.
func LlmProviderHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldLlmProvider, v))
}

// LlmProviderHasSuffix applies the HasSuffix predicate on the "llm_provider" field.
func LlmProviderHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldLlmProvider, v))
}

// LlmProviderIsNil applies the IsNil predicate on the "llm_provider" field.
func LlmProviderIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldLlmProvider))
}

// LlmProviderNotNil applies the NotNil predicate on the "llm_provider" field.
func LlmProviderNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldLlmProvider))
}

// LlmProviderEqualFold applies the EqualFold predicate on the "llm_provider" field.
func LlmProviderEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldLlmProvider, v))
}

// LlmProviderContainsFold applies the ContainsFold predicate on the "llm_provider" field.
func LlmProviderContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldLlmProvider, v))
}

// SystemPromptIDEQ applies the EQ predicate on the "system_prompt_id" field.
func SystemPromptIDEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSystemPromptID, v))
}

// SystemPromptIDNEQ applies the NEQ predicate on the "system_prompt_id" field.
func SystemPromptIDNEQ(v string) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldSystemPromptID, v))
}

// SystemPromptIDIn applies the In predicate on the "system_prompt_id" field.
func SystemPromptIDIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldSystemPromptID, vs...))
}

// SystemPromptIDNotIn applies the NotIn predicate on the "system_prompt_id" field.
func SystemPromptIDNotIn(vs ...string) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldSystemPromptID, vs...))
}

// SystemPromptIDGT applies the GT predicate on the "system_prompt_id" field.
func SystemPromptIDGT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldSystemPromptID, v))
}

// SystemPromptIDGTE applies the GTE predicate on the "system_prompt_id" field.
func SystemPromptIDGTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldSystemPromptID, v))
}

// SystemPromptIDLT applies the LT predicate on the "system_prompt_id" field.
func SystemPromptIDLT(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldSystemPromptID, v))
}

// SystemPromptIDLTE applies the LTE predicate on the "system_prompt_id" field.
func SystemPromptIDLTE(v string) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldSystemPromptID, v))
}

// SystemPromptIDContains applies the Contains predicate on the "system_prompt_id" field.
func SystemPromptIDContains(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContains(FieldSystemPromptID, v))
}

// SystemPromptIDHasPrefix applies the HasPrefix predicate on the "system_prompt_id" field.
func SystemPromptIDHasPrefix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasPrefix(FieldSystemPromptID, v))
}

// SystemPromptIDHasSuffix applies the HasSuffix predicate on the "system_prompt_id" field.
func SystemPromptIDHasSuffix(v string) predicate.Agent {
	return predicate.Agent(sql.FieldHasSuffix(FieldSystemPromptID, v))
}

// SystemPromptIDIsNil applies the IsNil predicate on the "system_prompt_id" field.
func SystemPromptIDIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldSystemPromptID))
}

// SystemPromptIDNotNil applies the NotNil predicate on the "system_prompt_id" field.
func SystemPromptIDNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldSystemPromptID))
}

// SystemPromptIDEqualFold applies the EqualFold predicate on the "system_prompt_id" field.
func SystemPromptIDEqualFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldEqualFold(FieldSystemPromptID, v))
}

// SystemPromptIDContainsFold applies the ContainsFold predicate on the "system_prompt_id" field.
func SystemPromptIDContainsFold(v string) predicate.Agent {
	return predicate.Agent(sql.FieldContainsFold(FieldSystemPromptID, v))
}

// ToolDependenciesIsNil applies the IsNil predicate on the "tool_dependencies" field.
func ToolDependenciesIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldToolDependencies))
}

// ToolDependenciesNotNil applies the NotNil predicate on the "tool_dependencies" field.
func ToolDependenciesNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldToolDependencies))
}

// PromptDependenciesIsNil applies the IsNil predicate on the "prompt_dependencies" field.
func PromptDependenciesIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldPromptDependencies))
}

// PromptDependenciesNotNil applies the NotNil predicate on the "prompt_dependencies" field.
func PromptDependenciesNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldPromptDependencies))
}

// AgentDependenciesIsNil applies the IsNil predicate on the "agent_dependencies" field.
func AgentDependenciesIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldAgentDependencies))
}

// AgentDependenciesNotNil applies the NotNil predicate on the "agent_dependencies" field.
func AgentDependenciesNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldAgentDependencies))
}

// AgentTypeEQ applies the EQ predicate on the "agent_type" field.
func AgentTypeEQ(v AgentType) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldAgentType, v))
}

// AgentTypeNEQ applies the NEQ predicate on the "agent_type" field.
func AgentTypeNEQ(v AgentType) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldAgentType, v))
}

// AgentTypeIn applies the In predicate on the "agent_type" field.
func AgentTypeIn(vs ...AgentType) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldAgentType, vs...))
}

// AgentTypeNotIn applies the NotIn predicate on the "agent_type" field.
func AgentTypeNotIn(vs ...AgentType) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldAgentType, vs...))
}

// CapabilitiesIsNil applies the IsNil predicate on the "capabilities" field.
func CapabilitiesIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldCapabilities))
}

// CapabilitiesNotNil applies the NotNil predicate on the "capabilities" field.
func CapabilitiesNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldCapabilities))
}

// SupportedLanguagesIsNil applies the IsNil predicate on the "supported_languages" field.
func SupportedLanguagesIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldSupportedLanguages))
}

// SupportedLanguagesNotNil applies the NotNil predicate on the "supported_languages" field.
func SupportedLanguagesNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldSupportedLanguages))
}

// SupportsMemoryEQ applies the EQ predicate on the "supports_memory" field.
func SupportsMemoryEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSupportsMemory, v))
}

// SupportsMemoryNEQ applies the NEQ predicate on the "supports_memory" field.
func SupportsMemoryNEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldSupportsMemory, v))
}

// SupportsToolsEQ applies the EQ predicate on the "supports_tools" field.
func SupportsToolsEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSupportsTools, v))
}

// SupportsToolsNEQ applies the NEQ predicate on the "supports_tools" field.
func SupportsToolsNEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldSupportsTools, v))
}

// SupportsMultimodalEQ applies the EQ predicate on the "supports_multimodal" field.
func SupportsMultimodalEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSupportsMultimodal, v))
}

// SupportsMultimodalNEQ applies the NEQ predicate on the "supports_multimodal" field.
func SupportsMultimodalNEQ(v bool) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldSupportsMultimodal, v))
}

// ModelPreferencesIsNil applies the IsNil predicate on the "model_preferences" field.
func ModelPreferencesIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldModelPreferences))
}

// ModelPreferencesNotNil applies the NotNil predicate on the "model_preferences" field.
func ModelPreferencesNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldModelPreferences))
}

// DefaultTemperatureEQ applies the EQ predicate on the "default_temperature" field.
func DefaultTemperatureEQ(v float64) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldDefaultTemperature, v))
}

// DefaultTemperatureNEQ applies the NEQ predicate on the "default_temperature" field.
func DefaultTemperatureNEQ(v float64) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldDefaultTemperature, v))
}

// DefaultTemperatureIn applies the In predicate on the "default_temperature" field.
func DefaultTemperatureIn(vs ...float64) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldDefaultTemperature, vs...))
}

// DefaultTemperatureNotIn applies the NotIn predicate on the "default_temperature" field.
func DefaultTemperatureNotIn(vs ...float64) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldDefaultTemperature, vs...))
}

// DefaultTemperatureGT applies the GT predicate on the "default_temperature" field.
func DefaultTemperatureGT(v float64) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldDefaultTemperature, v))
}

// DefaultTemperatureGTE applies the GTE predicate on the "default_temperature" field.
func DefaultTemperatureGTE(v float64) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldDefaultTemperature, v))
}

// DefaultTemperatureLT applies the LT predicate on the "default_temperature" field.
func DefaultTemperatureLT(v float64) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldDefaultTemperature, v))
}

// DefaultTemperatureLTE applies the LTE predicate on the "default_temperature" field.
func DefaultTemperatureLTE(v float64) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldDefaultTemperature, v))
}

// DefaultTemperatureIsNil applies the IsNil predicate on the "default_temperature" field.
func DefaultTemperatureIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldDefaultTemperature))
}

// DefaultTemperatureNotNil applies the NotNil predicate on the "default_temperature" field.
func DefaultTemperatureNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldDefaultTemperature))
}

// DefaultMaxTokensEQ applies the EQ predicate on the "default_max_tokens" field.
func DefaultMaxTokensEQ(v int) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldDefaultMaxTokens, v))
}

// DefaultMaxTokensNEQ applies the NEQ predicate on the "default_max_tokens" field.
func DefaultMaxTokensNEQ(v int) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldDefaultMaxTokens, v))
}

// DefaultMaxTokensIn applies the In predicate on the "default_max_tokens" field.
func DefaultMaxTokensIn(vs ...int) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldDefaultMaxTokens, vs...))
}

// DefaultMaxTokensNotIn applies the NotIn predicate on the "default_max_tokens" field.
func DefaultMaxTokensNotIn(vs ...int) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldDefaultMaxTokens, vs...))
}

// DefaultMaxTokensGT applies the GT predicate on the "default_max_tokens" field.
func DefaultMaxTokensGT(v int) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldDefaultMaxTokens, v))
}

// DefaultMaxTokensGTE applies the GTE predicate on the "default_max_tokens" field.
func DefaultMaxTokensGTE(v int) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldDefaultMaxTokens, v))
}

// DefaultMaxTokensLT applies the LT predicate on the "default_max_tokens" field.
func DefaultMaxTokensLT(v int) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldDefaultMaxTokens, v))
}

// DefaultMaxTokensLTE applies the LTE predicate on the "default_max_tokens" field.
func DefaultMaxTokensLTE(v int) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldDefaultMaxTokens, v))
}

// DefaultMaxTokensIsNil applies the IsNil predicate on the "default_max_tokens" field.
func DefaultMaxTokensIsNil() predicate.Agent {
	return predicate.Agent(sql.FieldIsNull(FieldDefaultMaxTokens))
}

// DefaultMaxTokensNotNil applies the NotNil predicate on the "default_max_tokens" field.
func DefaultMaxTokensNotNil() predicate.Agent {
	return predicate.Agent(sql.FieldNotNull(FieldDefaultMaxTokens))
}

// SessionTimeoutMinutesEQ applies the EQ predicate on the "session_timeout_minutes" field.
func SessionTimeoutMinutesEQ(v int) predicate.Agent {
	return predicate.Agent(sql.FieldEQ(FieldSessionTimeoutMinutes, v))
}

// SessionTimeoutMinutesNEQ applies the NEQ predicate on the "session_timeout_minutes" field.
func SessionTimeoutMinutesNEQ(v int) predicate.Agent {
	return predicate.Agent(sql.FieldNEQ(FieldSessionTimeoutMinutes, v))
}

// SessionTimeoutMinutesIn applies the In predicate on the "session_timeout_minutes" field.
func SessionTimeoutMinutesIn(vs ...int) predicate.Agent {
	return predicate.Agent(sql.FieldIn(FieldSessionTimeoutMinutes, vs...))
}

// SessionTimeoutMinutesNotIn applies the NotIn predicate on the "session_timeout_minutes" field.
func SessionTimeoutMinutesNotIn(vs ...int) predicate.Agent {
	return predicate.Agent(sql.FieldNotIn(FieldSessionTimeoutMinutes, vs...))
}

// SessionTimeoutMinutesGT applies the GT predicate on the "session_timeout_minutes" field.
func SessionTimeoutMinutesGT(v int) predicate.Agent {
	return predicate.Agent(sql.FieldGT(FieldSessionTimeoutMinutes, v))
}

// SessionTimeoutMinutesGTE applies the GTE predicate on the "session_timeout_minutes" field.
func SessionTimeoutMinutesGTE(v int) predicate.Agent {
	return predicate.Agent(sql.FieldGTE(FieldSessionTimeoutMinutes, v))
}

// SessionTimeoutMinutesLT applies the LT predicate on the "session_timeout_minutes" field.
func SessionTimeoutMinutesLT(v int) predicate.Agent {
	return predicate.Agent(sql.FieldLT(FieldSessionTimeoutMinutes, v))
}

// SessionTimeoutMinutesLTE applies the LTE predicate on the "session_timeout_minutes" field.
func SessionTimeoutMinutesLTE(v int) predicate.Agent {
	return predicate.Agent(sql.FieldLTE(FieldSessionTimeoutMinutes, v))
}

// HasRepository applies the HasEdge predicate on the "repository" edge.
func HasRepository() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RepositoryTable, RepositoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepositoryWith applies the HasEdge predicate on the "repository" edge with a given conditions (other predicates).
func HasRepositoryWith(preds ...predicate.Repository) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newRepositoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependencies applies the HasEdge predicate on the "dependencies" edge.
func HasDependencies() predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DependenciesTable, DependenciesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependenciesWith applies the HasEdge predicate on the "dependencies" edge with a given conditions (other predicates).
func HasDependenciesWith(preds ...predicate.AgentDependency) predicate.Agent {
	return predicate.Agent(func(s *sql.Selector) {
		step := newDependenciesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Agent) predicate.Agent {
	return predicate.Agent(sql.NotPredicates(p))
}
