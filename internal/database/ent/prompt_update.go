// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
	"github.com/denkhaus/agentforge/internal/database/ent/prompt"
	"github.com/denkhaus/agentforge/internal/database/ent/promptdependency"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
)

// PromptUpdate is the builder for updating Prompt entities.
type PromptUpdate struct {
	config
	hooks    []Hook
	mutation *PromptMutation
}

// Where appends a list predicates to the PromptUpdate builder.
func (pu *PromptUpdate) Where(ps ...predicate.Prompt) *PromptUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PromptUpdate) SetName(s string) *PromptUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableName(s *string) *PromptUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetNamespace sets the "namespace" field.
func (pu *PromptUpdate) SetNamespace(s string) *PromptUpdate {
	pu.mutation.SetNamespace(s)
	return pu
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableNamespace(s *string) *PromptUpdate {
	if s != nil {
		pu.SetNamespace(*s)
	}
	return pu
}

// SetVersion sets the "version" field.
func (pu *PromptUpdate) SetVersion(s string) *PromptUpdate {
	pu.mutation.SetVersion(s)
	return pu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableVersion(s *string) *PromptUpdate {
	if s != nil {
		pu.SetVersion(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PromptUpdate) SetDescription(s string) *PromptUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableDescription(s *string) *PromptUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// SetAuthor sets the "author" field.
func (pu *PromptUpdate) SetAuthor(s string) *PromptUpdate {
	pu.mutation.SetAuthor(s)
	return pu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableAuthor(s *string) *PromptUpdate {
	if s != nil {
		pu.SetAuthor(*s)
	}
	return pu
}

// SetLicense sets the "license" field.
func (pu *PromptUpdate) SetLicense(s string) *PromptUpdate {
	pu.mutation.SetLicense(s)
	return pu
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableLicense(s *string) *PromptUpdate {
	if s != nil {
		pu.SetLicense(*s)
	}
	return pu
}

// SetHomepage sets the "homepage" field.
func (pu *PromptUpdate) SetHomepage(s string) *PromptUpdate {
	pu.mutation.SetHomepage(s)
	return pu
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableHomepage(s *string) *PromptUpdate {
	if s != nil {
		pu.SetHomepage(*s)
	}
	return pu
}

// ClearHomepage clears the value of the "homepage" field.
func (pu *PromptUpdate) ClearHomepage() *PromptUpdate {
	pu.mutation.ClearHomepage()
	return pu
}

// SetDocumentation sets the "documentation" field.
func (pu *PromptUpdate) SetDocumentation(s string) *PromptUpdate {
	pu.mutation.SetDocumentation(s)
	return pu
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableDocumentation(s *string) *PromptUpdate {
	if s != nil {
		pu.SetDocumentation(*s)
	}
	return pu
}

// ClearDocumentation clears the value of the "documentation" field.
func (pu *PromptUpdate) ClearDocumentation() *PromptUpdate {
	pu.mutation.ClearDocumentation()
	return pu
}

// SetTags sets the "tags" field.
func (pu *PromptUpdate) SetTags(s []string) *PromptUpdate {
	pu.mutation.SetTags(s)
	return pu
}

// AppendTags appends s to the "tags" field.
func (pu *PromptUpdate) AppendTags(s []string) *PromptUpdate {
	pu.mutation.AppendTags(s)
	return pu
}

// ClearTags clears the value of the "tags" field.
func (pu *PromptUpdate) ClearTags() *PromptUpdate {
	pu.mutation.ClearTags()
	return pu
}

// SetCategories sets the "categories" field.
func (pu *PromptUpdate) SetCategories(s []string) *PromptUpdate {
	pu.mutation.SetCategories(s)
	return pu
}

// AppendCategories appends s to the "categories" field.
func (pu *PromptUpdate) AppendCategories(s []string) *PromptUpdate {
	pu.mutation.AppendCategories(s)
	return pu
}

// ClearCategories clears the value of the "categories" field.
func (pu *PromptUpdate) ClearCategories() *PromptUpdate {
	pu.mutation.ClearCategories()
	return pu
}

// SetKeywords sets the "keywords" field.
func (pu *PromptUpdate) SetKeywords(s []string) *PromptUpdate {
	pu.mutation.SetKeywords(s)
	return pu
}

// AppendKeywords appends s to the "keywords" field.
func (pu *PromptUpdate) AppendKeywords(s []string) *PromptUpdate {
	pu.mutation.AppendKeywords(s)
	return pu
}

// ClearKeywords clears the value of the "keywords" field.
func (pu *PromptUpdate) ClearKeywords() *PromptUpdate {
	pu.mutation.ClearKeywords()
	return pu
}

// SetStability sets the "stability" field.
func (pu *PromptUpdate) SetStability(pr prompt.Stability) *PromptUpdate {
	pu.mutation.SetStability(pr)
	return pu
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableStability(pr *prompt.Stability) *PromptUpdate {
	if pr != nil {
		pu.SetStability(*pr)
	}
	return pu
}

// SetMaturity sets the "maturity" field.
func (pu *PromptUpdate) SetMaturity(pr prompt.Maturity) *PromptUpdate {
	pu.mutation.SetMaturity(pr)
	return pu
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableMaturity(pr *prompt.Maturity) *PromptUpdate {
	if pr != nil {
		pu.SetMaturity(*pr)
	}
	return pu
}

// SetForgeVersion sets the "forge_version" field.
func (pu *PromptUpdate) SetForgeVersion(s string) *PromptUpdate {
	pu.mutation.SetForgeVersion(s)
	return pu
}

// SetNillableForgeVersion sets the "forge_version" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableForgeVersion(s *string) *PromptUpdate {
	if s != nil {
		pu.SetForgeVersion(*s)
	}
	return pu
}

// SetPlatforms sets the "platforms" field.
func (pu *PromptUpdate) SetPlatforms(s []string) *PromptUpdate {
	pu.mutation.SetPlatforms(s)
	return pu
}

// AppendPlatforms appends s to the "platforms" field.
func (pu *PromptUpdate) AppendPlatforms(s []string) *PromptUpdate {
	pu.mutation.AppendPlatforms(s)
	return pu
}

// ClearPlatforms clears the value of the "platforms" field.
func (pu *PromptUpdate) ClearPlatforms() *PromptUpdate {
	pu.mutation.ClearPlatforms()
	return pu
}

// SetSpec sets the "spec" field.
func (pu *PromptUpdate) SetSpec(s string) *PromptUpdate {
	pu.mutation.SetSpec(s)
	return pu
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableSpec(s *string) *PromptUpdate {
	if s != nil {
		pu.SetSpec(*s)
	}
	return pu
}

// SetSpecHash sets the "spec_hash" field.
func (pu *PromptUpdate) SetSpecHash(s string) *PromptUpdate {
	pu.mutation.SetSpecHash(s)
	return pu
}

// SetNillableSpecHash sets the "spec_hash" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableSpecHash(s *string) *PromptUpdate {
	if s != nil {
		pu.SetSpecHash(*s)
	}
	return pu
}

// SetIsInstalled sets the "is_installed" field.
func (pu *PromptUpdate) SetIsInstalled(b bool) *PromptUpdate {
	pu.mutation.SetIsInstalled(b)
	return pu
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableIsInstalled(b *bool) *PromptUpdate {
	if b != nil {
		pu.SetIsInstalled(*b)
	}
	return pu
}

// SetInstallPath sets the "install_path" field.
func (pu *PromptUpdate) SetInstallPath(s string) *PromptUpdate {
	pu.mutation.SetInstallPath(s)
	return pu
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableInstallPath(s *string) *PromptUpdate {
	if s != nil {
		pu.SetInstallPath(*s)
	}
	return pu
}

// ClearInstallPath clears the value of the "install_path" field.
func (pu *PromptUpdate) ClearInstallPath() *PromptUpdate {
	pu.mutation.ClearInstallPath()
	return pu
}

// SetInstalledAt sets the "installed_at" field.
func (pu *PromptUpdate) SetInstalledAt(t time.Time) *PromptUpdate {
	pu.mutation.SetInstalledAt(t)
	return pu
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableInstalledAt(t *time.Time) *PromptUpdate {
	if t != nil {
		pu.SetInstalledAt(*t)
	}
	return pu
}

// ClearInstalledAt clears the value of the "installed_at" field.
func (pu *PromptUpdate) ClearInstalledAt() *PromptUpdate {
	pu.mutation.ClearInstalledAt()
	return pu
}

// SetCommitHash sets the "commit_hash" field.
func (pu *PromptUpdate) SetCommitHash(s string) *PromptUpdate {
	pu.mutation.SetCommitHash(s)
	return pu
}

// SetNillableCommitHash sets the "commit_hash" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableCommitHash(s *string) *PromptUpdate {
	if s != nil {
		pu.SetCommitHash(*s)
	}
	return pu
}

// SetBranch sets the "branch" field.
func (pu *PromptUpdate) SetBranch(s string) *PromptUpdate {
	pu.mutation.SetBranch(s)
	return pu
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableBranch(s *string) *PromptUpdate {
	if s != nil {
		pu.SetBranch(*s)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PromptUpdate) SetUpdatedAt(t time.Time) *PromptUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetTemplatePath sets the "template_path" field.
func (pu *PromptUpdate) SetTemplatePath(s string) *PromptUpdate {
	pu.mutation.SetTemplatePath(s)
	return pu
}

// SetNillableTemplatePath sets the "template_path" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableTemplatePath(s *string) *PromptUpdate {
	if s != nil {
		pu.SetTemplatePath(*s)
	}
	return pu
}

// ClearTemplatePath clears the value of the "template_path" field.
func (pu *PromptUpdate) ClearTemplatePath() *PromptUpdate {
	pu.mutation.ClearTemplatePath()
	return pu
}

// SetTemplateContent sets the "template_content" field.
func (pu *PromptUpdate) SetTemplateContent(s string) *PromptUpdate {
	pu.mutation.SetTemplateContent(s)
	return pu
}

// SetNillableTemplateContent sets the "template_content" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableTemplateContent(s *string) *PromptUpdate {
	if s != nil {
		pu.SetTemplateContent(*s)
	}
	return pu
}

// ClearTemplateContent clears the value of the "template_content" field.
func (pu *PromptUpdate) ClearTemplateContent() *PromptUpdate {
	pu.mutation.ClearTemplateContent()
	return pu
}

// SetVariablesSchema sets the "variables_schema" field.
func (pu *PromptUpdate) SetVariablesSchema(m map[string]interface{}) *PromptUpdate {
	pu.mutation.SetVariablesSchema(m)
	return pu
}

// ClearVariablesSchema clears the value of the "variables_schema" field.
func (pu *PromptUpdate) ClearVariablesSchema() *PromptUpdate {
	pu.mutation.ClearVariablesSchema()
	return pu
}

// SetPromptType sets the "prompt_type" field.
func (pu *PromptUpdate) SetPromptType(pt prompt.PromptType) *PromptUpdate {
	pu.mutation.SetPromptType(pt)
	return pu
}

// SetNillablePromptType sets the "prompt_type" field if the given value is not nil.
func (pu *PromptUpdate) SetNillablePromptType(pt *prompt.PromptType) *PromptUpdate {
	if pt != nil {
		pu.SetPromptType(*pt)
	}
	return pu
}

// SetContextWindow sets the "context_window" field.
func (pu *PromptUpdate) SetContextWindow(i int) *PromptUpdate {
	pu.mutation.ResetContextWindow()
	pu.mutation.SetContextWindow(i)
	return pu
}

// SetNillableContextWindow sets the "context_window" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableContextWindow(i *int) *PromptUpdate {
	if i != nil {
		pu.SetContextWindow(*i)
	}
	return pu
}

// AddContextWindow adds i to the "context_window" field.
func (pu *PromptUpdate) AddContextWindow(i int) *PromptUpdate {
	pu.mutation.AddContextWindow(i)
	return pu
}

// ClearContextWindow clears the value of the "context_window" field.
func (pu *PromptUpdate) ClearContextWindow() *PromptUpdate {
	pu.mutation.ClearContextWindow()
	return pu
}

// SetDefaultVariables sets the "default_variables" field.
func (pu *PromptUpdate) SetDefaultVariables(m map[string]interface{}) *PromptUpdate {
	pu.mutation.SetDefaultVariables(m)
	return pu
}

// ClearDefaultVariables clears the value of the "default_variables" field.
func (pu *PromptUpdate) ClearDefaultVariables() *PromptUpdate {
	pu.mutation.ClearDefaultVariables()
	return pu
}

// SetRequiredVariables sets the "required_variables" field.
func (pu *PromptUpdate) SetRequiredVariables(s []string) *PromptUpdate {
	pu.mutation.SetRequiredVariables(s)
	return pu
}

// AppendRequiredVariables appends s to the "required_variables" field.
func (pu *PromptUpdate) AppendRequiredVariables(s []string) *PromptUpdate {
	pu.mutation.AppendRequiredVariables(s)
	return pu
}

// ClearRequiredVariables clears the value of the "required_variables" field.
func (pu *PromptUpdate) ClearRequiredVariables() *PromptUpdate {
	pu.mutation.ClearRequiredVariables()
	return pu
}

// SetLanguage sets the "language" field.
func (pu *PromptUpdate) SetLanguage(s string) *PromptUpdate {
	pu.mutation.SetLanguage(s)
	return pu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableLanguage(s *string) *PromptUpdate {
	if s != nil {
		pu.SetLanguage(*s)
	}
	return pu
}

// SetSupportsStreaming sets the "supports_streaming" field.
func (pu *PromptUpdate) SetSupportsStreaming(b bool) *PromptUpdate {
	pu.mutation.SetSupportsStreaming(b)
	return pu
}

// SetNillableSupportsStreaming sets the "supports_streaming" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableSupportsStreaming(b *bool) *PromptUpdate {
	if b != nil {
		pu.SetSupportsStreaming(*b)
	}
	return pu
}

// SetModelPreferences sets the "model_preferences" field.
func (pu *PromptUpdate) SetModelPreferences(s []string) *PromptUpdate {
	pu.mutation.SetModelPreferences(s)
	return pu
}

// AppendModelPreferences appends s to the "model_preferences" field.
func (pu *PromptUpdate) AppendModelPreferences(s []string) *PromptUpdate {
	pu.mutation.AppendModelPreferences(s)
	return pu
}

// ClearModelPreferences clears the value of the "model_preferences" field.
func (pu *PromptUpdate) ClearModelPreferences() *PromptUpdate {
	pu.mutation.ClearModelPreferences()
	return pu
}

// SetTemperature sets the "temperature" field.
func (pu *PromptUpdate) SetTemperature(f float64) *PromptUpdate {
	pu.mutation.ResetTemperature()
	pu.mutation.SetTemperature(f)
	return pu
}

// SetNillableTemperature sets the "temperature" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableTemperature(f *float64) *PromptUpdate {
	if f != nil {
		pu.SetTemperature(*f)
	}
	return pu
}

// AddTemperature adds f to the "temperature" field.
func (pu *PromptUpdate) AddTemperature(f float64) *PromptUpdate {
	pu.mutation.AddTemperature(f)
	return pu
}

// ClearTemperature clears the value of the "temperature" field.
func (pu *PromptUpdate) ClearTemperature() *PromptUpdate {
	pu.mutation.ClearTemperature()
	return pu
}

// SetMaxTokens sets the "max_tokens" field.
func (pu *PromptUpdate) SetMaxTokens(i int) *PromptUpdate {
	pu.mutation.ResetMaxTokens()
	pu.mutation.SetMaxTokens(i)
	return pu
}

// SetNillableMaxTokens sets the "max_tokens" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableMaxTokens(i *int) *PromptUpdate {
	if i != nil {
		pu.SetMaxTokens(*i)
	}
	return pu
}

// AddMaxTokens adds i to the "max_tokens" field.
func (pu *PromptUpdate) AddMaxTokens(i int) *PromptUpdate {
	pu.mutation.AddMaxTokens(i)
	return pu
}

// ClearMaxTokens clears the value of the "max_tokens" field.
func (pu *PromptUpdate) ClearMaxTokens() *PromptUpdate {
	pu.mutation.ClearMaxTokens()
	return pu
}

// SetStopSequences sets the "stop_sequences" field.
func (pu *PromptUpdate) SetStopSequences(s []string) *PromptUpdate {
	pu.mutation.SetStopSequences(s)
	return pu
}

// AppendStopSequences appends s to the "stop_sequences" field.
func (pu *PromptUpdate) AppendStopSequences(s []string) *PromptUpdate {
	pu.mutation.AppendStopSequences(s)
	return pu
}

// ClearStopSequences clears the value of the "stop_sequences" field.
func (pu *PromptUpdate) ClearStopSequences() *PromptUpdate {
	pu.mutation.ClearStopSequences()
	return pu
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (pu *PromptUpdate) SetRepositoryID(id string) *PromptUpdate {
	pu.mutation.SetRepositoryID(id)
	return pu
}

// SetRepository sets the "repository" edge to the Repository entity.
func (pu *PromptUpdate) SetRepository(r *Repository) *PromptUpdate {
	return pu.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the PromptDependency entity by IDs.
func (pu *PromptUpdate) AddDependencyIDs(ids ...string) *PromptUpdate {
	pu.mutation.AddDependencyIDs(ids...)
	return pu
}

// AddDependencies adds the "dependencies" edges to the PromptDependency entity.
func (pu *PromptUpdate) AddDependencies(p ...*PromptDependency) *PromptUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddDependencyIDs(ids...)
}

// Mutation returns the PromptMutation object of the builder.
func (pu *PromptUpdate) Mutation() *PromptMutation {
	return pu.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (pu *PromptUpdate) ClearRepository() *PromptUpdate {
	pu.mutation.ClearRepository()
	return pu
}

// ClearDependencies clears all "dependencies" edges to the PromptDependency entity.
func (pu *PromptUpdate) ClearDependencies() *PromptUpdate {
	pu.mutation.ClearDependencies()
	return pu
}

// RemoveDependencyIDs removes the "dependencies" edge to PromptDependency entities by IDs.
func (pu *PromptUpdate) RemoveDependencyIDs(ids ...string) *PromptUpdate {
	pu.mutation.RemoveDependencyIDs(ids...)
	return pu
}

// RemoveDependencies removes "dependencies" edges to PromptDependency entities.
func (pu *PromptUpdate) RemoveDependencies(p ...*PromptDependency) *PromptUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveDependencyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PromptUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PromptUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PromptUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PromptUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PromptUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := prompt.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PromptUpdate) check() error {
	if v, ok := pu.mutation.Stability(); ok {
		if err := prompt.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Prompt.stability": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Maturity(); ok {
		if err := prompt.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Prompt.maturity": %w`, err)}
		}
	}
	if v, ok := pu.mutation.PromptType(); ok {
		if err := prompt.PromptTypeValidator(v); err != nil {
			return &ValidationError{Name: "prompt_type", err: fmt.Errorf(`ent: validator failed for field "Prompt.prompt_type": %w`, err)}
		}
	}
	if pu.mutation.RepositoryCleared() && len(pu.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Prompt.repository"`)
	}
	return nil
}

func (pu *PromptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(prompt.Table, prompt.Columns, sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(prompt.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Namespace(); ok {
		_spec.SetField(prompt.FieldNamespace, field.TypeString, value)
	}
	if value, ok := pu.mutation.Version(); ok {
		_spec.SetField(prompt.FieldVersion, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(prompt.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.Author(); ok {
		_spec.SetField(prompt.FieldAuthor, field.TypeString, value)
	}
	if value, ok := pu.mutation.License(); ok {
		_spec.SetField(prompt.FieldLicense, field.TypeString, value)
	}
	if value, ok := pu.mutation.Homepage(); ok {
		_spec.SetField(prompt.FieldHomepage, field.TypeString, value)
	}
	if pu.mutation.HomepageCleared() {
		_spec.ClearField(prompt.FieldHomepage, field.TypeString)
	}
	if value, ok := pu.mutation.Documentation(); ok {
		_spec.SetField(prompt.FieldDocumentation, field.TypeString, value)
	}
	if pu.mutation.DocumentationCleared() {
		_spec.ClearField(prompt.FieldDocumentation, field.TypeString)
	}
	if value, ok := pu.mutation.Tags(); ok {
		_spec.SetField(prompt.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldTags, value)
		})
	}
	if pu.mutation.TagsCleared() {
		_spec.ClearField(prompt.FieldTags, field.TypeJSON)
	}
	if value, ok := pu.mutation.Categories(); ok {
		_spec.SetField(prompt.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldCategories, value)
		})
	}
	if pu.mutation.CategoriesCleared() {
		_spec.ClearField(prompt.FieldCategories, field.TypeJSON)
	}
	if value, ok := pu.mutation.Keywords(); ok {
		_spec.SetField(prompt.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldKeywords, value)
		})
	}
	if pu.mutation.KeywordsCleared() {
		_spec.ClearField(prompt.FieldKeywords, field.TypeJSON)
	}
	if value, ok := pu.mutation.Stability(); ok {
		_spec.SetField(prompt.FieldStability, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Maturity(); ok {
		_spec.SetField(prompt.FieldMaturity, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.ForgeVersion(); ok {
		_spec.SetField(prompt.FieldForgeVersion, field.TypeString, value)
	}
	if value, ok := pu.mutation.Platforms(); ok {
		_spec.SetField(prompt.FieldPlatforms, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedPlatforms(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldPlatforms, value)
		})
	}
	if pu.mutation.PlatformsCleared() {
		_spec.ClearField(prompt.FieldPlatforms, field.TypeJSON)
	}
	if value, ok := pu.mutation.Spec(); ok {
		_spec.SetField(prompt.FieldSpec, field.TypeString, value)
	}
	if value, ok := pu.mutation.SpecHash(); ok {
		_spec.SetField(prompt.FieldSpecHash, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsInstalled(); ok {
		_spec.SetField(prompt.FieldIsInstalled, field.TypeBool, value)
	}
	if value, ok := pu.mutation.InstallPath(); ok {
		_spec.SetField(prompt.FieldInstallPath, field.TypeString, value)
	}
	if pu.mutation.InstallPathCleared() {
		_spec.ClearField(prompt.FieldInstallPath, field.TypeString)
	}
	if value, ok := pu.mutation.InstalledAt(); ok {
		_spec.SetField(prompt.FieldInstalledAt, field.TypeTime, value)
	}
	if pu.mutation.InstalledAtCleared() {
		_spec.ClearField(prompt.FieldInstalledAt, field.TypeTime)
	}
	if value, ok := pu.mutation.CommitHash(); ok {
		_spec.SetField(prompt.FieldCommitHash, field.TypeString, value)
	}
	if value, ok := pu.mutation.Branch(); ok {
		_spec.SetField(prompt.FieldBranch, field.TypeString, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(prompt.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.TemplatePath(); ok {
		_spec.SetField(prompt.FieldTemplatePath, field.TypeString, value)
	}
	if pu.mutation.TemplatePathCleared() {
		_spec.ClearField(prompt.FieldTemplatePath, field.TypeString)
	}
	if value, ok := pu.mutation.TemplateContent(); ok {
		_spec.SetField(prompt.FieldTemplateContent, field.TypeString, value)
	}
	if pu.mutation.TemplateContentCleared() {
		_spec.ClearField(prompt.FieldTemplateContent, field.TypeString)
	}
	if value, ok := pu.mutation.VariablesSchema(); ok {
		_spec.SetField(prompt.FieldVariablesSchema, field.TypeJSON, value)
	}
	if pu.mutation.VariablesSchemaCleared() {
		_spec.ClearField(prompt.FieldVariablesSchema, field.TypeJSON)
	}
	if value, ok := pu.mutation.PromptType(); ok {
		_spec.SetField(prompt.FieldPromptType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.ContextWindow(); ok {
		_spec.SetField(prompt.FieldContextWindow, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedContextWindow(); ok {
		_spec.AddField(prompt.FieldContextWindow, field.TypeInt, value)
	}
	if pu.mutation.ContextWindowCleared() {
		_spec.ClearField(prompt.FieldContextWindow, field.TypeInt)
	}
	if value, ok := pu.mutation.DefaultVariables(); ok {
		_spec.SetField(prompt.FieldDefaultVariables, field.TypeJSON, value)
	}
	if pu.mutation.DefaultVariablesCleared() {
		_spec.ClearField(prompt.FieldDefaultVariables, field.TypeJSON)
	}
	if value, ok := pu.mutation.RequiredVariables(); ok {
		_spec.SetField(prompt.FieldRequiredVariables, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedRequiredVariables(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldRequiredVariables, value)
		})
	}
	if pu.mutation.RequiredVariablesCleared() {
		_spec.ClearField(prompt.FieldRequiredVariables, field.TypeJSON)
	}
	if value, ok := pu.mutation.Language(); ok {
		_spec.SetField(prompt.FieldLanguage, field.TypeString, value)
	}
	if value, ok := pu.mutation.SupportsStreaming(); ok {
		_spec.SetField(prompt.FieldSupportsStreaming, field.TypeBool, value)
	}
	if value, ok := pu.mutation.ModelPreferences(); ok {
		_spec.SetField(prompt.FieldModelPreferences, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedModelPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldModelPreferences, value)
		})
	}
	if pu.mutation.ModelPreferencesCleared() {
		_spec.ClearField(prompt.FieldModelPreferences, field.TypeJSON)
	}
	if value, ok := pu.mutation.Temperature(); ok {
		_spec.SetField(prompt.FieldTemperature, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedTemperature(); ok {
		_spec.AddField(prompt.FieldTemperature, field.TypeFloat64, value)
	}
	if pu.mutation.TemperatureCleared() {
		_spec.ClearField(prompt.FieldTemperature, field.TypeFloat64)
	}
	if value, ok := pu.mutation.MaxTokens(); ok {
		_spec.SetField(prompt.FieldMaxTokens, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedMaxTokens(); ok {
		_spec.AddField(prompt.FieldMaxTokens, field.TypeInt, value)
	}
	if pu.mutation.MaxTokensCleared() {
		_spec.ClearField(prompt.FieldMaxTokens, field.TypeInt)
	}
	if value, ok := pu.mutation.StopSequences(); ok {
		_spec.SetField(prompt.FieldStopSequences, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedStopSequences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldStopSequences, value)
		})
	}
	if pu.mutation.StopSequencesCleared() {
		_spec.ClearField(prompt.FieldStopSequences, field.TypeJSON)
	}
	if pu.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prompt.RepositoryTable,
			Columns: []string{prompt.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prompt.RepositoryTable,
			Columns: []string{prompt.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prompt.DependenciesTable,
			Columns: []string{prompt.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptdependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !pu.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prompt.DependenciesTable,
			Columns: []string{prompt.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prompt.DependenciesTable,
			Columns: []string{prompt.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PromptUpdateOne is the builder for updating a single Prompt entity.
type PromptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PromptMutation
}

// SetName sets the "name" field.
func (puo *PromptUpdateOne) SetName(s string) *PromptUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableName(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetNamespace sets the "namespace" field.
func (puo *PromptUpdateOne) SetNamespace(s string) *PromptUpdateOne {
	puo.mutation.SetNamespace(s)
	return puo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableNamespace(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetNamespace(*s)
	}
	return puo
}

// SetVersion sets the "version" field.
func (puo *PromptUpdateOne) SetVersion(s string) *PromptUpdateOne {
	puo.mutation.SetVersion(s)
	return puo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableVersion(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetVersion(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PromptUpdateOne) SetDescription(s string) *PromptUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableDescription(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// SetAuthor sets the "author" field.
func (puo *PromptUpdateOne) SetAuthor(s string) *PromptUpdateOne {
	puo.mutation.SetAuthor(s)
	return puo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableAuthor(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetAuthor(*s)
	}
	return puo
}

// SetLicense sets the "license" field.
func (puo *PromptUpdateOne) SetLicense(s string) *PromptUpdateOne {
	puo.mutation.SetLicense(s)
	return puo
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableLicense(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetLicense(*s)
	}
	return puo
}

// SetHomepage sets the "homepage" field.
func (puo *PromptUpdateOne) SetHomepage(s string) *PromptUpdateOne {
	puo.mutation.SetHomepage(s)
	return puo
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableHomepage(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetHomepage(*s)
	}
	return puo
}

// ClearHomepage clears the value of the "homepage" field.
func (puo *PromptUpdateOne) ClearHomepage() *PromptUpdateOne {
	puo.mutation.ClearHomepage()
	return puo
}

// SetDocumentation sets the "documentation" field.
func (puo *PromptUpdateOne) SetDocumentation(s string) *PromptUpdateOne {
	puo.mutation.SetDocumentation(s)
	return puo
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableDocumentation(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetDocumentation(*s)
	}
	return puo
}

// ClearDocumentation clears the value of the "documentation" field.
func (puo *PromptUpdateOne) ClearDocumentation() *PromptUpdateOne {
	puo.mutation.ClearDocumentation()
	return puo
}

// SetTags sets the "tags" field.
func (puo *PromptUpdateOne) SetTags(s []string) *PromptUpdateOne {
	puo.mutation.SetTags(s)
	return puo
}

// AppendTags appends s to the "tags" field.
func (puo *PromptUpdateOne) AppendTags(s []string) *PromptUpdateOne {
	puo.mutation.AppendTags(s)
	return puo
}

// ClearTags clears the value of the "tags" field.
func (puo *PromptUpdateOne) ClearTags() *PromptUpdateOne {
	puo.mutation.ClearTags()
	return puo
}

// SetCategories sets the "categories" field.
func (puo *PromptUpdateOne) SetCategories(s []string) *PromptUpdateOne {
	puo.mutation.SetCategories(s)
	return puo
}

// AppendCategories appends s to the "categories" field.
func (puo *PromptUpdateOne) AppendCategories(s []string) *PromptUpdateOne {
	puo.mutation.AppendCategories(s)
	return puo
}

// ClearCategories clears the value of the "categories" field.
func (puo *PromptUpdateOne) ClearCategories() *PromptUpdateOne {
	puo.mutation.ClearCategories()
	return puo
}

// SetKeywords sets the "keywords" field.
func (puo *PromptUpdateOne) SetKeywords(s []string) *PromptUpdateOne {
	puo.mutation.SetKeywords(s)
	return puo
}

// AppendKeywords appends s to the "keywords" field.
func (puo *PromptUpdateOne) AppendKeywords(s []string) *PromptUpdateOne {
	puo.mutation.AppendKeywords(s)
	return puo
}

// ClearKeywords clears the value of the "keywords" field.
func (puo *PromptUpdateOne) ClearKeywords() *PromptUpdateOne {
	puo.mutation.ClearKeywords()
	return puo
}

// SetStability sets the "stability" field.
func (puo *PromptUpdateOne) SetStability(pr prompt.Stability) *PromptUpdateOne {
	puo.mutation.SetStability(pr)
	return puo
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableStability(pr *prompt.Stability) *PromptUpdateOne {
	if pr != nil {
		puo.SetStability(*pr)
	}
	return puo
}

// SetMaturity sets the "maturity" field.
func (puo *PromptUpdateOne) SetMaturity(pr prompt.Maturity) *PromptUpdateOne {
	puo.mutation.SetMaturity(pr)
	return puo
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableMaturity(pr *prompt.Maturity) *PromptUpdateOne {
	if pr != nil {
		puo.SetMaturity(*pr)
	}
	return puo
}

// SetForgeVersion sets the "forge_version" field.
func (puo *PromptUpdateOne) SetForgeVersion(s string) *PromptUpdateOne {
	puo.mutation.SetForgeVersion(s)
	return puo
}

// SetNillableForgeVersion sets the "forge_version" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableForgeVersion(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetForgeVersion(*s)
	}
	return puo
}

// SetPlatforms sets the "platforms" field.
func (puo *PromptUpdateOne) SetPlatforms(s []string) *PromptUpdateOne {
	puo.mutation.SetPlatforms(s)
	return puo
}

// AppendPlatforms appends s to the "platforms" field.
func (puo *PromptUpdateOne) AppendPlatforms(s []string) *PromptUpdateOne {
	puo.mutation.AppendPlatforms(s)
	return puo
}

// ClearPlatforms clears the value of the "platforms" field.
func (puo *PromptUpdateOne) ClearPlatforms() *PromptUpdateOne {
	puo.mutation.ClearPlatforms()
	return puo
}

// SetSpec sets the "spec" field.
func (puo *PromptUpdateOne) SetSpec(s string) *PromptUpdateOne {
	puo.mutation.SetSpec(s)
	return puo
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableSpec(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetSpec(*s)
	}
	return puo
}

// SetSpecHash sets the "spec_hash" field.
func (puo *PromptUpdateOne) SetSpecHash(s string) *PromptUpdateOne {
	puo.mutation.SetSpecHash(s)
	return puo
}

// SetNillableSpecHash sets the "spec_hash" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableSpecHash(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetSpecHash(*s)
	}
	return puo
}

// SetIsInstalled sets the "is_installed" field.
func (puo *PromptUpdateOne) SetIsInstalled(b bool) *PromptUpdateOne {
	puo.mutation.SetIsInstalled(b)
	return puo
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableIsInstalled(b *bool) *PromptUpdateOne {
	if b != nil {
		puo.SetIsInstalled(*b)
	}
	return puo
}

// SetInstallPath sets the "install_path" field.
func (puo *PromptUpdateOne) SetInstallPath(s string) *PromptUpdateOne {
	puo.mutation.SetInstallPath(s)
	return puo
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableInstallPath(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetInstallPath(*s)
	}
	return puo
}

// ClearInstallPath clears the value of the "install_path" field.
func (puo *PromptUpdateOne) ClearInstallPath() *PromptUpdateOne {
	puo.mutation.ClearInstallPath()
	return puo
}

// SetInstalledAt sets the "installed_at" field.
func (puo *PromptUpdateOne) SetInstalledAt(t time.Time) *PromptUpdateOne {
	puo.mutation.SetInstalledAt(t)
	return puo
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableInstalledAt(t *time.Time) *PromptUpdateOne {
	if t != nil {
		puo.SetInstalledAt(*t)
	}
	return puo
}

// ClearInstalledAt clears the value of the "installed_at" field.
func (puo *PromptUpdateOne) ClearInstalledAt() *PromptUpdateOne {
	puo.mutation.ClearInstalledAt()
	return puo
}

// SetCommitHash sets the "commit_hash" field.
func (puo *PromptUpdateOne) SetCommitHash(s string) *PromptUpdateOne {
	puo.mutation.SetCommitHash(s)
	return puo
}

// SetNillableCommitHash sets the "commit_hash" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableCommitHash(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetCommitHash(*s)
	}
	return puo
}

// SetBranch sets the "branch" field.
func (puo *PromptUpdateOne) SetBranch(s string) *PromptUpdateOne {
	puo.mutation.SetBranch(s)
	return puo
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableBranch(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetBranch(*s)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PromptUpdateOne) SetUpdatedAt(t time.Time) *PromptUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetTemplatePath sets the "template_path" field.
func (puo *PromptUpdateOne) SetTemplatePath(s string) *PromptUpdateOne {
	puo.mutation.SetTemplatePath(s)
	return puo
}

// SetNillableTemplatePath sets the "template_path" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableTemplatePath(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetTemplatePath(*s)
	}
	return puo
}

// ClearTemplatePath clears the value of the "template_path" field.
func (puo *PromptUpdateOne) ClearTemplatePath() *PromptUpdateOne {
	puo.mutation.ClearTemplatePath()
	return puo
}

// SetTemplateContent sets the "template_content" field.
func (puo *PromptUpdateOne) SetTemplateContent(s string) *PromptUpdateOne {
	puo.mutation.SetTemplateContent(s)
	return puo
}

// SetNillableTemplateContent sets the "template_content" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableTemplateContent(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetTemplateContent(*s)
	}
	return puo
}

// ClearTemplateContent clears the value of the "template_content" field.
func (puo *PromptUpdateOne) ClearTemplateContent() *PromptUpdateOne {
	puo.mutation.ClearTemplateContent()
	return puo
}

// SetVariablesSchema sets the "variables_schema" field.
func (puo *PromptUpdateOne) SetVariablesSchema(m map[string]interface{}) *PromptUpdateOne {
	puo.mutation.SetVariablesSchema(m)
	return puo
}

// ClearVariablesSchema clears the value of the "variables_schema" field.
func (puo *PromptUpdateOne) ClearVariablesSchema() *PromptUpdateOne {
	puo.mutation.ClearVariablesSchema()
	return puo
}

// SetPromptType sets the "prompt_type" field.
func (puo *PromptUpdateOne) SetPromptType(pt prompt.PromptType) *PromptUpdateOne {
	puo.mutation.SetPromptType(pt)
	return puo
}

// SetNillablePromptType sets the "prompt_type" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillablePromptType(pt *prompt.PromptType) *PromptUpdateOne {
	if pt != nil {
		puo.SetPromptType(*pt)
	}
	return puo
}

// SetContextWindow sets the "context_window" field.
func (puo *PromptUpdateOne) SetContextWindow(i int) *PromptUpdateOne {
	puo.mutation.ResetContextWindow()
	puo.mutation.SetContextWindow(i)
	return puo
}

// SetNillableContextWindow sets the "context_window" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableContextWindow(i *int) *PromptUpdateOne {
	if i != nil {
		puo.SetContextWindow(*i)
	}
	return puo
}

// AddContextWindow adds i to the "context_window" field.
func (puo *PromptUpdateOne) AddContextWindow(i int) *PromptUpdateOne {
	puo.mutation.AddContextWindow(i)
	return puo
}

// ClearContextWindow clears the value of the "context_window" field.
func (puo *PromptUpdateOne) ClearContextWindow() *PromptUpdateOne {
	puo.mutation.ClearContextWindow()
	return puo
}

// SetDefaultVariables sets the "default_variables" field.
func (puo *PromptUpdateOne) SetDefaultVariables(m map[string]interface{}) *PromptUpdateOne {
	puo.mutation.SetDefaultVariables(m)
	return puo
}

// ClearDefaultVariables clears the value of the "default_variables" field.
func (puo *PromptUpdateOne) ClearDefaultVariables() *PromptUpdateOne {
	puo.mutation.ClearDefaultVariables()
	return puo
}

// SetRequiredVariables sets the "required_variables" field.
func (puo *PromptUpdateOne) SetRequiredVariables(s []string) *PromptUpdateOne {
	puo.mutation.SetRequiredVariables(s)
	return puo
}

// AppendRequiredVariables appends s to the "required_variables" field.
func (puo *PromptUpdateOne) AppendRequiredVariables(s []string) *PromptUpdateOne {
	puo.mutation.AppendRequiredVariables(s)
	return puo
}

// ClearRequiredVariables clears the value of the "required_variables" field.
func (puo *PromptUpdateOne) ClearRequiredVariables() *PromptUpdateOne {
	puo.mutation.ClearRequiredVariables()
	return puo
}

// SetLanguage sets the "language" field.
func (puo *PromptUpdateOne) SetLanguage(s string) *PromptUpdateOne {
	puo.mutation.SetLanguage(s)
	return puo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableLanguage(s *string) *PromptUpdateOne {
	if s != nil {
		puo.SetLanguage(*s)
	}
	return puo
}

// SetSupportsStreaming sets the "supports_streaming" field.
func (puo *PromptUpdateOne) SetSupportsStreaming(b bool) *PromptUpdateOne {
	puo.mutation.SetSupportsStreaming(b)
	return puo
}

// SetNillableSupportsStreaming sets the "supports_streaming" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableSupportsStreaming(b *bool) *PromptUpdateOne {
	if b != nil {
		puo.SetSupportsStreaming(*b)
	}
	return puo
}

// SetModelPreferences sets the "model_preferences" field.
func (puo *PromptUpdateOne) SetModelPreferences(s []string) *PromptUpdateOne {
	puo.mutation.SetModelPreferences(s)
	return puo
}

// AppendModelPreferences appends s to the "model_preferences" field.
func (puo *PromptUpdateOne) AppendModelPreferences(s []string) *PromptUpdateOne {
	puo.mutation.AppendModelPreferences(s)
	return puo
}

// ClearModelPreferences clears the value of the "model_preferences" field.
func (puo *PromptUpdateOne) ClearModelPreferences() *PromptUpdateOne {
	puo.mutation.ClearModelPreferences()
	return puo
}

// SetTemperature sets the "temperature" field.
func (puo *PromptUpdateOne) SetTemperature(f float64) *PromptUpdateOne {
	puo.mutation.ResetTemperature()
	puo.mutation.SetTemperature(f)
	return puo
}

// SetNillableTemperature sets the "temperature" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableTemperature(f *float64) *PromptUpdateOne {
	if f != nil {
		puo.SetTemperature(*f)
	}
	return puo
}

// AddTemperature adds f to the "temperature" field.
func (puo *PromptUpdateOne) AddTemperature(f float64) *PromptUpdateOne {
	puo.mutation.AddTemperature(f)
	return puo
}

// ClearTemperature clears the value of the "temperature" field.
func (puo *PromptUpdateOne) ClearTemperature() *PromptUpdateOne {
	puo.mutation.ClearTemperature()
	return puo
}

// SetMaxTokens sets the "max_tokens" field.
func (puo *PromptUpdateOne) SetMaxTokens(i int) *PromptUpdateOne {
	puo.mutation.ResetMaxTokens()
	puo.mutation.SetMaxTokens(i)
	return puo
}

// SetNillableMaxTokens sets the "max_tokens" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableMaxTokens(i *int) *PromptUpdateOne {
	if i != nil {
		puo.SetMaxTokens(*i)
	}
	return puo
}

// AddMaxTokens adds i to the "max_tokens" field.
func (puo *PromptUpdateOne) AddMaxTokens(i int) *PromptUpdateOne {
	puo.mutation.AddMaxTokens(i)
	return puo
}

// ClearMaxTokens clears the value of the "max_tokens" field.
func (puo *PromptUpdateOne) ClearMaxTokens() *PromptUpdateOne {
	puo.mutation.ClearMaxTokens()
	return puo
}

// SetStopSequences sets the "stop_sequences" field.
func (puo *PromptUpdateOne) SetStopSequences(s []string) *PromptUpdateOne {
	puo.mutation.SetStopSequences(s)
	return puo
}

// AppendStopSequences appends s to the "stop_sequences" field.
func (puo *PromptUpdateOne) AppendStopSequences(s []string) *PromptUpdateOne {
	puo.mutation.AppendStopSequences(s)
	return puo
}

// ClearStopSequences clears the value of the "stop_sequences" field.
func (puo *PromptUpdateOne) ClearStopSequences() *PromptUpdateOne {
	puo.mutation.ClearStopSequences()
	return puo
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (puo *PromptUpdateOne) SetRepositoryID(id string) *PromptUpdateOne {
	puo.mutation.SetRepositoryID(id)
	return puo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (puo *PromptUpdateOne) SetRepository(r *Repository) *PromptUpdateOne {
	return puo.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the PromptDependency entity by IDs.
func (puo *PromptUpdateOne) AddDependencyIDs(ids ...string) *PromptUpdateOne {
	puo.mutation.AddDependencyIDs(ids...)
	return puo
}

// AddDependencies adds the "dependencies" edges to the PromptDependency entity.
func (puo *PromptUpdateOne) AddDependencies(p ...*PromptDependency) *PromptUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddDependencyIDs(ids...)
}

// Mutation returns the PromptMutation object of the builder.
func (puo *PromptUpdateOne) Mutation() *PromptMutation {
	return puo.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (puo *PromptUpdateOne) ClearRepository() *PromptUpdateOne {
	puo.mutation.ClearRepository()
	return puo
}

// ClearDependencies clears all "dependencies" edges to the PromptDependency entity.
func (puo *PromptUpdateOne) ClearDependencies() *PromptUpdateOne {
	puo.mutation.ClearDependencies()
	return puo
}

// RemoveDependencyIDs removes the "dependencies" edge to PromptDependency entities by IDs.
func (puo *PromptUpdateOne) RemoveDependencyIDs(ids ...string) *PromptUpdateOne {
	puo.mutation.RemoveDependencyIDs(ids...)
	return puo
}

// RemoveDependencies removes "dependencies" edges to PromptDependency entities.
func (puo *PromptUpdateOne) RemoveDependencies(p ...*PromptDependency) *PromptUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveDependencyIDs(ids...)
}

// Where appends a list predicates to the PromptUpdate builder.
func (puo *PromptUpdateOne) Where(ps ...predicate.Prompt) *PromptUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PromptUpdateOne) Select(field string, fields ...string) *PromptUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Prompt entity.
func (puo *PromptUpdateOne) Save(ctx context.Context) (*Prompt, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PromptUpdateOne) SaveX(ctx context.Context) *Prompt {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PromptUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PromptUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PromptUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := prompt.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PromptUpdateOne) check() error {
	if v, ok := puo.mutation.Stability(); ok {
		if err := prompt.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Prompt.stability": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Maturity(); ok {
		if err := prompt.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Prompt.maturity": %w`, err)}
		}
	}
	if v, ok := puo.mutation.PromptType(); ok {
		if err := prompt.PromptTypeValidator(v); err != nil {
			return &ValidationError{Name: "prompt_type", err: fmt.Errorf(`ent: validator failed for field "Prompt.prompt_type": %w`, err)}
		}
	}
	if puo.mutation.RepositoryCleared() && len(puo.mutation.RepositoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Prompt.repository"`)
	}
	return nil
}

func (puo *PromptUpdateOne) sqlSave(ctx context.Context) (_node *Prompt, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(prompt.Table, prompt.Columns, sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Prompt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prompt.FieldID)
		for _, f := range fields {
			if !prompt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prompt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(prompt.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Namespace(); ok {
		_spec.SetField(prompt.FieldNamespace, field.TypeString, value)
	}
	if value, ok := puo.mutation.Version(); ok {
		_spec.SetField(prompt.FieldVersion, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(prompt.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.Author(); ok {
		_spec.SetField(prompt.FieldAuthor, field.TypeString, value)
	}
	if value, ok := puo.mutation.License(); ok {
		_spec.SetField(prompt.FieldLicense, field.TypeString, value)
	}
	if value, ok := puo.mutation.Homepage(); ok {
		_spec.SetField(prompt.FieldHomepage, field.TypeString, value)
	}
	if puo.mutation.HomepageCleared() {
		_spec.ClearField(prompt.FieldHomepage, field.TypeString)
	}
	if value, ok := puo.mutation.Documentation(); ok {
		_spec.SetField(prompt.FieldDocumentation, field.TypeString, value)
	}
	if puo.mutation.DocumentationCleared() {
		_spec.ClearField(prompt.FieldDocumentation, field.TypeString)
	}
	if value, ok := puo.mutation.Tags(); ok {
		_spec.SetField(prompt.FieldTags, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldTags, value)
		})
	}
	if puo.mutation.TagsCleared() {
		_spec.ClearField(prompt.FieldTags, field.TypeJSON)
	}
	if value, ok := puo.mutation.Categories(); ok {
		_spec.SetField(prompt.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldCategories, value)
		})
	}
	if puo.mutation.CategoriesCleared() {
		_spec.ClearField(prompt.FieldCategories, field.TypeJSON)
	}
	if value, ok := puo.mutation.Keywords(); ok {
		_spec.SetField(prompt.FieldKeywords, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedKeywords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldKeywords, value)
		})
	}
	if puo.mutation.KeywordsCleared() {
		_spec.ClearField(prompt.FieldKeywords, field.TypeJSON)
	}
	if value, ok := puo.mutation.Stability(); ok {
		_spec.SetField(prompt.FieldStability, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Maturity(); ok {
		_spec.SetField(prompt.FieldMaturity, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.ForgeVersion(); ok {
		_spec.SetField(prompt.FieldForgeVersion, field.TypeString, value)
	}
	if value, ok := puo.mutation.Platforms(); ok {
		_spec.SetField(prompt.FieldPlatforms, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedPlatforms(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldPlatforms, value)
		})
	}
	if puo.mutation.PlatformsCleared() {
		_spec.ClearField(prompt.FieldPlatforms, field.TypeJSON)
	}
	if value, ok := puo.mutation.Spec(); ok {
		_spec.SetField(prompt.FieldSpec, field.TypeString, value)
	}
	if value, ok := puo.mutation.SpecHash(); ok {
		_spec.SetField(prompt.FieldSpecHash, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsInstalled(); ok {
		_spec.SetField(prompt.FieldIsInstalled, field.TypeBool, value)
	}
	if value, ok := puo.mutation.InstallPath(); ok {
		_spec.SetField(prompt.FieldInstallPath, field.TypeString, value)
	}
	if puo.mutation.InstallPathCleared() {
		_spec.ClearField(prompt.FieldInstallPath, field.TypeString)
	}
	if value, ok := puo.mutation.InstalledAt(); ok {
		_spec.SetField(prompt.FieldInstalledAt, field.TypeTime, value)
	}
	if puo.mutation.InstalledAtCleared() {
		_spec.ClearField(prompt.FieldInstalledAt, field.TypeTime)
	}
	if value, ok := puo.mutation.CommitHash(); ok {
		_spec.SetField(prompt.FieldCommitHash, field.TypeString, value)
	}
	if value, ok := puo.mutation.Branch(); ok {
		_spec.SetField(prompt.FieldBranch, field.TypeString, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(prompt.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.TemplatePath(); ok {
		_spec.SetField(prompt.FieldTemplatePath, field.TypeString, value)
	}
	if puo.mutation.TemplatePathCleared() {
		_spec.ClearField(prompt.FieldTemplatePath, field.TypeString)
	}
	if value, ok := puo.mutation.TemplateContent(); ok {
		_spec.SetField(prompt.FieldTemplateContent, field.TypeString, value)
	}
	if puo.mutation.TemplateContentCleared() {
		_spec.ClearField(prompt.FieldTemplateContent, field.TypeString)
	}
	if value, ok := puo.mutation.VariablesSchema(); ok {
		_spec.SetField(prompt.FieldVariablesSchema, field.TypeJSON, value)
	}
	if puo.mutation.VariablesSchemaCleared() {
		_spec.ClearField(prompt.FieldVariablesSchema, field.TypeJSON)
	}
	if value, ok := puo.mutation.PromptType(); ok {
		_spec.SetField(prompt.FieldPromptType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.ContextWindow(); ok {
		_spec.SetField(prompt.FieldContextWindow, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedContextWindow(); ok {
		_spec.AddField(prompt.FieldContextWindow, field.TypeInt, value)
	}
	if puo.mutation.ContextWindowCleared() {
		_spec.ClearField(prompt.FieldContextWindow, field.TypeInt)
	}
	if value, ok := puo.mutation.DefaultVariables(); ok {
		_spec.SetField(prompt.FieldDefaultVariables, field.TypeJSON, value)
	}
	if puo.mutation.DefaultVariablesCleared() {
		_spec.ClearField(prompt.FieldDefaultVariables, field.TypeJSON)
	}
	if value, ok := puo.mutation.RequiredVariables(); ok {
		_spec.SetField(prompt.FieldRequiredVariables, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedRequiredVariables(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldRequiredVariables, value)
		})
	}
	if puo.mutation.RequiredVariablesCleared() {
		_spec.ClearField(prompt.FieldRequiredVariables, field.TypeJSON)
	}
	if value, ok := puo.mutation.Language(); ok {
		_spec.SetField(prompt.FieldLanguage, field.TypeString, value)
	}
	if value, ok := puo.mutation.SupportsStreaming(); ok {
		_spec.SetField(prompt.FieldSupportsStreaming, field.TypeBool, value)
	}
	if value, ok := puo.mutation.ModelPreferences(); ok {
		_spec.SetField(prompt.FieldModelPreferences, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedModelPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldModelPreferences, value)
		})
	}
	if puo.mutation.ModelPreferencesCleared() {
		_spec.ClearField(prompt.FieldModelPreferences, field.TypeJSON)
	}
	if value, ok := puo.mutation.Temperature(); ok {
		_spec.SetField(prompt.FieldTemperature, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedTemperature(); ok {
		_spec.AddField(prompt.FieldTemperature, field.TypeFloat64, value)
	}
	if puo.mutation.TemperatureCleared() {
		_spec.ClearField(prompt.FieldTemperature, field.TypeFloat64)
	}
	if value, ok := puo.mutation.MaxTokens(); ok {
		_spec.SetField(prompt.FieldMaxTokens, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedMaxTokens(); ok {
		_spec.AddField(prompt.FieldMaxTokens, field.TypeInt, value)
	}
	if puo.mutation.MaxTokensCleared() {
		_spec.ClearField(prompt.FieldMaxTokens, field.TypeInt)
	}
	if value, ok := puo.mutation.StopSequences(); ok {
		_spec.SetField(prompt.FieldStopSequences, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedStopSequences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, prompt.FieldStopSequences, value)
		})
	}
	if puo.mutation.StopSequencesCleared() {
		_spec.ClearField(prompt.FieldStopSequences, field.TypeJSON)
	}
	if puo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prompt.RepositoryTable,
			Columns: []string{prompt.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prompt.RepositoryTable,
			Columns: []string{prompt.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prompt.DependenciesTable,
			Columns: []string{prompt.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptdependency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !puo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prompt.DependenciesTable,
			Columns: []string{prompt.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prompt.DependenciesTable,
			Columns: []string{prompt.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Prompt{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
