// Code generated by ent, DO NOT EDIT.

package tooldependency

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/denkhaus/agentforge/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldContainsFold(FieldID, id))
}

// DependencyName applies equality check predicate on the "dependency_name" field. It's identical to DependencyNameEQ.
func DependencyName(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldDependencyName, v))
}

// DependencyVersion applies equality check predicate on the "dependency_version" field. It's identical to DependencyVersionEQ.
func DependencyVersion(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldDependencyVersion, v))
}

// VersionRange applies equality check predicate on the "version_range" field. It's identical to VersionRangeEQ.
func VersionRange(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldVersionRange, v))
}

// IsRequired applies equality check predicate on the "is_required" field. It's identical to IsRequiredEQ.
func IsRequired(v bool) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldIsRequired, v))
}

// Condition applies equality check predicate on the "condition" field. It's identical to ConditionEQ.
func Condition(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldCondition, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldCreatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNotIn(FieldType, vs...))
}

// DependencyNameEQ applies the EQ predicate on the "dependency_name" field.
func DependencyNameEQ(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldDependencyName, v))
}

// DependencyNameNEQ applies the NEQ predicate on the "dependency_name" field.
func DependencyNameNEQ(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNEQ(FieldDependencyName, v))
}

// DependencyNameIn applies the In predicate on the "dependency_name" field.
func DependencyNameIn(vs ...string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldIn(FieldDependencyName, vs...))
}

// DependencyNameNotIn applies the NotIn predicate on the "dependency_name" field.
func DependencyNameNotIn(vs ...string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNotIn(FieldDependencyName, vs...))
}

// DependencyNameGT applies the GT predicate on the "dependency_name" field.
func DependencyNameGT(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGT(FieldDependencyName, v))
}

// DependencyNameGTE applies the GTE predicate on the "dependency_name" field.
func DependencyNameGTE(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGTE(FieldDependencyName, v))
}

// DependencyNameLT applies the LT predicate on the "dependency_name" field.
func DependencyNameLT(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLT(FieldDependencyName, v))
}

// DependencyNameLTE applies the LTE predicate on the "dependency_name" field.
func DependencyNameLTE(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLTE(FieldDependencyName, v))
}

// DependencyNameContains applies the Contains predicate on the "dependency_name" field.
func DependencyNameContains(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldContains(FieldDependencyName, v))
}

// DependencyNameHasPrefix applies the HasPrefix predicate on the "dependency_name" field.
func DependencyNameHasPrefix(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldHasPrefix(FieldDependencyName, v))
}

// DependencyNameHasSuffix applies the HasSuffix predicate on the "dependency_name" field.
func DependencyNameHasSuffix(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldHasSuffix(FieldDependencyName, v))
}

// DependencyNameEqualFold applies the EqualFold predicate on the "dependency_name" field.
func DependencyNameEqualFold(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEqualFold(FieldDependencyName, v))
}

// DependencyNameContainsFold applies the ContainsFold predicate on the "dependency_name" field.
func DependencyNameContainsFold(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldContainsFold(FieldDependencyName, v))
}

// DependencyVersionEQ applies the EQ predicate on the "dependency_version" field.
func DependencyVersionEQ(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldDependencyVersion, v))
}

// DependencyVersionNEQ applies the NEQ predicate on the "dependency_version" field.
func DependencyVersionNEQ(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNEQ(FieldDependencyVersion, v))
}

// DependencyVersionIn applies the In predicate on the "dependency_version" field.
func DependencyVersionIn(vs ...string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldIn(FieldDependencyVersion, vs...))
}

// DependencyVersionNotIn applies the NotIn predicate on the "dependency_version" field.
func DependencyVersionNotIn(vs ...string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNotIn(FieldDependencyVersion, vs...))
}

// DependencyVersionGT applies the GT predicate on the "dependency_version" field.
func DependencyVersionGT(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGT(FieldDependencyVersion, v))
}

// DependencyVersionGTE applies the GTE predicate on the "dependency_version" field.
func DependencyVersionGTE(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGTE(FieldDependencyVersion, v))
}

// DependencyVersionLT applies the LT predicate on the "dependency_version" field.
func DependencyVersionLT(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLT(FieldDependencyVersion, v))
}

// DependencyVersionLTE applies the LTE predicate on the "dependency_version" field.
func DependencyVersionLTE(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLTE(FieldDependencyVersion, v))
}

// DependencyVersionContains applies the Contains predicate on the "dependency_version" field.
func DependencyVersionContains(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldContains(FieldDependencyVersion, v))
}

// DependencyVersionHasPrefix applies the HasPrefix predicate on the "dependency_version" field.
func DependencyVersionHasPrefix(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldHasPrefix(FieldDependencyVersion, v))
}

// DependencyVersionHasSuffix applies the HasSuffix predicate on the "dependency_version" field.
func DependencyVersionHasSuffix(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldHasSuffix(FieldDependencyVersion, v))
}

// DependencyVersionEqualFold applies the EqualFold predicate on the "dependency_version" field.
func DependencyVersionEqualFold(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEqualFold(FieldDependencyVersion, v))
}

// DependencyVersionContainsFold applies the ContainsFold predicate on the "dependency_version" field.
func DependencyVersionContainsFold(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldContainsFold(FieldDependencyVersion, v))
}

// VersionRangeEQ applies the EQ predicate on the "version_range" field.
func VersionRangeEQ(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldVersionRange, v))
}

// VersionRangeNEQ applies the NEQ predicate on the "version_range" field.
func VersionRangeNEQ(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNEQ(FieldVersionRange, v))
}

// VersionRangeIn applies the In predicate on the "version_range" field.
func VersionRangeIn(vs ...string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldIn(FieldVersionRange, vs...))
}

// VersionRangeNotIn applies the NotIn predicate on the "version_range" field.
func VersionRangeNotIn(vs ...string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNotIn(FieldVersionRange, vs...))
}

// VersionRangeGT applies the GT predicate on the "version_range" field.
func VersionRangeGT(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGT(FieldVersionRange, v))
}

// VersionRangeGTE applies the GTE predicate on the "version_range" field.
func VersionRangeGTE(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGTE(FieldVersionRange, v))
}

// VersionRangeLT applies the LT predicate on the "version_range" field.
func VersionRangeLT(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLT(FieldVersionRange, v))
}

// VersionRangeLTE applies the LTE predicate on the "version_range" field.
func VersionRangeLTE(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLTE(FieldVersionRange, v))
}

// VersionRangeContains applies the Contains predicate on the "version_range" field.
func VersionRangeContains(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldContains(FieldVersionRange, v))
}

// VersionRangeHasPrefix applies the HasPrefix predicate on the "version_range" field.
func VersionRangeHasPrefix(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldHasPrefix(FieldVersionRange, v))
}

// VersionRangeHasSuffix applies the HasSuffix predicate on the "version_range" field.
func VersionRangeHasSuffix(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldHasSuffix(FieldVersionRange, v))
}

// VersionRangeEqualFold applies the EqualFold predicate on the "version_range" field.
func VersionRangeEqualFold(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEqualFold(FieldVersionRange, v))
}

// VersionRangeContainsFold applies the ContainsFold predicate on the "version_range" field.
func VersionRangeContainsFold(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldContainsFold(FieldVersionRange, v))
}

// IsRequiredEQ applies the EQ predicate on the "is_required" field.
func IsRequiredEQ(v bool) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldIsRequired, v))
}

// IsRequiredNEQ applies the NEQ predicate on the "is_required" field.
func IsRequiredNEQ(v bool) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNEQ(FieldIsRequired, v))
}

// ConditionEQ applies the EQ predicate on the "condition" field.
func ConditionEQ(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldCondition, v))
}

// ConditionNEQ applies the NEQ predicate on the "condition" field.
func ConditionNEQ(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNEQ(FieldCondition, v))
}

// ConditionIn applies the In predicate on the "condition" field.
func ConditionIn(vs ...string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldIn(FieldCondition, vs...))
}

// ConditionNotIn applies the NotIn predicate on the "condition" field.
func ConditionNotIn(vs ...string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNotIn(FieldCondition, vs...))
}

// ConditionGT applies the GT predicate on the "condition" field.
func ConditionGT(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGT(FieldCondition, v))
}

// ConditionGTE applies the GTE predicate on the "condition" field.
func ConditionGTE(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGTE(FieldCondition, v))
}

// ConditionLT applies the LT predicate on the "condition" field.
func ConditionLT(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLT(FieldCondition, v))
}

// ConditionLTE applies the LTE predicate on the "condition" field.
func ConditionLTE(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLTE(FieldCondition, v))
}

// ConditionContains applies the Contains predicate on the "condition" field.
func ConditionContains(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldContains(FieldCondition, v))
}

// ConditionHasPrefix applies the HasPrefix predicate on the "condition" field.
func ConditionHasPrefix(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldHasPrefix(FieldCondition, v))
}

// ConditionHasSuffix applies the HasSuffix predicate on the "condition" field.
func ConditionHasSuffix(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldHasSuffix(FieldCondition, v))
}

// ConditionIsNil applies the IsNil predicate on the "condition" field.
func ConditionIsNil() predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldIsNull(FieldCondition))
}

// ConditionNotNil applies the NotNil predicate on the "condition" field.
func ConditionNotNil() predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNotNull(FieldCondition))
}

// ConditionEqualFold applies the EqualFold predicate on the "condition" field.
func ConditionEqualFold(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEqualFold(FieldCondition, v))
}

// ConditionContainsFold applies the ContainsFold predicate on the "condition" field.
func ConditionContainsFold(v string) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldContainsFold(FieldCondition, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ToolDependency {
	return predicate.ToolDependency(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTool applies the HasEdge predicate on the "tool" edge.
func HasTool() predicate.ToolDependency {
	return predicate.ToolDependency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToolTable, ToolColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToolWith applies the HasEdge predicate on the "tool" edge with a given conditions (other predicates).
func HasToolWith(preds ...predicate.Tool) predicate.ToolDependency {
	return predicate.ToolDependency(func(s *sql.Selector) {
		step := newToolStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ToolDependency) predicate.ToolDependency {
	return predicate.ToolDependency(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ToolDependency) predicate.ToolDependency {
	return predicate.ToolDependency(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ToolDependency) predicate.ToolDependency {
	return predicate.ToolDependency(sql.NotPredicates(p))
}
