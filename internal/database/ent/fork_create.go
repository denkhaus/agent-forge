// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/fork"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
)

// ForkCreate is the builder for creating a Fork entity.
type ForkCreate struct {
	config
	mutation *ForkMutation
	hooks    []Hook
}

// SetForkURL sets the "fork_url" field.
func (fc *ForkCreate) SetForkURL(s string) *ForkCreate {
	fc.mutation.SetForkURL(s)
	return fc
}

// SetForkOwner sets the "fork_owner" field.
func (fc *ForkCreate) SetForkOwner(s string) *ForkCreate {
	fc.mutation.SetForkOwner(s)
	return fc
}

// SetForkName sets the "fork_name" field.
func (fc *ForkCreate) SetForkName(s string) *ForkCreate {
	fc.mutation.SetForkName(s)
	return fc
}

// SetIsActive sets the "is_active" field.
func (fc *ForkCreate) SetIsActive(b bool) *ForkCreate {
	fc.mutation.SetIsActive(b)
	return fc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (fc *ForkCreate) SetNillableIsActive(b *bool) *ForkCreate {
	if b != nil {
		fc.SetIsActive(*b)
	}
	return fc
}

// SetLastSync sets the "last_sync" field.
func (fc *ForkCreate) SetLastSync(t time.Time) *ForkCreate {
	fc.mutation.SetLastSync(t)
	return fc
}

// SetNillableLastSync sets the "last_sync" field if the given value is not nil.
func (fc *ForkCreate) SetNillableLastSync(t *time.Time) *ForkCreate {
	if t != nil {
		fc.SetLastSync(*t)
	}
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *ForkCreate) SetCreatedAt(t time.Time) *ForkCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *ForkCreate) SetNillableCreatedAt(t *time.Time) *ForkCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *ForkCreate) SetUpdatedAt(t time.Time) *ForkCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *ForkCreate) SetNillableUpdatedAt(t *time.Time) *ForkCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *ForkCreate) SetID(s string) *ForkCreate {
	fc.mutation.SetID(s)
	return fc
}

// SetOriginalRepoID sets the "original_repo" edge to the Repository entity by ID.
func (fc *ForkCreate) SetOriginalRepoID(id string) *ForkCreate {
	fc.mutation.SetOriginalRepoID(id)
	return fc
}

// SetOriginalRepo sets the "original_repo" edge to the Repository entity.
func (fc *ForkCreate) SetOriginalRepo(r *Repository) *ForkCreate {
	return fc.SetOriginalRepoID(r.ID)
}

// Mutation returns the ForkMutation object of the builder.
func (fc *ForkCreate) Mutation() *ForkMutation {
	return fc.mutation
}

// Save creates the Fork in the database.
func (fc *ForkCreate) Save(ctx context.Context) (*Fork, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *ForkCreate) SaveX(ctx context.Context) *Fork {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *ForkCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *ForkCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *ForkCreate) defaults() {
	if _, ok := fc.mutation.IsActive(); !ok {
		v := fork.DefaultIsActive
		fc.mutation.SetIsActive(v)
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := fork.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := fork.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *ForkCreate) check() error {
	if _, ok := fc.mutation.ForkURL(); !ok {
		return &ValidationError{Name: "fork_url", err: errors.New(`ent: missing required field "Fork.fork_url"`)}
	}
	if _, ok := fc.mutation.ForkOwner(); !ok {
		return &ValidationError{Name: "fork_owner", err: errors.New(`ent: missing required field "Fork.fork_owner"`)}
	}
	if _, ok := fc.mutation.ForkName(); !ok {
		return &ValidationError{Name: "fork_name", err: errors.New(`ent: missing required field "Fork.fork_name"`)}
	}
	if _, ok := fc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Fork.is_active"`)}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Fork.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Fork.updated_at"`)}
	}
	if len(fc.mutation.OriginalRepoIDs()) == 0 {
		return &ValidationError{Name: "original_repo", err: errors.New(`ent: missing required edge "Fork.original_repo"`)}
	}
	return nil
}

func (fc *ForkCreate) sqlSave(ctx context.Context) (*Fork, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Fork.ID type: %T", _spec.ID.Value)
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *ForkCreate) createSpec() (*Fork, *sqlgraph.CreateSpec) {
	var (
		_node = &Fork{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(fork.Table, sqlgraph.NewFieldSpec(fork.FieldID, field.TypeString))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.ForkURL(); ok {
		_spec.SetField(fork.FieldForkURL, field.TypeString, value)
		_node.ForkURL = value
	}
	if value, ok := fc.mutation.ForkOwner(); ok {
		_spec.SetField(fork.FieldForkOwner, field.TypeString, value)
		_node.ForkOwner = value
	}
	if value, ok := fc.mutation.ForkName(); ok {
		_spec.SetField(fork.FieldForkName, field.TypeString, value)
		_node.ForkName = value
	}
	if value, ok := fc.mutation.IsActive(); ok {
		_spec.SetField(fork.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := fc.mutation.LastSync(); ok {
		_spec.SetField(fork.FieldLastSync, field.TypeTime, value)
		_node.LastSync = &value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(fork.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(fork.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fc.mutation.OriginalRepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fork.OriginalRepoTable,
			Columns: []string{fork.OriginalRepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_forks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ForkCreateBulk is the builder for creating many Fork entities in bulk.
type ForkCreateBulk struct {
	config
	err      error
	builders []*ForkCreate
}

// Save creates the Fork entities in the database.
func (fcb *ForkCreateBulk) Save(ctx context.Context) ([]*Fork, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fork, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ForkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *ForkCreateBulk) SaveX(ctx context.Context) []*Fork {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *ForkCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *ForkCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
