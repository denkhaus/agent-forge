// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/agentforge/internal/database/ent/prompt"
	"github.com/denkhaus/agentforge/internal/database/ent/promptdependency"
	"github.com/denkhaus/agentforge/internal/database/ent/repository"
)

// PromptCreate is the builder for creating a Prompt entity.
type PromptCreate struct {
	config
	mutation *PromptMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PromptCreate) SetName(s string) *PromptCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNamespace sets the "namespace" field.
func (pc *PromptCreate) SetNamespace(s string) *PromptCreate {
	pc.mutation.SetNamespace(s)
	return pc
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (pc *PromptCreate) SetNillableNamespace(s *string) *PromptCreate {
	if s != nil {
		pc.SetNamespace(*s)
	}
	return pc
}

// SetVersion sets the "version" field.
func (pc *PromptCreate) SetVersion(s string) *PromptCreate {
	pc.mutation.SetVersion(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PromptCreate) SetDescription(s string) *PromptCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetAuthor sets the "author" field.
func (pc *PromptCreate) SetAuthor(s string) *PromptCreate {
	pc.mutation.SetAuthor(s)
	return pc
}

// SetLicense sets the "license" field.
func (pc *PromptCreate) SetLicense(s string) *PromptCreate {
	pc.mutation.SetLicense(s)
	return pc
}

// SetHomepage sets the "homepage" field.
func (pc *PromptCreate) SetHomepage(s string) *PromptCreate {
	pc.mutation.SetHomepage(s)
	return pc
}

// SetNillableHomepage sets the "homepage" field if the given value is not nil.
func (pc *PromptCreate) SetNillableHomepage(s *string) *PromptCreate {
	if s != nil {
		pc.SetHomepage(*s)
	}
	return pc
}

// SetDocumentation sets the "documentation" field.
func (pc *PromptCreate) SetDocumentation(s string) *PromptCreate {
	pc.mutation.SetDocumentation(s)
	return pc
}

// SetNillableDocumentation sets the "documentation" field if the given value is not nil.
func (pc *PromptCreate) SetNillableDocumentation(s *string) *PromptCreate {
	if s != nil {
		pc.SetDocumentation(*s)
	}
	return pc
}

// SetTags sets the "tags" field.
func (pc *PromptCreate) SetTags(s []string) *PromptCreate {
	pc.mutation.SetTags(s)
	return pc
}

// SetCategories sets the "categories" field.
func (pc *PromptCreate) SetCategories(s []string) *PromptCreate {
	pc.mutation.SetCategories(s)
	return pc
}

// SetKeywords sets the "keywords" field.
func (pc *PromptCreate) SetKeywords(s []string) *PromptCreate {
	pc.mutation.SetKeywords(s)
	return pc
}

// SetStability sets the "stability" field.
func (pc *PromptCreate) SetStability(pr prompt.Stability) *PromptCreate {
	pc.mutation.SetStability(pr)
	return pc
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (pc *PromptCreate) SetNillableStability(pr *prompt.Stability) *PromptCreate {
	if pr != nil {
		pc.SetStability(*pr)
	}
	return pc
}

// SetMaturity sets the "maturity" field.
func (pc *PromptCreate) SetMaturity(pr prompt.Maturity) *PromptCreate {
	pc.mutation.SetMaturity(pr)
	return pc
}

// SetNillableMaturity sets the "maturity" field if the given value is not nil.
func (pc *PromptCreate) SetNillableMaturity(pr *prompt.Maturity) *PromptCreate {
	if pr != nil {
		pc.SetMaturity(*pr)
	}
	return pc
}

// SetForgeVersion sets the "forge_version" field.
func (pc *PromptCreate) SetForgeVersion(s string) *PromptCreate {
	pc.mutation.SetForgeVersion(s)
	return pc
}

// SetPlatforms sets the "platforms" field.
func (pc *PromptCreate) SetPlatforms(s []string) *PromptCreate {
	pc.mutation.SetPlatforms(s)
	return pc
}

// SetSpec sets the "spec" field.
func (pc *PromptCreate) SetSpec(s string) *PromptCreate {
	pc.mutation.SetSpec(s)
	return pc
}

// SetSpecHash sets the "spec_hash" field.
func (pc *PromptCreate) SetSpecHash(s string) *PromptCreate {
	pc.mutation.SetSpecHash(s)
	return pc
}

// SetIsInstalled sets the "is_installed" field.
func (pc *PromptCreate) SetIsInstalled(b bool) *PromptCreate {
	pc.mutation.SetIsInstalled(b)
	return pc
}

// SetNillableIsInstalled sets the "is_installed" field if the given value is not nil.
func (pc *PromptCreate) SetNillableIsInstalled(b *bool) *PromptCreate {
	if b != nil {
		pc.SetIsInstalled(*b)
	}
	return pc
}

// SetInstallPath sets the "install_path" field.
func (pc *PromptCreate) SetInstallPath(s string) *PromptCreate {
	pc.mutation.SetInstallPath(s)
	return pc
}

// SetNillableInstallPath sets the "install_path" field if the given value is not nil.
func (pc *PromptCreate) SetNillableInstallPath(s *string) *PromptCreate {
	if s != nil {
		pc.SetInstallPath(*s)
	}
	return pc
}

// SetInstalledAt sets the "installed_at" field.
func (pc *PromptCreate) SetInstalledAt(t time.Time) *PromptCreate {
	pc.mutation.SetInstalledAt(t)
	return pc
}

// SetNillableInstalledAt sets the "installed_at" field if the given value is not nil.
func (pc *PromptCreate) SetNillableInstalledAt(t *time.Time) *PromptCreate {
	if t != nil {
		pc.SetInstalledAt(*t)
	}
	return pc
}

// SetCommitHash sets the "commit_hash" field.
func (pc *PromptCreate) SetCommitHash(s string) *PromptCreate {
	pc.mutation.SetCommitHash(s)
	return pc
}

// SetBranch sets the "branch" field.
func (pc *PromptCreate) SetBranch(s string) *PromptCreate {
	pc.mutation.SetBranch(s)
	return pc
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (pc *PromptCreate) SetNillableBranch(s *string) *PromptCreate {
	if s != nil {
		pc.SetBranch(*s)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PromptCreate) SetCreatedAt(t time.Time) *PromptCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PromptCreate) SetNillableCreatedAt(t *time.Time) *PromptCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PromptCreate) SetUpdatedAt(t time.Time) *PromptCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PromptCreate) SetNillableUpdatedAt(t *time.Time) *PromptCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetTemplatePath sets the "template_path" field.
func (pc *PromptCreate) SetTemplatePath(s string) *PromptCreate {
	pc.mutation.SetTemplatePath(s)
	return pc
}

// SetNillableTemplatePath sets the "template_path" field if the given value is not nil.
func (pc *PromptCreate) SetNillableTemplatePath(s *string) *PromptCreate {
	if s != nil {
		pc.SetTemplatePath(*s)
	}
	return pc
}

// SetTemplateContent sets the "template_content" field.
func (pc *PromptCreate) SetTemplateContent(s string) *PromptCreate {
	pc.mutation.SetTemplateContent(s)
	return pc
}

// SetNillableTemplateContent sets the "template_content" field if the given value is not nil.
func (pc *PromptCreate) SetNillableTemplateContent(s *string) *PromptCreate {
	if s != nil {
		pc.SetTemplateContent(*s)
	}
	return pc
}

// SetVariablesSchema sets the "variables_schema" field.
func (pc *PromptCreate) SetVariablesSchema(m map[string]interface{}) *PromptCreate {
	pc.mutation.SetVariablesSchema(m)
	return pc
}

// SetPromptType sets the "prompt_type" field.
func (pc *PromptCreate) SetPromptType(pt prompt.PromptType) *PromptCreate {
	pc.mutation.SetPromptType(pt)
	return pc
}

// SetNillablePromptType sets the "prompt_type" field if the given value is not nil.
func (pc *PromptCreate) SetNillablePromptType(pt *prompt.PromptType) *PromptCreate {
	if pt != nil {
		pc.SetPromptType(*pt)
	}
	return pc
}

// SetContextWindow sets the "context_window" field.
func (pc *PromptCreate) SetContextWindow(i int) *PromptCreate {
	pc.mutation.SetContextWindow(i)
	return pc
}

// SetNillableContextWindow sets the "context_window" field if the given value is not nil.
func (pc *PromptCreate) SetNillableContextWindow(i *int) *PromptCreate {
	if i != nil {
		pc.SetContextWindow(*i)
	}
	return pc
}

// SetDefaultVariables sets the "default_variables" field.
func (pc *PromptCreate) SetDefaultVariables(m map[string]interface{}) *PromptCreate {
	pc.mutation.SetDefaultVariables(m)
	return pc
}

// SetRequiredVariables sets the "required_variables" field.
func (pc *PromptCreate) SetRequiredVariables(s []string) *PromptCreate {
	pc.mutation.SetRequiredVariables(s)
	return pc
}

// SetLanguage sets the "language" field.
func (pc *PromptCreate) SetLanguage(s string) *PromptCreate {
	pc.mutation.SetLanguage(s)
	return pc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (pc *PromptCreate) SetNillableLanguage(s *string) *PromptCreate {
	if s != nil {
		pc.SetLanguage(*s)
	}
	return pc
}

// SetSupportsStreaming sets the "supports_streaming" field.
func (pc *PromptCreate) SetSupportsStreaming(b bool) *PromptCreate {
	pc.mutation.SetSupportsStreaming(b)
	return pc
}

// SetNillableSupportsStreaming sets the "supports_streaming" field if the given value is not nil.
func (pc *PromptCreate) SetNillableSupportsStreaming(b *bool) *PromptCreate {
	if b != nil {
		pc.SetSupportsStreaming(*b)
	}
	return pc
}

// SetModelPreferences sets the "model_preferences" field.
func (pc *PromptCreate) SetModelPreferences(s []string) *PromptCreate {
	pc.mutation.SetModelPreferences(s)
	return pc
}

// SetTemperature sets the "temperature" field.
func (pc *PromptCreate) SetTemperature(f float64) *PromptCreate {
	pc.mutation.SetTemperature(f)
	return pc
}

// SetNillableTemperature sets the "temperature" field if the given value is not nil.
func (pc *PromptCreate) SetNillableTemperature(f *float64) *PromptCreate {
	if f != nil {
		pc.SetTemperature(*f)
	}
	return pc
}

// SetMaxTokens sets the "max_tokens" field.
func (pc *PromptCreate) SetMaxTokens(i int) *PromptCreate {
	pc.mutation.SetMaxTokens(i)
	return pc
}

// SetNillableMaxTokens sets the "max_tokens" field if the given value is not nil.
func (pc *PromptCreate) SetNillableMaxTokens(i *int) *PromptCreate {
	if i != nil {
		pc.SetMaxTokens(*i)
	}
	return pc
}

// SetStopSequences sets the "stop_sequences" field.
func (pc *PromptCreate) SetStopSequences(s []string) *PromptCreate {
	pc.mutation.SetStopSequences(s)
	return pc
}

// SetID sets the "id" field.
func (pc *PromptCreate) SetID(s string) *PromptCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (pc *PromptCreate) SetRepositoryID(id string) *PromptCreate {
	pc.mutation.SetRepositoryID(id)
	return pc
}

// SetRepository sets the "repository" edge to the Repository entity.
func (pc *PromptCreate) SetRepository(r *Repository) *PromptCreate {
	return pc.SetRepositoryID(r.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the PromptDependency entity by IDs.
func (pc *PromptCreate) AddDependencyIDs(ids ...string) *PromptCreate {
	pc.mutation.AddDependencyIDs(ids...)
	return pc
}

// AddDependencies adds the "dependencies" edges to the PromptDependency entity.
func (pc *PromptCreate) AddDependencies(p ...*PromptDependency) *PromptCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddDependencyIDs(ids...)
}

// Mutation returns the PromptMutation object of the builder.
func (pc *PromptCreate) Mutation() *PromptMutation {
	return pc.mutation
}

// Save creates the Prompt in the database.
func (pc *PromptCreate) Save(ctx context.Context) (*Prompt, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PromptCreate) SaveX(ctx context.Context) *Prompt {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PromptCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PromptCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PromptCreate) defaults() {
	if _, ok := pc.mutation.Namespace(); !ok {
		v := prompt.DefaultNamespace
		pc.mutation.SetNamespace(v)
	}
	if _, ok := pc.mutation.Stability(); !ok {
		v := prompt.DefaultStability
		pc.mutation.SetStability(v)
	}
	if _, ok := pc.mutation.Maturity(); !ok {
		v := prompt.DefaultMaturity
		pc.mutation.SetMaturity(v)
	}
	if _, ok := pc.mutation.IsInstalled(); !ok {
		v := prompt.DefaultIsInstalled
		pc.mutation.SetIsInstalled(v)
	}
	if _, ok := pc.mutation.Branch(); !ok {
		v := prompt.DefaultBranch
		pc.mutation.SetBranch(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := prompt.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := prompt.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.PromptType(); !ok {
		v := prompt.DefaultPromptType
		pc.mutation.SetPromptType(v)
	}
	if _, ok := pc.mutation.Language(); !ok {
		v := prompt.DefaultLanguage
		pc.mutation.SetLanguage(v)
	}
	if _, ok := pc.mutation.SupportsStreaming(); !ok {
		v := prompt.DefaultSupportsStreaming
		pc.mutation.SetSupportsStreaming(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PromptCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Prompt.name"`)}
	}
	if _, ok := pc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "Prompt.namespace"`)}
	}
	if _, ok := pc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Prompt.version"`)}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Prompt.description"`)}
	}
	if _, ok := pc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Prompt.author"`)}
	}
	if _, ok := pc.mutation.License(); !ok {
		return &ValidationError{Name: "license", err: errors.New(`ent: missing required field "Prompt.license"`)}
	}
	if _, ok := pc.mutation.Stability(); !ok {
		return &ValidationError{Name: "stability", err: errors.New(`ent: missing required field "Prompt.stability"`)}
	}
	if v, ok := pc.mutation.Stability(); ok {
		if err := prompt.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Prompt.stability": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Maturity(); !ok {
		return &ValidationError{Name: "maturity", err: errors.New(`ent: missing required field "Prompt.maturity"`)}
	}
	if v, ok := pc.mutation.Maturity(); ok {
		if err := prompt.MaturityValidator(v); err != nil {
			return &ValidationError{Name: "maturity", err: fmt.Errorf(`ent: validator failed for field "Prompt.maturity": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ForgeVersion(); !ok {
		return &ValidationError{Name: "forge_version", err: errors.New(`ent: missing required field "Prompt.forge_version"`)}
	}
	if _, ok := pc.mutation.Spec(); !ok {
		return &ValidationError{Name: "spec", err: errors.New(`ent: missing required field "Prompt.spec"`)}
	}
	if _, ok := pc.mutation.SpecHash(); !ok {
		return &ValidationError{Name: "spec_hash", err: errors.New(`ent: missing required field "Prompt.spec_hash"`)}
	}
	if _, ok := pc.mutation.IsInstalled(); !ok {
		return &ValidationError{Name: "is_installed", err: errors.New(`ent: missing required field "Prompt.is_installed"`)}
	}
	if _, ok := pc.mutation.CommitHash(); !ok {
		return &ValidationError{Name: "commit_hash", err: errors.New(`ent: missing required field "Prompt.commit_hash"`)}
	}
	if _, ok := pc.mutation.Branch(); !ok {
		return &ValidationError{Name: "branch", err: errors.New(`ent: missing required field "Prompt.branch"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Prompt.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Prompt.updated_at"`)}
	}
	if _, ok := pc.mutation.PromptType(); !ok {
		return &ValidationError{Name: "prompt_type", err: errors.New(`ent: missing required field "Prompt.prompt_type"`)}
	}
	if v, ok := pc.mutation.PromptType(); ok {
		if err := prompt.PromptTypeValidator(v); err != nil {
			return &ValidationError{Name: "prompt_type", err: fmt.Errorf(`ent: validator failed for field "Prompt.prompt_type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Prompt.language"`)}
	}
	if _, ok := pc.mutation.SupportsStreaming(); !ok {
		return &ValidationError{Name: "supports_streaming", err: errors.New(`ent: missing required field "Prompt.supports_streaming"`)}
	}
	if len(pc.mutation.RepositoryIDs()) == 0 {
		return &ValidationError{Name: "repository", err: errors.New(`ent: missing required edge "Prompt.repository"`)}
	}
	return nil
}

func (pc *PromptCreate) sqlSave(ctx context.Context) (*Prompt, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Prompt.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PromptCreate) createSpec() (*Prompt, *sqlgraph.CreateSpec) {
	var (
		_node = &Prompt{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(prompt.Table, sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(prompt.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Namespace(); ok {
		_spec.SetField(prompt.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := pc.mutation.Version(); ok {
		_spec.SetField(prompt.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(prompt.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Author(); ok {
		_spec.SetField(prompt.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := pc.mutation.License(); ok {
		_spec.SetField(prompt.FieldLicense, field.TypeString, value)
		_node.License = value
	}
	if value, ok := pc.mutation.Homepage(); ok {
		_spec.SetField(prompt.FieldHomepage, field.TypeString, value)
		_node.Homepage = &value
	}
	if value, ok := pc.mutation.Documentation(); ok {
		_spec.SetField(prompt.FieldDocumentation, field.TypeString, value)
		_node.Documentation = &value
	}
	if value, ok := pc.mutation.Tags(); ok {
		_spec.SetField(prompt.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := pc.mutation.Categories(); ok {
		_spec.SetField(prompt.FieldCategories, field.TypeJSON, value)
		_node.Categories = value
	}
	if value, ok := pc.mutation.Keywords(); ok {
		_spec.SetField(prompt.FieldKeywords, field.TypeJSON, value)
		_node.Keywords = value
	}
	if value, ok := pc.mutation.Stability(); ok {
		_spec.SetField(prompt.FieldStability, field.TypeEnum, value)
		_node.Stability = value
	}
	if value, ok := pc.mutation.Maturity(); ok {
		_spec.SetField(prompt.FieldMaturity, field.TypeEnum, value)
		_node.Maturity = value
	}
	if value, ok := pc.mutation.ForgeVersion(); ok {
		_spec.SetField(prompt.FieldForgeVersion, field.TypeString, value)
		_node.ForgeVersion = value
	}
	if value, ok := pc.mutation.Platforms(); ok {
		_spec.SetField(prompt.FieldPlatforms, field.TypeJSON, value)
		_node.Platforms = value
	}
	if value, ok := pc.mutation.Spec(); ok {
		_spec.SetField(prompt.FieldSpec, field.TypeString, value)
		_node.Spec = value
	}
	if value, ok := pc.mutation.SpecHash(); ok {
		_spec.SetField(prompt.FieldSpecHash, field.TypeString, value)
		_node.SpecHash = value
	}
	if value, ok := pc.mutation.IsInstalled(); ok {
		_spec.SetField(prompt.FieldIsInstalled, field.TypeBool, value)
		_node.IsInstalled = value
	}
	if value, ok := pc.mutation.InstallPath(); ok {
		_spec.SetField(prompt.FieldInstallPath, field.TypeString, value)
		_node.InstallPath = &value
	}
	if value, ok := pc.mutation.InstalledAt(); ok {
		_spec.SetField(prompt.FieldInstalledAt, field.TypeTime, value)
		_node.InstalledAt = &value
	}
	if value, ok := pc.mutation.CommitHash(); ok {
		_spec.SetField(prompt.FieldCommitHash, field.TypeString, value)
		_node.CommitHash = value
	}
	if value, ok := pc.mutation.Branch(); ok {
		_spec.SetField(prompt.FieldBranch, field.TypeString, value)
		_node.Branch = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(prompt.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(prompt.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.TemplatePath(); ok {
		_spec.SetField(prompt.FieldTemplatePath, field.TypeString, value)
		_node.TemplatePath = &value
	}
	if value, ok := pc.mutation.TemplateContent(); ok {
		_spec.SetField(prompt.FieldTemplateContent, field.TypeString, value)
		_node.TemplateContent = &value
	}
	if value, ok := pc.mutation.VariablesSchema(); ok {
		_spec.SetField(prompt.FieldVariablesSchema, field.TypeJSON, value)
		_node.VariablesSchema = value
	}
	if value, ok := pc.mutation.PromptType(); ok {
		_spec.SetField(prompt.FieldPromptType, field.TypeEnum, value)
		_node.PromptType = value
	}
	if value, ok := pc.mutation.ContextWindow(); ok {
		_spec.SetField(prompt.FieldContextWindow, field.TypeInt, value)
		_node.ContextWindow = &value
	}
	if value, ok := pc.mutation.DefaultVariables(); ok {
		_spec.SetField(prompt.FieldDefaultVariables, field.TypeJSON, value)
		_node.DefaultVariables = value
	}
	if value, ok := pc.mutation.RequiredVariables(); ok {
		_spec.SetField(prompt.FieldRequiredVariables, field.TypeJSON, value)
		_node.RequiredVariables = value
	}
	if value, ok := pc.mutation.Language(); ok {
		_spec.SetField(prompt.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := pc.mutation.SupportsStreaming(); ok {
		_spec.SetField(prompt.FieldSupportsStreaming, field.TypeBool, value)
		_node.SupportsStreaming = value
	}
	if value, ok := pc.mutation.ModelPreferences(); ok {
		_spec.SetField(prompt.FieldModelPreferences, field.TypeJSON, value)
		_node.ModelPreferences = value
	}
	if value, ok := pc.mutation.Temperature(); ok {
		_spec.SetField(prompt.FieldTemperature, field.TypeFloat64, value)
		_node.Temperature = &value
	}
	if value, ok := pc.mutation.MaxTokens(); ok {
		_spec.SetField(prompt.FieldMaxTokens, field.TypeInt, value)
		_node.MaxTokens = &value
	}
	if value, ok := pc.mutation.StopSequences(); ok {
		_spec.SetField(prompt.FieldStopSequences, field.TypeJSON, value)
		_node.StopSequences = value
	}
	if nodes := pc.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prompt.RepositoryTable,
			Columns: []string{prompt.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_prompts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prompt.DependenciesTable,
			Columns: []string{prompt.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promptdependency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PromptCreateBulk is the builder for creating many Prompt entities in bulk.
type PromptCreateBulk struct {
	config
	err      error
	builders []*PromptCreate
}

// Save creates the Prompt entities in the database.
func (pcb *PromptCreateBulk) Save(ctx context.Context) ([]*Prompt, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Prompt, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PromptCreateBulk) SaveX(ctx context.Context) []*Prompt {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PromptCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PromptCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
