name: Release

on:
  push:
    branches: [ 'release/*' ]
  pull_request:
    branches: [ 'main' ]
    types: [ closed ]

env:
  GO_VERSION: '1.24.0'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Calculate semantic version
        id: version
        uses: ./.github/workflows/semantic-version.yml
      
      - name: Extract or use calculated version
        id: final_version
        run: |
          # Try to extract version from branch name first
          BRANCH_VERSION=${GITHUB_HEAD_REF#release/}
          
          # If branch version looks like a semantic version, use it
          if [[ $BRANCH_VERSION =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION=$BRANCH_VERSION
            echo "Using branch version: $VERSION"
          else
            # Use calculated semantic version
            VERSION=${{ steps.version.outputs.version }}
            echo "Using calculated version: $VERSION"
          fi
          
          # Ensure version starts with 'v'
          if [[ ! $VERSION =~ ^v ]]; then
            VERSION="v$VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Download dependencies
        run: go mod download
      
      - name: Build release binaries
        run: |
          VERSION=${{ steps.final_version.outputs.version }}
          make build
          mkdir -p release
          
          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -o release/forge-${VERSION}-linux-amd64 ./cmd
          GOOS=darwin GOARCH=amd64 go build -o release/forge-${VERSION}-darwin-amd64 ./cmd
          GOOS=darwin GOARCH=arm64 go build -o release/forge-${VERSION}-darwin-arm64 ./cmd
          GOOS=windows GOARCH=amd64 go build -o release/forge-${VERSION}-windows-amd64.exe ./cmd
          
          # Generate checksums
          cd release
          sha256sum * > checksums.txt
          cd ..
      
      - name: Generate changelog
        id: changelog
        run: |
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD >> $GITHUB_OUTPUT || echo "- Initial release" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create annotated tag
        run: |
          VERSION=${{ steps.final_version.outputs.version }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a $VERSION -m "Release $VERSION"
          git push origin $VERSION
      
      - name: Create GitHub release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.final_version.outputs.version }}
          release_name: Release ${{ steps.final_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
      
      - name: Upload Linux release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/forge-${{ steps.final_version.outputs.version }}-linux-amd64
          asset_name: forge-${{ steps.final_version.outputs.version }}-linux-amd64
          asset_content_type: application/octet-stream
      
      - name: Upload macOS Intel release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/forge-${{ steps.final_version.outputs.version }}-darwin-amd64
          asset_name: forge-${{ steps.final_version.outputs.version }}-darwin-amd64
          asset_content_type: application/octet-stream
      
      - name: Upload macOS ARM release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/forge-${{ steps.final_version.outputs.version }}-darwin-arm64
          asset_name: forge-${{ steps.final_version.outputs.version }}-darwin-arm64
          asset_content_type: application/octet-stream
      
      - name: Upload Windows release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/forge-${{ steps.final_version.outputs.version }}-windows-amd64.exe
          asset_name: forge-${{ steps.final_version.outputs.version }}-windows-amd64.exe
          asset_content_type: application/octet-stream
      
      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain